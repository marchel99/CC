
CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009734  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003874  080098c8  080098c8  000198c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d13c  0800d13c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d13c  0800d13c  0001d13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d144  0800d144  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d144  0800d144  0001d144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d148  0800d148  0001d148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a194  200001e4  0800d330  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a378  0800d330  0002a378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168b3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003272  00000000  00000000  00036ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d6e  00000000  00000000  0003bf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ca  00000000  00000000  00065cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f61ed  00000000  00000000  0007e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001742ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  00174300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098ac 	.word	0x080098ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080098ac 	.word	0x080098ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a11      	ldr	r2, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_GPIO_Init+0x90>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f641 0104 	movw	r1, #6148	; 0x1804
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_GPIO_Init+0x94>)
 8000fb2:	f001 f9e5 	bl	8002380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000fb6:	f641 0304 	movw	r3, #6148	; 0x1804
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0x94>)
 8000fd0:	f001 f82c 	bl	800202c <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_I2C1_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_I2C1_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <MX_I2C1_Init+0x7c>)
 8000ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_I2C1_Init+0x74>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_I2C1_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_I2C1_Init+0x74>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_I2C1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_I2C1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_I2C1_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101e:	480e      	ldr	r0, [pc, #56]	; (8001058 <MX_I2C1_Init+0x74>)
 8001020:	f001 f9c6 	bl	80023b0 <HAL_I2C_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800102a:	f000 fb0f 	bl	800164c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102e:	2100      	movs	r1, #0
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_I2C1_Init+0x74>)
 8001032:	f001 fdb9 	bl	8002ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800103c:	f000 fb06 	bl	800164c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_I2C1_Init+0x74>)
 8001044:	f001 fdfb 	bl	8002c3e <HAL_I2CEx_ConfigDigitalFilter>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fafd 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000200 	.word	0x20000200
 800105c:	40005400 	.word	0x40005400
 8001060:	10909cec 	.word	0x10909cec

08001064 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ac      	sub	sp, #176	; 0xb0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2288      	movs	r2, #136	; 0x88
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f005 f8bf 	bl	8006208 <memset>
  if(i2cHandle->Instance==I2C1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_I2C_MspInit+0xb0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d13a      	bne.n	800110a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001094:	2340      	movs	r3, #64	; 0x40
 8001096:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001098:	2300      	movs	r3, #0
 800109a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fc7d 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010ac:	f000 face 	bl	800164c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b0:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010c8:	23c0      	movs	r3, #192	; 0xc0
 80010ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ce:	2312      	movs	r3, #18
 80010d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010e0:	2304      	movs	r3, #4
 80010e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_I2C_MspInit+0xb8>)
 80010ee:	f000 ff9d 	bl	800202c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 80010f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_I2C_MspInit+0xb4>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	37b0      	adds	r7, #176	; 0xb0
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40005400 	.word	0x40005400
 8001118:	40021000 	.word	0x40021000
 800111c:	48000400 	.word	0x48000400

08001120 <lcd_cmd>:
#define ST7735S_VMCTR1			0xc5
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

static void lcd_cmd(uint8_t cmd)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001130:	480c      	ldr	r0, [pc, #48]	; (8001164 <lcd_cmd+0x44>)
 8001132:	f001 f925 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <lcd_cmd+0x44>)
 800113e:	f001 f91f 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001142:	1df9      	adds	r1, r7, #7
 8001144:	f04f 33ff 	mov.w	r3, #4294967295
 8001148:	2201      	movs	r2, #1
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <lcd_cmd+0x48>)
 800114c:	f003 fb5d 	bl	800480a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <lcd_cmd+0x44>)
 8001158:	f001 f912 	bl	8002380 <HAL_GPIO_WritePin>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	48000400 	.word	0x48000400
 8001168:	2000a278 	.word	0x2000a278

0800116c <lcd_data>:

static void lcd_data(uint8_t data)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <lcd_data+0x44>)
 800117e:	f001 f8ff 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <lcd_data+0x44>)
 800118a:	f001 f8f9 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800118e:	1df9      	adds	r1, r7, #7
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	2201      	movs	r2, #1
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <lcd_data+0x48>)
 8001198:	f003 fb37 	bl	800480a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <lcd_data+0x44>)
 80011a4:	f001 f8ec 	bl	8002380 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	48000400 	.word	0x48000400
 80011b4:	2000a278 	.word	0x2000a278

080011b8 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(
  uint16_t value)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <lcd_send+0x20>
		lcd_cmd(value);
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ffa5 	bl	8001120 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 80011d6:	e004      	b.n	80011e2 <lcd_send+0x2a>
		lcd_data(value);
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ffc5 	bl	800116c <lcd_data>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2104      	movs	r1, #4
 80011f6:	4817      	ldr	r0, [pc, #92]	; (8001254 <lcd_init+0x68>)
 80011f8:	f001 f8c2 	bl	8002380 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f000 fe0b 	bl	8001e18 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2104      	movs	r1, #4
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <lcd_init+0x68>)
 8001208:	f001 f8ba 	bl	8002380 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	f000 fe03 	bl	8001e18 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e009      	b.n	800122c <lcd_init+0x40>
    lcd_send(init_table[i]);
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <lcd_init+0x6c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc9 	bl	80011b8 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b4b      	cmp	r3, #75	; 0x4b
 8001230:	d9f2      	bls.n	8001218 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8001232:	20c8      	movs	r0, #200	; 0xc8
 8001234:	f000 fdf0 	bl	8001e18 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8001238:	2011      	movs	r0, #17
 800123a:	f7ff ff71 	bl	8001120 <lcd_cmd>
  HAL_Delay(120);
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 fdea 	bl	8001e18 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8001244:	2029      	movs	r0, #41	; 0x29
 8001246:	f7ff ff6b 	bl	8001120 <lcd_cmd>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	48000400 	.word	0x48000400
 8001258:	08009b18 	.word	0x08009b18

0800125c <lcd_data16>:




static void lcd_data16(uint16_t value)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001266:	88fb      	ldrh	r3, [r7, #6]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	b29b      	uxth	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff7c 	bl	800116c <lcd_data>
	lcd_data(value);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff77 	bl	800116c <lcd_data>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <lcd_set_window>:
#define LCD_OFFSET_Y  2
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	60f8      	str	r0, [r7, #12]
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8001294:	202a      	movs	r0, #42	; 0x2a
 8001296:	f7ff ff43 	bl	8001120 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffda 	bl	800125c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffd1 	bl	800125c <lcd_data16>
 
  lcd_cmd(ST7735S_RASET);
 80012ba:	202b      	movs	r0, #43	; 0x2b
 80012bc:	f7ff ff30 	bl	8001120 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	3302      	adds	r3, #2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffc7 	bl	800125c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffbc 	bl	800125c <lcd_data16>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <lcd_put_pixel>:
		lcd_data16(color);
}


void lcd_put_pixel(int x, int y, uint16_t color)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	015b      	lsls	r3, r3, #5
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4413      	add	r3, r2
 800130a:	4905      	ldr	r1, [pc, #20]	; (8001320 <lcd_put_pixel+0x34>)
 800130c:	88fa      	ldrh	r2, [r7, #6]
 800130e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000254 	.word	0x20000254

08001324 <lcd_copy>:
//bufor
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


void lcd_copy(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	22a0      	movs	r2, #160	; 0xa0
 800132c:	2100      	movs	r1, #0
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff ffa9 	bl	8001286 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001334:	202c      	movs	r0, #44	; 0x2c
 8001336:	f7ff fef3 	bl	8001120 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001340:	480c      	ldr	r0, [pc, #48]	; (8001374 <lcd_copy+0x50>)
 8001342:	f001 f81d 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134c:	4809      	ldr	r0, [pc, #36]	; (8001374 <lcd_copy+0x50>)
 800134e:	f001 f817 	bl	8002380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800135a:	4907      	ldr	r1, [pc, #28]	; (8001378 <lcd_copy+0x54>)
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <lcd_copy+0x58>)
 800135e:	f003 fa54 	bl	800480a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <lcd_copy+0x50>)
 800136a:	f001 f809 	bl	8002380 <HAL_GPIO_WritePin>
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	48000400 	.word	0x48000400
 8001378:	20000254 	.word	0x20000254
 800137c:	2000a278 	.word	0x2000a278

08001380 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8001386:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 fcd1 	bl	8001d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f90a 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f7ff fddc 	bl	8000f4c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001394:	f000 fa50 	bl	8001838 <MX_SPI2_Init>
  MX_RTC_Init();
 8001398:	f000 f9f4 	bl	8001784 <MX_RTC_Init>
  MX_I2C1_Init();
 800139c:	f7ff fe22 	bl	8000fe4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013a0:	f000 fc10 	bl	8001bc4 <MX_USART2_UART_Init>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);

   */

  lcd_init();
 80013a4:	f7ff ff22 	bl	80011ec <lcd_init>

  // hagl_put_text(L"Godzina: ", 15, 20, WHITE, font6x9);
  //-l_+p , -g|+d

  // Teraz możesz wywołać funkcję hagl_put_text z tym buforem
  hagl_put_text(buffer, 15, 40, WHITE, font6x9);
 80013a8:	f507 7016 	add.w	r0, r7, #600	; 0x258
 80013ac:	4b6f      	ldr	r3, [pc, #444]	; (800156c <main+0x1ec>)
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	2228      	movs	r2, #40	; 0x28
 80013b6:	210f      	movs	r1, #15
 80013b8:	f004 fc46 	bl	8005c48 <hagl_put_text>
  while (1)
  {

    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80013bc:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	486a      	ldr	r0, [pc, #424]	; (8001570 <main+0x1f0>)
 80013c6:	f003 f822 	bl	800440e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN); // Funkcja musi być wywołana po GetTime
 80013ca:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4867      	ldr	r0, [pc, #412]	; (8001570 <main+0x1f0>)
 80013d4:	f003 f877 	bl	80044c6 <HAL_RTC_GetDate>
    swprintf(time_buffer, sizeof(time_buffer), L"Czas: %02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80013d8:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80013dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80013e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	461a      	mov	r2, r3
 80013f0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80013f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	460b      	mov	r3, r1
 8001404:	4a5b      	ldr	r2, [pc, #364]	; (8001574 <main+0x1f4>)
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	f005 fcd8 	bl	8006dbc <swprintf>

    hagl_put_text(time_buffer, 15, 20, WHITE, font6x9);
 800140c:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 8001410:	4b56      	ldr	r3, [pc, #344]	; (800156c <main+0x1ec>)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001418:	2214      	movs	r2, #20
 800141a:	210f      	movs	r1, #15
 800141c:	f004 fc14 	bl	8005c48 <hagl_put_text>

    float battery_voltage = read_voltage(&hi2c1);
 8001420:	4855      	ldr	r0, [pc, #340]	; (8001578 <main+0x1f8>)
 8001422:	f000 f919 	bl	8001658 <read_voltage>
 8001426:	ed87 0ab9 	vstr	s0, [r7, #740]	; 0x2e4
    wchar_t voltage_buffer[32]; // Bufor na napięcie baterii

    if (battery_voltage > 0)
 800142a:	edd7 7ab9 	vldr	s15, [r7, #740]	; 0x2e4
 800142e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	dd18      	ble.n	800146a <main+0xea>
    {
      // Formatowanie i wyświetlanie napięcia baterii
      swprintf(voltage_buffer, sizeof(voltage_buffer), L"Napięcie: %.4fV", battery_voltage);
 8001438:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 800143c:	f7ff f884 	bl	8000548 <__aeabi_f2d>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001448:	e9cd 2300 	strd	r2, r3, [sp]
 800144c:	4a4b      	ldr	r2, [pc, #300]	; (800157c <main+0x1fc>)
 800144e:	2180      	movs	r1, #128	; 0x80
 8001450:	f005 fcb4 	bl	8006dbc <swprintf>
      hagl_put_text(voltage_buffer, 15, 40, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 8001454:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001458:	4b44      	ldr	r3, [pc, #272]	; (800156c <main+0x1ec>)
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001460:	2228      	movs	r2, #40	; 0x28
 8001462:	210f      	movs	r1, #15
 8001464:	f004 fbf0 	bl	8005c48 <hagl_put_text>
 8001468:	e008      	b.n	800147c <main+0xfc>
    }
    else
    {
      // Wyświetlanie informacji o błędzie
      hagl_put_text(L"Błąd odczytu napięcia!", 15, 40, WHITE, font6x9);
 800146a:	4b40      	ldr	r3, [pc, #256]	; (800156c <main+0x1ec>)
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001472:	2228      	movs	r2, #40	; 0x28
 8001474:	210f      	movs	r1, #15
 8001476:	4842      	ldr	r0, [pc, #264]	; (8001580 <main+0x200>)
 8001478:	f004 fbe6 	bl	8005c48 <hagl_put_text>
    }

    float battery_soc = read_soc(&hi2c1);
 800147c:	483e      	ldr	r0, [pc, #248]	; (8001578 <main+0x1f8>)
 800147e:	f000 f92d 	bl	80016dc <read_soc>
 8001482:	ed87 0ab8 	vstr	s0, [r7, #736]	; 0x2e0
    wchar_t soc_buffer[32]; // Bufor na procent naładowania baterii

    if (battery_soc >= 0)
 8001486:	edd7 7ab8 	vldr	s15, [r7, #736]	; 0x2e0
 800148a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800148e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001492:	db18      	blt.n	80014c6 <main+0x146>
    {
      // Formatowanie i wyświetlanie stanu naładowania baterii
      swprintf(soc_buffer, sizeof(soc_buffer), L"Naładowanie: %.2f%%", battery_soc);
 8001494:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8001498:	f7ff f856 	bl	8000548 <__aeabi_f2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80014a4:	e9cd 2300 	strd	r2, r3, [sp]
 80014a8:	4a36      	ldr	r2, [pc, #216]	; (8001584 <main+0x204>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	f005 fc86 	bl	8006dbc <swprintf>
      hagl_put_text(soc_buffer, 15, 50, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 80014b0:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <main+0x1ec>)
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014bc:	2232      	movs	r2, #50	; 0x32
 80014be:	210f      	movs	r1, #15
 80014c0:	f004 fbc2 	bl	8005c48 <hagl_put_text>
 80014c4:	e008      	b.n	80014d8 <main+0x158>
    }
    else
    {
      // Wyświetlanie informacji o błędzie
      hagl_put_text(L"Błąd odczytu SoC!", 15, 50, WHITE, font6x9);
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <main+0x1ec>)
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ce:	2232      	movs	r2, #50	; 0x32
 80014d0:	210f      	movs	r1, #15
 80014d2:	482d      	ldr	r0, [pc, #180]	; (8001588 <main+0x208>)
 80014d4:	f004 fbb8 	bl	8005c48 <hagl_put_text>
    }

    uint8_t ic_version = read_ic_version(&hi2c1);
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <main+0x1f8>)
 80014da:	f000 f931 	bl	8001740 <read_ic_version>
 80014de:	4603      	mov	r3, r0
 80014e0:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
    wchar_t version_buffer[32]; // Bufor na wersję układu IC

    if (ic_version != 0xFF)
 80014e4:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80014e8:	2bff      	cmp	r3, #255	; 0xff
 80014ea:	d012      	beq.n	8001512 <main+0x192>
    {
      // Formatowanie i wyświetlanie wersji układu IC
      swprintf(version_buffer, sizeof(version_buffer), L"Wersja IC: 0x%02X", ic_version);
 80014ec:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 80014f0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80014f4:	4a25      	ldr	r2, [pc, #148]	; (800158c <main+0x20c>)
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	f005 fc60 	bl	8006dbc <swprintf>
      hagl_put_text(version_buffer, 15, 60, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 80014fc:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <main+0x1ec>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001508:	223c      	movs	r2, #60	; 0x3c
 800150a:	210f      	movs	r1, #15
 800150c:	f004 fb9c 	bl	8005c48 <hagl_put_text>
 8001510:	e008      	b.n	8001524 <main+0x1a4>
    }
    else
    {
      // Wyświetlanie informacji o błędzie
      hagl_put_text(L"Błąd odczytu wersji IC!", 15, 60, WHITE, font6x9);
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <main+0x1ec>)
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151a:	223c      	movs	r2, #60	; 0x3c
 800151c:	210f      	movs	r1, #15
 800151e:	481c      	ldr	r0, [pc, #112]	; (8001590 <main+0x210>)
 8001520:	f004 fb92 	bl	8005c48 <hagl_put_text>
  
    char uart_buffer[64];

    // Formatuj dane do CSV

    float arka=20;
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <main+0x214>)
 8001526:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    snprintf(uart_buffer, sizeof(uart_buffer), "OK %.4f TEST\r\n", arka);
 800152a:	f8d7 02d8 	ldr.w	r0, [r7, #728]	; 0x2d8
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4638      	mov	r0, r7
 8001538:	e9cd 2300 	strd	r2, r3, [sp]
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <main+0x218>)
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	f005 fbc4 	bl	8006ccc <sniprintf>

    // Wysyłaj dane przez UART
    //HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);


HAL_UART_Transmit(&huart2, "Hello world! \n\r", arka, HAL_MAX_DELAY);
 8001544:	edd7 7ab6 	vldr	s15, [r7, #728]	; 0x2d8
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	ee17 3a90 	vmov	r3, s15
 8001550:	b29a      	uxth	r2, r3
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	4911      	ldr	r1, [pc, #68]	; (800159c <main+0x21c>)
 8001558:	4811      	ldr	r0, [pc, #68]	; (80015a0 <main+0x220>)
 800155a:	f003 fc77 	bl	8004e4c <HAL_UART_Transmit>


    lcd_copy();
 800155e:	f7ff fee1 	bl	8001324 <lcd_copy>
    HAL_Delay(1000);
 8001562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001566:	f000 fc57 	bl	8001e18 <HAL_Delay>
  {
 800156a:	e727      	b.n	80013bc <main+0x3c>
 800156c:	08009bb0 	.word	0x08009bb0
 8001570:	2000a254 	.word	0x2000a254
 8001574:	080098c8 	.word	0x080098c8
 8001578:	20000200 	.word	0x20000200
 800157c:	0800991c 	.word	0x0800991c
 8001580:	0800995c 	.word	0x0800995c
 8001584:	080099b8 	.word	0x080099b8
 8001588:	08009a08 	.word	0x08009a08
 800158c:	08009a50 	.word	0x08009a50
 8001590:	08009a98 	.word	0x08009a98
 8001594:	41a00000 	.word	0x41a00000
 8001598:	08009af8 	.word	0x08009af8
 800159c:	08009b08 	.word	0x08009b08
 80015a0:	2000a2e0 	.word	0x2000a2e0

080015a4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2244      	movs	r2, #68	; 0x44
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fe28 	bl	8006208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ca:	f001 fb93 	bl	8002cf4 <HAL_PWREx_ControlVoltageScaling>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d4:	f000 f83a 	bl	800164c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 80015d8:	2318      	movs	r3, #24
 80015da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015e8:	2360      	movs	r3, #96	; 0x60
 80015ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ec:	2302      	movs	r3, #2
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015f0:	2301      	movs	r3, #1
 80015f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015f4:	2301      	movs	r3, #1
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015f8:	2328      	movs	r3, #40	; 0x28
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015fc:	2307      	movs	r3, #7
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001600:	2302      	movs	r3, #2
 8001602:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001604:	2302      	movs	r3, #2
 8001606:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fbc7 	bl	8002da0 <HAL_RCC_OscConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001618:	f000 f818 	bl	800164c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800161c:	230f      	movs	r3, #15
 800161e:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001620:	2303      	movs	r3, #3
 8001622:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001630:	463b      	mov	r3, r7
 8001632:	2104      	movs	r1, #4
 8001634:	4618      	mov	r0, r3
 8001636:	f001 ff8f 	bl	8003558 <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001640:	f000 f804 	bl	800164c <Error_Handler>
  }
}
 8001644:	bf00      	nop
 8001646:	3758      	adds	r7, #88	; 0x58
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001654:	e7fe      	b.n	8001654 <Error_Handler+0x8>
	...

08001658 <read_voltage>:
#include "max.h"
#include "i2c.h"

float read_voltage(I2C_HandleTypeDef *hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af04      	add	r7, sp, #16
 800165e:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    uint16_t raw_voltage;
    float voltage;

   
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, REGISTER_VCELL, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY);
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2302      	movs	r3, #2
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	2301      	movs	r3, #1
 8001672:	2202      	movs	r2, #2
 8001674:	216c      	movs	r1, #108	; 0x6c
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 ff2a 	bl	80024d0 <HAL_I2C_Mem_Read>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <read_voltage+0x32>
    {
        return -1.0f; // Indicate error
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <read_voltage+0x80>)
 8001688:	e019      	b.n	80016be <read_voltage+0x66>
    }

    
    raw_voltage = (data[0] << 8) | data[1];
 800168a:	7b3b      	ldrb	r3, [r7, #12]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21a      	sxth	r2, r3
 8001690:	7b7b      	ldrb	r3, [r7, #13]
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	b21b      	sxth	r3, r3
 8001698:	82bb      	strh	r3, [r7, #20]


    voltage = raw_voltage * 78.125e-6; // 78.125 µV per LSB
 800169a:	8abb      	ldrh	r3, [r7, #20]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff41 	bl	8000524 <__aeabi_i2d>
 80016a2:	a30b      	add	r3, pc, #44	; (adr r3, 80016d0 <read_voltage+0x78>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ffa6 	bl	80005f8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa78 	bl	8000ba8 <__aeabi_d2f>
 80016b8:	4603      	mov	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]

    return voltage;
 80016bc:	693b      	ldr	r3, [r7, #16]
}
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	f3af 8000 	nop.w
 80016d0:	47ae147b 	.word	0x47ae147b
 80016d4:	3f147ae1 	.word	0x3f147ae1
 80016d8:	bf800000 	.word	0xbf800000

080016dc <read_soc>:

float read_soc(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af04      	add	r7, sp, #16
 80016e2:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    float soc;

    // Odczyt 2 bajtów z rejestru SOC
    if (HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, REGISTER_SOC, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK)
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2302      	movs	r3, #2
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2204      	movs	r2, #4
 80016f8:	216c      	movs	r1, #108	; 0x6c
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fee8 	bl	80024d0 <HAL_I2C_Mem_Read>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10e      	bne.n	8001724 <read_soc+0x48>
    {
        // Wartość SoC jest przechowywana jako 16-bitowa liczba, gdzie każdy bit odpowiada 1/256%
        soc = ((data[0] << 8) | data[1]) / 256.0f;
 8001706:	7a3b      	ldrb	r3, [r7, #8]
 8001708:	021b      	lsls	r3, r3, #8
 800170a:	7a7a      	ldrb	r2, [r7, #9]
 800170c:	4313      	orrs	r3, r2
 800170e:	ee07 3a90 	vmov	s15, r3
 8001712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001716:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001738 <read_soc+0x5c>
 800171a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171e:	edc7 7a03 	vstr	s15, [r7, #12]
 8001722:	e001      	b.n	8001728 <read_soc+0x4c>
    }
    else
    {
        // W przypadku błędu zwróć -1.0f
        soc = -1.0f;
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <read_soc+0x60>)
 8001726:	60fb      	str	r3, [r7, #12]
    }

    return soc;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	ee07 3a90 	vmov	s15, r3
}
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	43800000 	.word	0x43800000
 800173c:	bf800000 	.word	0xbf800000

08001740 <read_ic_version>:


uint8_t read_ic_version(I2C_HandleTypeDef *hi2c) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af04      	add	r7, sp, #16
 8001746:	6078      	str	r0, [r7, #4]
    uint8_t version;
    uint8_t reg = REGISTER_VERSION; // Adres rejestru VERSION to 0x08
 8001748:	2308      	movs	r3, #8
 800174a:	73fb      	strb	r3, [r7, #15]

    // Odczyt 1 bajtu z rejestru VERSION
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &version, sizeof(version), HAL_MAX_DELAY);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	b29a      	uxth	r2, r3
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2301      	movs	r3, #1
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f107 030d 	add.w	r3, r7, #13
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	216c      	movs	r1, #108	; 0x6c
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 feb3 	bl	80024d0 <HAL_I2C_Mem_Read>
 800176a:	4603      	mov	r3, r0
 800176c:	73bb      	strb	r3, [r7, #14]
    
    if (status != HAL_OK) {
 800176e:	7bbb      	ldrb	r3, [r7, #14]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <read_ic_version+0x38>
        // W przypadku błędu zwróć 0xFF
        return 0xFF;
 8001774:	23ff      	movs	r3, #255	; 0xff
 8001776:	e000      	b.n	800177a <read_ic_version+0x3a>
    }
    
    return version;
 8001778:	7b7b      	ldrb	r3, [r7, #13]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_RTC_Init+0x48>)
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <MX_RTC_Init+0x4c>)
 800178c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_RTC_Init+0x48>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <MX_RTC_Init+0x48>)
 8001796:	227f      	movs	r2, #127	; 0x7f
 8001798:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_RTC_Init+0x48>)
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017a0:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <MX_RTC_Init+0x48>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_RTC_Init+0x48>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <MX_RTC_Init+0x48>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_RTC_Init+0x48>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_RTC_Init+0x48>)
 80017ba:	f002 fdad 	bl	8004318 <HAL_RTC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80017c4:	f7ff ff42 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	2000a254 	.word	0x2000a254
 80017d0:	40002800 	.word	0x40002800

080017d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0a4      	sub	sp, #144	; 0x90
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2288      	movs	r2, #136	; 0x88
 80017e2:	2100      	movs	r1, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 fd0f 	bl	8006208 <memset>
  if(rtcHandle->Instance==RTC)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a10      	ldr	r2, [pc, #64]	; (8001830 <HAL_RTC_MspInit+0x5c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d118      	bne.n	8001826 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f002 f8ca 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001812:	f7ff ff1b 	bl	800164c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_RTC_MspInit+0x60>)
 8001818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181c:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RTC_MspInit+0x60>)
 800181e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001826:	bf00      	nop
 8001828:	3790      	adds	r7, #144	; 0x90
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40002800 	.word	0x40002800
 8001834:	40021000 	.word	0x40021000

08001838 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_SPI2_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_SPI2_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_SPI2_Init+0x74>)
 8001844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001848:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_SPI2_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_SPI2_Init+0x74>)
 8001852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001856:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_SPI2_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_SPI2_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_SPI2_Init+0x74>)
 8001866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_SPI2_Init+0x74>)
 800186e:	2210      	movs	r2, #16
 8001870:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_SPI2_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_SPI2_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_SPI2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_SPI2_Init+0x74>)
 8001886:	2207      	movs	r2, #7
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_SPI2_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_SPI2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_SPI2_Init+0x74>)
 8001898:	f002 ff14 	bl	80046c4 <HAL_SPI_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f7ff fed3 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000a278 	.word	0x2000a278
 80018b0:	40003800 	.word	0x40003800

080018b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a25      	ldr	r2, [pc, #148]	; (8001968 <HAL_SPI_MspInit+0xb4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d144      	bne.n	8001960 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a24      	ldr	r2, [pc, #144]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_SPI_MspInit+0xb8>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_SPI_MspInit+0xb8>)
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	4a18      	ldr	r2, [pc, #96]	; (800196c <HAL_SPI_MspInit+0xb8>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_SPI_MspInit+0xb8>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800191e:	2308      	movs	r3, #8
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192e:	2305      	movs	r3, #5
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <HAL_SPI_MspInit+0xbc>)
 800193a:	f000 fb77 	bl	800202c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800193e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001950:	2305      	movs	r3, #5
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <HAL_SPI_MspInit+0xc0>)
 800195c:	f000 fb66 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40003800 	.word	0x40003800
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_MspInit+0x44>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	; 0x60
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_MspInit+0x44>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_MspInit+0x44>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <HAL_MspInit+0x44>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	; 0x58
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_MspInit+0x44>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f9e4 	bl	8001dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return 1;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <_kill>:

int _kill(int pid, int sig)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a2e:	f004 f993 	bl	8005d58 <__errno>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2216      	movs	r2, #22
 8001a36:	601a      	str	r2, [r3, #0]
  return -1;
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_exit>:

void _exit (int status)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ffe7 	bl	8001a24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a56:	e7fe      	b.n	8001a56 <_exit+0x12>

08001a58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00a      	b.n	8001a80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a6a:	f3af 8000 	nop.w
 8001a6e:	4601      	mov	r1, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf0      	blt.n	8001a6a <_read+0x12>
  }

  return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e009      	b.n	8001ab8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf1      	blt.n	8001aa4 <_write+0x12>
  }
  return len;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:

int _close(int file)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af2:	605a      	str	r2, [r3, #4]
  return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <_isatty>:

int _isatty(int file)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b0a:	2301      	movs	r3, #1
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <_sbrk+0x5c>)
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <_sbrk+0x60>)
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b48:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <_sbrk+0x64>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <_sbrk+0x68>)
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <_sbrk+0x64>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d207      	bcs.n	8001b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b64:	f004 f8f8 	bl	8005d58 <__errno>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	e009      	b.n	8001b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <_sbrk+0x64>)
 8001b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20018000 	.word	0x20018000
 8001b94:	00000400 	.word	0x00000400
 8001b98:	2000a2dc 	.word	0x2000a2dc
 8001b9c:	2000a378 	.word	0x2000a378

08001ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <SystemInit+0x20>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	4a05      	ldr	r2, [pc, #20]	; (8001bc0 <SystemInit+0x20>)
 8001bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <MX_USART2_UART_Init+0x5c>)
 8001bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c08:	f003 f8d2 	bl	8004db0 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c12:	f7ff fd1b 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000a2e0 	.word	0x2000a2e0
 8001c20:	40004400 	.word	0x40004400

08001c24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0ac      	sub	sp, #176	; 0xb0
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2288      	movs	r2, #136	; 0x88
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fadf 	bl	8006208 <memset>
  if(uartHandle->Instance==USART2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_UART_MspInit+0xb0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d13b      	bne.n	8001ccc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	4618      	mov	r0, r3
 8001c62:	f001 fe9d 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c6c:	f7ff fcee 	bl	800164c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c7c:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c94:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_UART_MspInit+0xb4>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f000 f9b0 	bl	800202c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ccc:	bf00      	nop
 8001cce:	37b0      	adds	r7, #176	; 0xb0
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	40021000 	.word	0x40021000

08001cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ce0:	f7ff ff5e 	bl	8001ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	; (8001d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	; (8001d28 <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d0a:	f004 f9e3 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d0e:	f7ff fb37 	bl	8001380 <main>

08001d12 <LoopForever>:

LoopForever:
    b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d20:	0800d14c 	.word	0x0800d14c
  ldr r2, =_sbss
 8001d24:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d28:	2000a378 	.word	0x2000a378

08001d2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_2_IRQHandler>

08001d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f000 f943 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d3e:	200f      	movs	r0, #15
 8001d40:	f000 f80e 	bl	8001d60 <HAL_InitTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	e001      	b.n	8001d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d50:	f7ff fe12 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_InitTick+0x70>)
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 f941 	bl	8002012 <HAL_SYSTICK_Config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10f      	bne.n	8001db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d809      	bhi.n	8001db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f000 f919 	bl	8001fda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <HAL_InitTick+0x74>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e007      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e004      	b.n	8001dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e001      	b.n	8001dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000008 	.word	0x20000008
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_IncTick+0x20>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_IncTick+0x24>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4413      	add	r3, r2
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_IncTick+0x24>)
 8001dea:	6013      	str	r3, [r2, #0]
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	2000a364 	.word	0x2000a364

08001e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_GetTick+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000a364 	.word	0x2000a364

08001e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e20:	f7ff ffee 	bl	8001e00 <HAL_GetTick>
 8001e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e30:	d005      	beq.n	8001e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_Delay+0x44>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3e:	bf00      	nop
 8001e40:	f7ff ffde 	bl	8001e00 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f7      	bhi.n	8001e40 <HAL_Delay+0x28>
  {
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	6039      	str	r1, [r7, #0]
 8001ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	db0a      	blt.n	8001eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	490c      	ldr	r1, [pc, #48]	; (8001f10 <__NVIC_SetPriority+0x4c>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	0112      	lsls	r2, r2, #4
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eec:	e00a      	b.n	8001f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	4908      	ldr	r1, [pc, #32]	; (8001f14 <__NVIC_SetPriority+0x50>)
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3b04      	subs	r3, #4
 8001efc:	0112      	lsls	r2, r2, #4
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	440b      	add	r3, r1
 8001f02:	761a      	strb	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000e100 	.word	0xe000e100
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b089      	sub	sp, #36	; 0x24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f1c3 0307 	rsb	r3, r3, #7
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	bf28      	it	cs
 8001f36:	2304      	movcs	r3, #4
 8001f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2b06      	cmp	r3, #6
 8001f40:	d902      	bls.n	8001f48 <NVIC_EncodePriority+0x30>
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3b03      	subs	r3, #3
 8001f46:	e000      	b.n	8001f4a <NVIC_EncodePriority+0x32>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43da      	mvns	r2, r3
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43d9      	mvns	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	4313      	orrs	r3, r2
         );
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3724      	adds	r7, #36	; 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f90:	d301      	bcc.n	8001f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00f      	b.n	8001fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <SysTick_Config+0x40>)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9e:	210f      	movs	r1, #15
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f7ff ff8e 	bl	8001ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <SysTick_Config+0x40>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <SysTick_Config+0x40>)
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	e000e010 	.word	0xe000e010

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff47 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b086      	sub	sp, #24
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	60b9      	str	r1, [r7, #8]
 8001fe4:	607a      	str	r2, [r7, #4]
 8001fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fec:	f7ff ff5c 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001ff0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68b9      	ldr	r1, [r7, #8]
 8001ff6:	6978      	ldr	r0, [r7, #20]
 8001ff8:	f7ff ff8e 	bl	8001f18 <NVIC_EncodePriority>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002002:	4611      	mov	r1, r2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff5d 	bl	8001ec4 <__NVIC_SetPriority>
}
 800200a:	bf00      	nop
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffb0 	bl	8001f80 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e17f      	b.n	800233c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8171 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d118      	bne.n	800210c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	08db      	lsrs	r3, r3, #3
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	6939      	ldr	r1, [r7, #16]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ac 	beq.w	8002336 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_GPIO_Init+0x330>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6613      	str	r3, [r2, #96]	; 0x60
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_GPIO_Init+0x330>)
 80021ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021f6:	4a5a      	ldr	r2, [pc, #360]	; (8002360 <HAL_GPIO_Init+0x334>)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	089b      	lsrs	r3, r3, #2
 80021fc:	3302      	adds	r3, #2
 80021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0303 	and.w	r3, r3, #3
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	220f      	movs	r2, #15
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x242>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4f      	ldr	r2, [pc, #316]	; (8002364 <HAL_GPIO_Init+0x338>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_GPIO_Init+0x33c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4d      	ldr	r2, [pc, #308]	; (800236c <HAL_GPIO_Init+0x340>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4c      	ldr	r2, [pc, #304]	; (8002370 <HAL_GPIO_Init+0x344>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_GPIO_Init+0x348>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4a      	ldr	r2, [pc, #296]	; (8002378 <HAL_GPIO_Init+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x22a>
 8002252:	2306      	movs	r3, #6
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002256:	2307      	movs	r3, #7
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x244>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x244>
 800226e:	2300      	movs	r3, #0
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800228e:	4b3b      	ldr	r3, [pc, #236]	; (800237c <HAL_GPIO_Init+0x350>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	43db      	mvns	r3, r3
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	4013      	ands	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <HAL_GPIO_Init+0x350>)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_GPIO_Init+0x350>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_GPIO_Init+0x350>)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_GPIO_Init+0x350>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002306:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_GPIO_Init+0x350>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_GPIO_Init+0x350>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002330:	4a12      	ldr	r2, [pc, #72]	; (800237c <HAL_GPIO_Init+0x350>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae78 	bne.w	800203c <HAL_GPIO_Init+0x10>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	371c      	adds	r7, #28
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40010000 	.word	0x40010000
 8002364:	48000400 	.word	0x48000400
 8002368:	48000800 	.word	0x48000800
 800236c:	48000c00 	.word	0x48000c00
 8002370:	48001000 	.word	0x48001000
 8002374:	48001400 	.word	0x48001400
 8002378:	48001800 	.word	0x48001800
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
 800238c:	4613      	mov	r3, r2
 800238e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002390:	787b      	ldrb	r3, [r7, #1]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002396:	887a      	ldrh	r2, [r7, #2]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800239c:	e002      	b.n	80023a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e081      	b.n	80024c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fe44 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002410:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e006      	b.n	8002438 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002436:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d104      	bne.n	800244a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69d9      	ldr	r1, [r3, #28]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	4608      	mov	r0, r1
 80024da:	4611      	mov	r1, r2
 80024dc:	461a      	mov	r2, r3
 80024de:	4603      	mov	r3, r0
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	460b      	mov	r3, r1
 80024e4:	813b      	strh	r3, [r7, #8]
 80024e6:	4613      	mov	r3, r2
 80024e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	f040 80fd 	bne.w	80026f2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_I2C_Mem_Read+0x34>
 80024fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002500:	2b00      	cmp	r3, #0
 8002502:	d105      	bne.n	8002510 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0f1      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_I2C_Mem_Read+0x4e>
 800251a:	2302      	movs	r3, #2
 800251c:	e0ea      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002526:	f7ff fc6b 	bl	8001e00 <HAL_GetTick>
 800252a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2319      	movs	r3, #25
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f95b 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0d5      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2222      	movs	r2, #34	; 0x22
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002568:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002570:	88f8      	ldrh	r0, [r7, #6]
 8002572:	893a      	ldrh	r2, [r7, #8]
 8002574:	8979      	ldrh	r1, [r7, #10]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4603      	mov	r3, r0
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f8bf 	bl	8002704 <I2C_RequestMemoryRead>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0ad      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2bff      	cmp	r3, #255	; 0xff
 80025a0:	d90e      	bls.n	80025c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	22ff      	movs	r2, #255	; 0xff
 80025a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	8979      	ldrh	r1, [r7, #10]
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_I2C_Mem_Read+0x22c>)
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f000 fac3 	bl	8002b44 <I2C_TransferConfig>
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	8979      	ldrh	r1, [r7, #10]
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <HAL_I2C_Mem_Read+0x22c>)
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fab2 	bl	8002b44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	2200      	movs	r2, #0
 80025e8:	2104      	movs	r1, #4
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 f902 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07c      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d034      	beq.n	80026a0 <HAL_I2C_Mem_Read+0x1d0>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	2b00      	cmp	r3, #0
 800263c:	d130      	bne.n	80026a0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	2200      	movs	r2, #0
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f8d3 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e04d      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265c:	b29b      	uxth	r3, r3
 800265e:	2bff      	cmp	r3, #255	; 0xff
 8002660:	d90e      	bls.n	8002680 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	22ff      	movs	r2, #255	; 0xff
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	b2da      	uxtb	r2, r3
 800266e:	8979      	ldrh	r1, [r7, #10]
 8002670:	2300      	movs	r3, #0
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fa63 	bl	8002b44 <I2C_TransferConfig>
 800267e:	e00f      	b.n	80026a0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268e:	b2da      	uxtb	r2, r3
 8002690:	8979      	ldrh	r1, [r7, #10]
 8002692:	2300      	movs	r3, #0
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fa52 	bl	8002b44 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d19a      	bne.n	80025e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f920 	bl	80028f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e01a      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2220      	movs	r2, #32
 80026c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_I2C_Mem_Read+0x230>)
 80026d2:	400b      	ands	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ee:	2300      	movs	r3, #0
 80026f0:	e000      	b.n	80026f4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
  }
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	80002400 	.word	0x80002400
 8002700:	fe00e800 	.word	0xfe00e800

08002704 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	4608      	mov	r0, r1
 800270e:	4611      	mov	r1, r2
 8002710:	461a      	mov	r2, r3
 8002712:	4603      	mov	r3, r0
 8002714:	817b      	strh	r3, [r7, #10]
 8002716:	460b      	mov	r3, r1
 8002718:	813b      	strh	r3, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <I2C_RequestMemoryRead+0xa4>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2300      	movs	r3, #0
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa0a 	bl	8002b44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 f89d 	bl	8002874 <I2C_WaitOnTXISFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e02c      	b.n	800279e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d105      	bne.n	8002756 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800274a:	893b      	ldrh	r3, [r7, #8]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	629a      	str	r2, [r3, #40]	; 0x28
 8002754:	e015      	b.n	8002782 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002756:	893b      	ldrh	r3, [r7, #8]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	b29b      	uxth	r3, r3
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f883 	bl	8002874 <I2C_WaitOnTXISFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e012      	b.n	800279e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002778:	893b      	ldrh	r3, [r7, #8]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2200      	movs	r2, #0
 800278a:	2140      	movs	r1, #64	; 0x40
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f831 	bl	80027f4 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	80002000 	.word	0x80002000

080027ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d103      	bne.n	80027ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2200      	movs	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d007      	beq.n	80027e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	619a      	str	r2, [r3, #24]
  }
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002804:	e022      	b.n	800284c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280c:	d01e      	beq.n	800284c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280e:	f7ff faf7 	bl	8001e00 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d302      	bcc.n	8002824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e00f      	b.n	800286c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4013      	ands	r3, r2
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	429a      	cmp	r2, r3
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	461a      	mov	r2, r3
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	429a      	cmp	r2, r3
 8002868:	d0cd      	beq.n	8002806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002880:	e02c      	b.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f870 	bl	800296c <I2C_IsErrorOccurred>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e02a      	b.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d01e      	beq.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff faaf 	bl	8001e00 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d113      	bne.n	80028dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e007      	b.n	80028ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d1cb      	bne.n	8002882 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002900:	e028      	b.n	8002954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f830 	bl	800296c <I2C_IsErrorOccurred>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e026      	b.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002916:	f7ff fa73 	bl	8001e00 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	429a      	cmp	r2, r3
 8002924:	d302      	bcc.n	800292c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d113      	bne.n	8002954 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b20      	cmp	r3, #32
 8002960:	d1cf      	bne.n	8002902 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f003 0310 	and.w	r3, r3, #16
 8002994:	2b00      	cmp	r3, #0
 8002996:	d075      	beq.n	8002a84 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2210      	movs	r2, #16
 800299e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029a0:	e056      	b.n	8002a50 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a8:	d052      	beq.n	8002a50 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029aa:	f7ff fa29 	bl	8001e00 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d302      	bcc.n	80029c0 <I2C_IsErrorOccurred+0x54>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d147      	bne.n	8002a50 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e2:	d12e      	bne.n	8002a42 <I2C_IsErrorOccurred+0xd6>
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ea:	d02a      	beq.n	8002a42 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80029ec:	7cfb      	ldrb	r3, [r7, #19]
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d027      	beq.n	8002a42 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a00:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a02:	f7ff f9fd 	bl	8001e00 <HAL_GetTick>
 8002a06:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a08:	e01b      	b.n	8002a42 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a0a:	f7ff f9f9 	bl	8001e00 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b19      	cmp	r3, #25
 8002a16:	d914      	bls.n	8002a42 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d1dc      	bne.n	8002a0a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0320 	and.w	r3, r3, #32
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	d003      	beq.n	8002a66 <I2C_IsErrorOccurred+0xfa>
 8002a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d09d      	beq.n	80029a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	f043 0304 	orr.w	r3, r3, #4
 8002a7c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01c      	beq.n	8002b34 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7ff fe56 	bl	80027ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <I2C_IsErrorOccurred+0x1d4>)
 8002b0c:	400b      	ands	r3, r1
 8002b0e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	fe00e800 	.word	0xfe00e800

08002b44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	817b      	strh	r3, [r7, #10]
 8002b52:	4613      	mov	r3, r2
 8002b54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	0d5b      	lsrs	r3, r3, #21
 8002b7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b82:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <I2C_TransferConfig+0x60>)
 8002b84:	430b      	orrs	r3, r1
 8002b86:	43db      	mvns	r3, r3
 8002b88:	ea02 0103 	and.w	r1, r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	03ff63ff 	.word	0x03ff63ff

08002ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	d138      	bne.n	8002c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e032      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2224      	movs	r2, #36	; 0x24
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d139      	bne.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e033      	b.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2224      	movs	r2, #36	; 0x24
 8002c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000

08002cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d02:	d130      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d038      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2232      	movs	r2, #50	; 0x32
 8002d28:	fb02 f303 	mul.w	r3, r2, r3
 8002d2c:	4a1b      	ldr	r2, [pc, #108]	; (8002d9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d38:	e002      	b.n	8002d40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4c:	d102      	bne.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1f2      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d110      	bne.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e00f      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d007      	beq.n	8002d84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d7c:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	431bde83 	.word	0x431bde83

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e3ca      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b97      	ldr	r3, [pc, #604]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b94      	ldr	r3, [pc, #592]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80e4 	beq.w	8002f9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d007      	beq.n	8002dea <HAL_RCC_OscConfig+0x4a>
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f040 808b 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	f040 8087 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dea:	4b89      	ldr	r3, [pc, #548]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e3a2      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	4b82      	ldr	r3, [pc, #520]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_RCC_OscConfig+0x7c>
 8002e12:	4b7f      	ldr	r3, [pc, #508]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e1a:	e005      	b.n	8002e28 <HAL_RCC_OscConfig+0x88>
 8002e1c:	4b7c      	ldr	r3, [pc, #496]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d223      	bcs.n	8002e74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 fd55 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e383      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e40:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a72      	ldr	r2, [pc, #456]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e46:	f043 0308 	orr.w	r3, r3, #8
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b70      	ldr	r3, [pc, #448]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	496d      	ldr	r1, [pc, #436]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	4968      	ldr	r1, [pc, #416]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
 8002e72:	e025      	b.n	8002ec0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e74:	4b66      	ldr	r3, [pc, #408]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a65      	ldr	r2, [pc, #404]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	f043 0308 	orr.w	r3, r3, #8
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b63      	ldr	r3, [pc, #396]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4960      	ldr	r1, [pc, #384]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	021b      	lsls	r3, r3, #8
 8002ea0:	495b      	ldr	r1, [pc, #364]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd15 	bl	80038e0 <RCC_SetFlashLatencyFromMSIRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e343      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec0:	f000 fc4a 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	4b52      	ldr	r3, [pc, #328]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	4950      	ldr	r1, [pc, #320]	; (8003014 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	5ccb      	ldrb	r3, [r1, r3]
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8002edc:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_RCC_OscConfig+0x278>)
 8002ede:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ee0:	4b4e      	ldr	r3, [pc, #312]	; (800301c <HAL_RCC_OscConfig+0x27c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe ff3b 	bl	8001d60 <HAL_InitTick>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d052      	beq.n	8002f9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	e327      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d032      	beq.n	8002f66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a42      	ldr	r2, [pc, #264]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe ff78 	bl	8001e00 <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f14:	f7fe ff74 	bl	8001e00 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e310      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f26:	4b3a      	ldr	r3, [pc, #232]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f32:	4b37      	ldr	r3, [pc, #220]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a36      	ldr	r2, [pc, #216]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f38:	f043 0308 	orr.w	r3, r3, #8
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b34      	ldr	r3, [pc, #208]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4931      	ldr	r1, [pc, #196]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f50:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	492c      	ldr	r1, [pc, #176]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	e01a      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f023 0301 	bic.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f72:	f7fe ff45 	bl	8001e00 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f7a:	f7fe ff41 	bl	8001e00 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e2dd      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x1da>
 8002f98:	e000      	b.n	8002f9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d074      	beq.n	8003092 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d005      	beq.n	8002fba <HAL_RCC_OscConfig+0x21a>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d10e      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d064      	beq.n	8003090 <HAL_RCC_OscConfig+0x2f0>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d160      	bne.n	8003090 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e2ba      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d106      	bne.n	8002fea <HAL_RCC_OscConfig+0x24a>
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e026      	b.n	8003038 <HAL_RCC_OscConfig+0x298>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ff2:	d115      	bne.n	8003020 <HAL_RCC_OscConfig+0x280>
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a02      	ldr	r2, [pc, #8]	; (8003010 <HAL_RCC_OscConfig+0x270>)
 8003006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e014      	b.n	8003038 <HAL_RCC_OscConfig+0x298>
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000
 8003014:	0800cb68 	.word	0x0800cb68
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004
 8003020:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a9f      	ldr	r2, [pc, #636]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b9d      	ldr	r3, [pc, #628]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a9c      	ldr	r2, [pc, #624]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003040:	f7fe fede 	bl	8001e00 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003048:	f7fe feda 	bl	8001e00 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e276      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305a:	4b92      	ldr	r3, [pc, #584]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0x2a8>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe feca 	bl	8001e00 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003070:	f7fe fec6 	bl	8001e00 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e262      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x2d0>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d060      	beq.n	8003160 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_OscConfig+0x310>
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d119      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d116      	bne.n	80030de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x328>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e23f      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c8:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4973      	ldr	r1, [pc, #460]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030dc:	e040      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d023      	beq.n	800312e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030e6:	4b6f      	ldr	r3, [pc, #444]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6e      	ldr	r2, [pc, #440]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fe fe85 	bl	8001e00 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030fa:	f7fe fe81 	bl	8001e00 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e21d      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800310c:	4b65      	ldr	r3, [pc, #404]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003118:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	495f      	ldr	r1, [pc, #380]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b5d      	ldr	r3, [pc, #372]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a5c      	ldr	r2, [pc, #368]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fe61 	bl	8001e00 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003142:	f7fe fe5d 	bl	8001e00 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e1f9      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003154:	4b53      	ldr	r3, [pc, #332]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03c      	beq.n	80031e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003174:	4b4b      	ldr	r3, [pc, #300]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800317a:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fe3c 	bl	8001e00 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fe38 	bl	8001e00 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1d4      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800319e:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <HAL_RCC_OscConfig+0x3ec>
 80031ac:	e01b      	b.n	80031e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ae:	4b3d      	ldr	r3, [pc, #244]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80031b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b4:	4a3b      	ldr	r2, [pc, #236]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f023 0301 	bic.w	r3, r3, #1
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe fe1f 	bl	8001e00 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe fe1b 	bl	8001e00 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1b7      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031d8:	4b32      	ldr	r3, [pc, #200]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1ef      	bne.n	80031c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80a6 	beq.w	8003340 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	6593      	str	r3, [r2, #88]	; 0x58
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800321c:	2301      	movs	r3, #1
 800321e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003220:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <HAL_RCC_OscConfig+0x508>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003228:	2b00      	cmp	r3, #0
 800322a:	d118      	bne.n	800325e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322c:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <HAL_RCC_OscConfig+0x508>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1d      	ldr	r2, [pc, #116]	; (80032a8 <HAL_RCC_OscConfig+0x508>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003238:	f7fe fde2 	bl	8001e00 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003240:	f7fe fdde 	bl	8001e00 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e17a      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_RCC_OscConfig+0x508>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_RCC_OscConfig+0x4d8>
 8003266:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003276:	e029      	b.n	80032cc <HAL_RCC_OscConfig+0x52c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d115      	bne.n	80032ac <HAL_RCC_OscConfig+0x50c>
 8003280:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	4a03      	ldr	r2, [pc, #12]	; (80032a4 <HAL_RCC_OscConfig+0x504>)
 8003298:	f043 0301 	orr.w	r3, r3, #1
 800329c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x52c>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
 80032ac:	4b9c      	ldr	r3, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b2:	4a9b      	ldr	r2, [pc, #620]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032bc:	4b98      	ldr	r3, [pc, #608]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	4a97      	ldr	r2, [pc, #604]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80032c4:	f023 0304 	bic.w	r3, r3, #4
 80032c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7fe fd94 	bl	8001e00 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032dc:	f7fe fd90 	bl	8001e00 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e12a      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f2:	4b8b      	ldr	r3, [pc, #556]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80032f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ed      	beq.n	80032dc <HAL_RCC_OscConfig+0x53c>
 8003300:	e015      	b.n	800332e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe fd7d 	bl	8001e00 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fd79 	bl	8001e00 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e113      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003320:	4b7f      	ldr	r3, [pc, #508]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1ed      	bne.n	800330a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b7a      	ldr	r3, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	4a79      	ldr	r2, [pc, #484]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 800333a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 80fe 	beq.w	8003546 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	2b02      	cmp	r3, #2
 8003350:	f040 80d0 	bne.w	80034f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003354:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	429a      	cmp	r2, r3
 8003366:	d130      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	3b01      	subs	r3, #1
 8003374:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	429a      	cmp	r2, r3
 8003378:	d127      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003386:	429a      	cmp	r2, r3
 8003388:	d11f      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003394:	2a07      	cmp	r2, #7
 8003396:	bf14      	ite	ne
 8003398:	2201      	movne	r2, #1
 800339a:	2200      	moveq	r2, #0
 800339c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800339e:	4293      	cmp	r3, r2
 80033a0:	d113      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	3b01      	subs	r3, #1
 80033b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d109      	bne.n	80033ca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	085b      	lsrs	r3, r3, #1
 80033c2:	3b01      	subs	r3, #1
 80033c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d06e      	beq.n	80034a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	2b0c      	cmp	r3, #12
 80033ce:	d069      	beq.n	80034a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0ad      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80033f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f8:	f7fe fd02 	bl	8001e00 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe fcfe 	bl	8001e00 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e09a      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800341e:	4b40      	ldr	r3, [pc, #256]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <HAL_RCC_OscConfig+0x784>)
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800342e:	3a01      	subs	r2, #1
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003438:	0212      	lsls	r2, r2, #8
 800343a:	4311      	orrs	r1, r2
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003440:	0852      	lsrs	r2, r2, #1
 8003442:	3a01      	subs	r2, #1
 8003444:	0552      	lsls	r2, r2, #21
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800344c:	0852      	lsrs	r2, r2, #1
 800344e:	3a01      	subs	r2, #1
 8003450:	0652      	lsls	r2, r2, #25
 8003452:	4311      	orrs	r1, r2
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003458:	0912      	lsrs	r2, r2, #4
 800345a:	0452      	lsls	r2, r2, #17
 800345c:	430a      	orrs	r2, r1
 800345e:	4930      	ldr	r1, [pc, #192]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003460:	4313      	orrs	r3, r2
 8003462:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003464:	4b2e      	ldr	r3, [pc, #184]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a2d      	ldr	r2, [pc, #180]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 800346a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800346e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800347c:	f7fe fcc0 	bl	8001e00 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fcbc 	bl	8001e00 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e058      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a2:	e050      	b.n	8003546 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e04f      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	4b1d      	ldr	r3, [pc, #116]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d148      	bne.n	8003546 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034cc:	f7fe fc98 	bl	8001e00 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe fc94 	bl	8001e00 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e030      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	4b0e      	ldr	r3, [pc, #56]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x734>
 80034f2:	e028      	b.n	8003546 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d023      	beq.n	8003542 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a08      	ldr	r2, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x780>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fc7b 	bl	8001e00 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350c:	e00c      	b.n	8003528 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fc77 	bl	8001e00 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d905      	bls.n	8003528 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e013      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
 8003520:	40021000 	.word	0x40021000
 8003524:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x7b0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ec      	bne.n	800350e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_RCC_OscConfig+0x7b0>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4905      	ldr	r1, [pc, #20]	; (8003550 <HAL_RCC_OscConfig+0x7b0>)
 800353a:	4b06      	ldr	r3, [pc, #24]	; (8003554 <HAL_RCC_OscConfig+0x7b4>)
 800353c:	4013      	ands	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
 8003540:	e001      	b.n	8003546 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e000      	b.n	8003548 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3720      	adds	r7, #32
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	feeefffc 	.word	0xfeeefffc

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0e7      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b75      	ldr	r3, [pc, #468]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b72      	ldr	r3, [pc, #456]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	4970      	ldr	r1, [pc, #448]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b6e      	ldr	r3, [pc, #440]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cf      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	4b66      	ldr	r3, [pc, #408]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d908      	bls.n	80035ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4960      	ldr	r1, [pc, #384]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d04c      	beq.n	8003670 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035de:	4b5a      	ldr	r3, [pc, #360]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d121      	bne.n	800362e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e0a6      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f6:	4b54      	ldr	r3, [pc, #336]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d115      	bne.n	800362e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e09a      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800360e:	4b4e      	ldr	r3, [pc, #312]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e08e      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800361e:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e086      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4943      	ldr	r1, [pc, #268]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fe fbde 	bl	8001e00 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fe fbda 	bl	8001e00 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e06e      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	4b31      	ldr	r3, [pc, #196]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003688:	429a      	cmp	r2, r3
 800368a:	d208      	bcs.n	800369e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	492b      	ldr	r1, [pc, #172]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800369e:	4b29      	ldr	r3, [pc, #164]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d210      	bcs.n	80036ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 0207 	bic.w	r2, r3, #7
 80036b4:	4923      	ldr	r1, [pc, #140]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_ClockConfig+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e036      	b.n	800373c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036da:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4918      	ldr	r1, [pc, #96]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	4910      	ldr	r1, [pc, #64]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800370c:	f000 f824 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCC_ClockConfig+0x1f0>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1f4>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1f8>)
 800372a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1fc>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7fe fb15 	bl	8001d60 <HAL_InitTick>
 8003736:	4603      	mov	r3, r0
 8003738:	72fb      	strb	r3, [r7, #11]

  return status;
 800373a:	7afb      	ldrb	r3, [r7, #11]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	0800cb68 	.word	0x0800cb68
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b089      	sub	sp, #36	; 0x24
 800375c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003766:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d005      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d121      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d11e      	bne.n	80037ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800378c:	4b34      	ldr	r3, [pc, #208]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	0a1b      	lsrs	r3, r3, #8
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	e005      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037b4:	4a2b      	ldr	r2, [pc, #172]	; (8003864 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037c8:	e00a      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <HAL_RCC_GetSysClockFreq+0x110>)
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e004      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCC_GetSysClockFreq+0x114>)
 80037de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d134      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_GetSysClockFreq+0xa6>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d003      	beq.n	8003804 <HAL_RCC_GetSysClockFreq+0xac>
 80037fc:	e005      	b.n	800380a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037fe:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_RCC_GetSysClockFreq+0x110>)
 8003800:	617b      	str	r3, [r7, #20]
      break;
 8003802:	e005      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003804:	4b19      	ldr	r3, [pc, #100]	; (800386c <HAL_RCC_GetSysClockFreq+0x114>)
 8003806:	617b      	str	r3, [r7, #20]
      break;
 8003808:	e002      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	617b      	str	r3, [r7, #20]
      break;
 800380e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003810:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	3301      	adds	r3, #1
 800381c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	0a1b      	lsrs	r3, r3, #8
 8003824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	fb03 f202 	mul.w	r2, r3, r2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_RCC_GetSysClockFreq+0x108>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	0e5b      	lsrs	r3, r3, #25
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	3301      	adds	r3, #1
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003850:	69bb      	ldr	r3, [r7, #24]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3724      	adds	r7, #36	; 0x24
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	0800cb80 	.word	0x0800cb80
 8003868:	00f42400 	.word	0x00f42400
 800386c:	007a1200 	.word	0x007a1200

08003870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	0800cb78 	.word	0x0800cb78

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b8:	f7ff ffda 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0adb      	lsrs	r3, r3, #11
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	0800cb78 	.word	0x0800cb78

080038e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038e8:	2300      	movs	r3, #0
 80038ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038ec:	4b2a      	ldr	r3, [pc, #168]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff f9ee 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 80038fc:	6178      	str	r0, [r7, #20]
 80038fe:	e014      	b.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b25      	ldr	r3, [pc, #148]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f9de 	bl	8002cd8 <HAL_PWREx_GetVoltageRange>
 800391c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003930:	d10b      	bne.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b80      	cmp	r3, #128	; 0x80
 8003936:	d919      	bls.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2ba0      	cmp	r3, #160	; 0xa0
 800393c:	d902      	bls.n	8003944 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800393e:	2302      	movs	r3, #2
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	e013      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003944:	2301      	movs	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	e010      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d902      	bls.n	8003956 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003950:	2303      	movs	r3, #3
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	e00a      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b80      	cmp	r3, #128	; 0x80
 800395a:	d102      	bne.n	8003962 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395c:	2302      	movs	r3, #2
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	e004      	b.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b70      	cmp	r3, #112	; 0x70
 8003966:	d101      	bne.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003968:	2301      	movs	r3, #1
 800396a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	4909      	ldr	r1, [pc, #36]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800397c:	4b07      	ldr	r3, [pc, #28]	; (800399c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039a8:	2300      	movs	r3, #0
 80039aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039ac:	2300      	movs	r3, #0
 80039ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d041      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039c4:	d02a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ca:	d824      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d0:	d008      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039d6:	d81e      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e0:	d010      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039e2:	e018      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039e4:	4b86      	ldr	r3, [pc, #536]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4a85      	ldr	r2, [pc, #532]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f0:	e015      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2100      	movs	r1, #0
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fabb 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3320      	adds	r3, #32
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fba6 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	74fb      	strb	r3, [r7, #19]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a24:	4b76      	ldr	r3, [pc, #472]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a32:	4973      	ldr	r1, [pc, #460]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d041      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a54:	d02a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a5a:	d824      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a60:	d008      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a66:	d81e      	bhi.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a70:	d010      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a72:	e018      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a61      	ldr	r2, [pc, #388]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a80:	e015      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	3304      	adds	r3, #4
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fa73 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a92:	e00c      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3320      	adds	r3, #32
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb5e 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	74fb      	strb	r3, [r7, #19]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003aac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aae:	7cfb      	ldrb	r3, [r7, #19]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ab4:	4b52      	ldr	r3, [pc, #328]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac2:	494f      	ldr	r1, [pc, #316]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aca:	e001      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a0 	beq.w	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ae2:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003af2:	2300      	movs	r3, #0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af8:	4b41      	ldr	r3, [pc, #260]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	4a40      	ldr	r2, [pc, #256]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b14:	4b3b      	ldr	r3, [pc, #236]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b20:	f7fe f96e 	bl	8001e00 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b28:	f7fe f96a 	bl	8001e00 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d902      	bls.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	74fb      	strb	r3, [r7, #19]
        break;
 8003b3a:	e005      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b3c:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d15c      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b4e:	4b2c      	ldr	r3, [pc, #176]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b58:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01f      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b78:	4b21      	ldr	r3, [pc, #132]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7e:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe f929 	bl	8001e00 <HAL_GetTick>
 8003bae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f925 	bl	8001e00 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d902      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc8:	e006      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ec      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bee:	4904      	ldr	r1, [pc, #16]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
 8003bfc:	e006      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c0c:	7c7b      	ldrb	r3, [r7, #17]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b9e      	ldr	r3, [pc, #632]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c16:	4a9d      	ldr	r2, [pc, #628]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2a:	4b98      	ldr	r3, [pc, #608]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0203 	bic.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	4994      	ldr	r1, [pc, #592]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c4c:	4b8f      	ldr	r3, [pc, #572]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 020c 	bic.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	498c      	ldr	r1, [pc, #560]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c6e:	4b87      	ldr	r3, [pc, #540]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	4983      	ldr	r1, [pc, #524]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	497b      	ldr	r1, [pc, #492]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cc0:	4972      	ldr	r1, [pc, #456]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cd4:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	496a      	ldr	r1, [pc, #424]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf6:	4b65      	ldr	r3, [pc, #404]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	4961      	ldr	r1, [pc, #388]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d18:	4b5c      	ldr	r3, [pc, #368]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d26:	4959      	ldr	r1, [pc, #356]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d48:	4950      	ldr	r1, [pc, #320]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d5c:	4b4b      	ldr	r3, [pc, #300]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	4948      	ldr	r1, [pc, #288]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	493f      	ldr	r1, [pc, #252]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d028      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003da0:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dae:	4937      	ldr	r1, [pc, #220]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
 8003dcc:	e011      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd6:	d10c      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 f8c8 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dee:	7cfb      	ldrb	r3, [r7, #19]
 8003df0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d028      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dfe:	4b23      	ldr	r3, [pc, #140]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e04:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	491f      	ldr	r1, [pc, #124]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e28:	60d3      	str	r3, [r2, #12]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f899 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d02b      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6a:	4908      	ldr	r1, [pc, #32]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7a:	d109      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e86:	60d3      	str	r3, [r2, #12]
 8003e88:	e014      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e8a:	bf00      	nop
 8003e8c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f867 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ece:	4928      	ldr	r1, [pc, #160]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ede:	d10d      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	2102      	movs	r1, #2
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f844 	bl	8003f74 <RCCEx_PLLSAI1_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef0:	7cfb      	ldrb	r3, [r7, #19]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	74bb      	strb	r3, [r7, #18]
 8003efa:	e011      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3320      	adds	r3, #32
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f925 	bl	800415c <RCCEx_PLLSAI2_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f3a:	490d      	ldr	r1, [pc, #52]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4904      	ldr	r1, [pc, #16]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f66:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40021000 	.word	0x40021000

08003f74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f82:	4b75      	ldr	r3, [pc, #468]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d018      	beq.n	8003fc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f8e:	4b72      	ldr	r3, [pc, #456]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f003 0203 	and.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10d      	bne.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fa6:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d047      	beq.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e044      	b.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d018      	beq.n	8003ffa <RCCEx_PLLSAI1_Config+0x86>
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d825      	bhi.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d002      	beq.n	8003fd6 <RCCEx_PLLSAI1_Config+0x62>
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d009      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0x74>
 8003fd4:	e020      	b.n	8004018 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fd6:	4b60      	ldr	r3, [pc, #384]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d11d      	bne.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe6:	e01a      	b.n	800401e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fe8:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d116      	bne.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e013      	b.n	8004022 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004006:	4b54      	ldr	r3, [pc, #336]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004016:	e006      	b.n	8004026 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	73fb      	strb	r3, [r7, #15]
      break;
 800401c:	e004      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800401e:	bf00      	nop
 8004020:	e002      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004022:	bf00      	nop
 8004024:	e000      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004026:	bf00      	nop
    }

    if(status == HAL_OK)
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10d      	bne.n	800404a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	430b      	orrs	r3, r1
 8004044:	4944      	ldr	r1, [pc, #272]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d17d      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004050:	4b41      	ldr	r3, [pc, #260]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a40      	ldr	r2, [pc, #256]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800405a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405c:	f7fd fed0 	bl	8001e00 <HAL_GetTick>
 8004060:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004062:	e009      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004064:	f7fd fecc 	bl	8001e00 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d902      	bls.n	8004078 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	73fb      	strb	r3, [r7, #15]
        break;
 8004076:	e005      	b.n	8004084 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004078:	4b37      	ldr	r3, [pc, #220]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ef      	bne.n	8004064 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d160      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d111      	bne.n	80040b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6892      	ldr	r2, [r2, #8]
 80040a0:	0211      	lsls	r1, r2, #8
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	68d2      	ldr	r2, [r2, #12]
 80040a6:	0912      	lsrs	r2, r2, #4
 80040a8:	0452      	lsls	r2, r2, #17
 80040aa:	430a      	orrs	r2, r1
 80040ac:	492a      	ldr	r1, [pc, #168]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	610b      	str	r3, [r1, #16]
 80040b2:	e027      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d112      	bne.n	80040e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	0211      	lsls	r1, r2, #8
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6912      	ldr	r2, [r2, #16]
 80040d0:	0852      	lsrs	r2, r2, #1
 80040d2:	3a01      	subs	r2, #1
 80040d4:	0552      	lsls	r2, r2, #21
 80040d6:	430a      	orrs	r2, r1
 80040d8:	491f      	ldr	r1, [pc, #124]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	610b      	str	r3, [r1, #16]
 80040de:	e011      	b.n	8004104 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040e0:	4b1d      	ldr	r3, [pc, #116]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040e8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6892      	ldr	r2, [r2, #8]
 80040f0:	0211      	lsls	r1, r2, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6952      	ldr	r2, [r2, #20]
 80040f6:	0852      	lsrs	r2, r2, #1
 80040f8:	3a01      	subs	r2, #1
 80040fa:	0652      	lsls	r2, r2, #25
 80040fc:	430a      	orrs	r2, r1
 80040fe:	4916      	ldr	r1, [pc, #88]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd fe76 	bl	8001e00 <HAL_GetTick>
 8004114:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004116:	e009      	b.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004118:	f7fd fe72 	bl	8001e00 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d902      	bls.n	800412c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	73fb      	strb	r3, [r7, #15]
          break;
 800412a:	e005      	b.n	8004138 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ef      	beq.n	8004118 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	4904      	ldr	r1, [pc, #16]	; (8004158 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004148:	4313      	orrs	r3, r2
 800414a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000

0800415c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800416a:	4b6a      	ldr	r3, [pc, #424]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d018      	beq.n	80041a8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004176:	4b67      	ldr	r3, [pc, #412]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	f003 0203 	and.w	r2, r3, #3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	429a      	cmp	r2, r3
 8004184:	d10d      	bne.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
       ||
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800418e:	4b61      	ldr	r3, [pc, #388]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
       ||
 800419e:	429a      	cmp	r2, r3
 80041a0:	d047      	beq.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e044      	b.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d018      	beq.n	80041e2 <RCCEx_PLLSAI2_Config+0x86>
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d825      	bhi.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d002      	beq.n	80041be <RCCEx_PLLSAI2_Config+0x62>
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d009      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x74>
 80041bc:	e020      	b.n	8004200 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041be:	4b55      	ldr	r3, [pc, #340]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d11d      	bne.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ce:	e01a      	b.n	8004206 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041d0:	4b50      	ldr	r3, [pc, #320]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d116      	bne.n	800420a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e0:	e013      	b.n	800420a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041e2:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ee:	4b49      	ldr	r3, [pc, #292]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041fe:	e006      	b.n	800420e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	73fb      	strb	r3, [r7, #15]
      break;
 8004204:	e004      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800420e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004210:	7bfb      	ldrb	r3, [r7, #15]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004216:	4b3f      	ldr	r3, [pc, #252]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	430b      	orrs	r3, r1
 800422c:	4939      	ldr	r1, [pc, #228]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d167      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a35      	ldr	r2, [pc, #212]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004242:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004244:	f7fd fddc 	bl	8001e00 <HAL_GetTick>
 8004248:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800424a:	e009      	b.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800424c:	f7fd fdd8 	bl	8001e00 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d902      	bls.n	8004260 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	73fb      	strb	r3, [r7, #15]
        break;
 800425e:	e005      	b.n	800426c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ef      	bne.n	800424c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d14a      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d111      	bne.n	800429c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004278:	4b26      	ldr	r3, [pc, #152]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6892      	ldr	r2, [r2, #8]
 8004288:	0211      	lsls	r1, r2, #8
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	0912      	lsrs	r2, r2, #4
 8004290:	0452      	lsls	r2, r2, #17
 8004292:	430a      	orrs	r2, r1
 8004294:	491f      	ldr	r1, [pc, #124]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004296:	4313      	orrs	r3, r2
 8004298:	614b      	str	r3, [r1, #20]
 800429a:	e011      	b.n	80042c0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800429c:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80042a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6912      	ldr	r2, [r2, #16]
 80042b2:	0852      	lsrs	r2, r2, #1
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0652      	lsls	r2, r2, #25
 80042b8:	430a      	orrs	r2, r1
 80042ba:	4916      	ldr	r1, [pc, #88]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042c0:	4b14      	ldr	r3, [pc, #80]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a13      	ldr	r2, [pc, #76]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd fd98 	bl	8001e00 <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042d2:	e009      	b.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d4:	f7fd fd94 	bl	8001e00 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d902      	bls.n	80042e8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	73fb      	strb	r3, [r7, #15]
          break;
 80042e6:	e005      	b.n	80042f4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0ef      	beq.n	80042d4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000

08004318 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d06c      	beq.n	8004404 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fd fa48 	bl	80017d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	22ca      	movs	r2, #202	; 0xca
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2253      	movs	r2, #83	; 0x53
 800435a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f925 	bl	80045ac <RTC_EnterInitMode>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d14b      	bne.n	8004404 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6812      	ldr	r2, [r2, #0]
 8004376:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800437a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6919      	ldr	r1, [r3, #16]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	041a      	lsls	r2, r3, #16
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f929 	bl	8004614 <RTC_ExitInitMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11b      	bne.n	8004404 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0203 	bic.w	r2, r2, #3
 80043da:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	22ff      	movs	r2, #255	; 0xff
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b086      	sub	sp, #24
 8004412:	af00      	add	r7, sp, #0
 8004414:	60f8      	str	r0, [r7, #12]
 8004416:	60b9      	str	r1, [r7, #8]
 8004418:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800443c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004440:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	0d9b      	lsrs	r3, r3, #22
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	b2da      	uxtb	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d11a      	bne.n	80044bc <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f900 	bl	8004690 <RTC_Bcd2ToByte>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f8f7 	bl	8004690 <RTC_Bcd2ToByte>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8ee 	bl	8004690 <RTC_Bcd2ToByte>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b086      	sub	sp, #24
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044e0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004504:	b2da      	uxtb	r2, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	0b5b      	lsrs	r3, r3, #13
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d11a      	bne.n	8004556 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	78db      	ldrb	r3, [r3, #3]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f8b3 	bl	8004690 <RTC_Bcd2ToByte>
 800452a:	4603      	mov	r3, r0
 800452c:	461a      	mov	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f8aa 	bl	8004690 <RTC_Bcd2ToByte>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	789b      	ldrb	r3, [r3, #2]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f8a1 	bl	8004690 <RTC_Bcd2ToByte>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004576:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004578:	f7fd fc42 	bl	8001e00 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800457e:	e009      	b.n	8004594 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004580:	f7fd fc3e 	bl	8001e00 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458e:	d901      	bls.n	8004594 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e007      	b.n	80045a4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ee      	beq.n	8004580 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d120      	bne.n	8004608 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045d0:	f7fd fc16 	bl	8001e00 <HAL_GetTick>
 80045d4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045d6:	e00d      	b.n	80045f4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045d8:	f7fd fc12 	bl	8001e00 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e6:	d905      	bls.n	80045f4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2203      	movs	r2, #3
 80045f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <RTC_EnterInitMode+0x5c>
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d1e7      	bne.n	80045d8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004620:	4b1a      	ldr	r3, [pc, #104]	; (800468c <RTC_ExitInitMode+0x78>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a19      	ldr	r2, [pc, #100]	; (800468c <RTC_ExitInitMode+0x78>)
 8004626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800462a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800462c:	4b17      	ldr	r3, [pc, #92]	; (800468c <RTC_ExitInitMode+0x78>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10c      	bne.n	8004652 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff91 	bl	8004560 <HAL_RTC_WaitForSynchro>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01e      	beq.n	8004682 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	73fb      	strb	r3, [r7, #15]
 8004650:	e017      	b.n	8004682 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <RTC_ExitInitMode+0x78>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	4a0d      	ldr	r2, [pc, #52]	; (800468c <RTC_ExitInitMode+0x78>)
 8004658:	f023 0320 	bic.w	r3, r3, #32
 800465c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff7e 	bl	8004560 <HAL_RTC_WaitForSynchro>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2203      	movs	r2, #3
 800466e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <RTC_ExitInitMode+0x78>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	4a04      	ldr	r2, [pc, #16]	; (800468c <RTC_ExitInitMode+0x78>)
 800467c:	f043 0320 	orr.w	r3, r3, #32
 8004680:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40002800 	.word	0x40002800

08004690 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	4413      	add	r3, r2
 80046b6:	b2db      	uxtb	r3, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e095      	b.n	8004802 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d108      	bne.n	80046f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046e6:	d009      	beq.n	80046fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	61da      	str	r2, [r3, #28]
 80046ee:	e005      	b.n	80046fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd f8cc 	bl	80018b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004732:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800473c:	d902      	bls.n	8004744 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e002      	b.n	800474a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004748:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004752:	d007      	beq.n	8004764 <HAL_SPI_Init+0xa0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800475c:	d002      	beq.n	8004764 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	ea42 0103 	orr.w	r1, r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	0c1b      	lsrs	r3, r3, #16
 80047c0:	f003 0204 	and.w	r2, r3, #4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	f003 0310 	and.w	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047e0:	ea42 0103 	orr.w	r1, r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b088      	sub	sp, #32
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_SPI_Transmit+0x22>
 8004828:	2302      	movs	r3, #2
 800482a:	e158      	b.n	8004ade <HAL_SPI_Transmit+0x2d4>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004834:	f7fd fae4 	bl	8001e00 <HAL_GetTick>
 8004838:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b01      	cmp	r3, #1
 8004848:	d002      	beq.n	8004850 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800484e:	e13d      	b.n	8004acc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0x52>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d102      	bne.n	8004862 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004860:	e134      	b.n	8004acc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2203      	movs	r2, #3
 8004866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	88fa      	ldrh	r2, [r7, #6]
 800487a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	88fa      	ldrh	r2, [r7, #6]
 8004880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	d10f      	bne.n	80048ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d007      	beq.n	80048ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f4:	d94b      	bls.n	800498e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0xfa>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d13e      	bne.n	8004982 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	1c9a      	adds	r2, r3, #2
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004928:	e02b      	b.n	8004982 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b02      	cmp	r3, #2
 8004936:	d112      	bne.n	800495e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	1c9a      	adds	r2, r3, #2
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495c:	e011      	b.n	8004982 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495e:	f7fd fa4f 	bl	8001e00 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d803      	bhi.n	8004976 <HAL_SPI_Transmit+0x16c>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d102      	bne.n	800497c <HAL_SPI_Transmit+0x172>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004980:	e0a4      	b.n	8004acc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1ce      	bne.n	800492a <HAL_SPI_Transmit+0x120>
 800498c:	e07c      	b.n	8004a88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_SPI_Transmit+0x192>
 8004996:	8afb      	ldrh	r3, [r7, #22]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d170      	bne.n	8004a7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d912      	bls.n	80049cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	881a      	ldrh	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	1c9a      	adds	r2, r3, #2
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b02      	subs	r3, #2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049ca:	e058      	b.n	8004a7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	7812      	ldrb	r2, [r2, #0]
 80049d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049f2:	e044      	b.n	8004a7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d12b      	bne.n	8004a5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d912      	bls.n	8004a32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a10:	881a      	ldrh	r2, [r3, #0]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1c:	1c9a      	adds	r2, r3, #2
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	3b02      	subs	r3, #2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a30:	e025      	b.n	8004a7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	330c      	adds	r3, #12
 8004a3c:	7812      	ldrb	r2, [r2, #0]
 8004a3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a58:	e011      	b.n	8004a7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5a:	f7fd f9d1 	bl	8001e00 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d803      	bhi.n	8004a72 <HAL_SPI_Transmit+0x268>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Transmit+0x26e>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7c:	e026      	b.n	8004acc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1b5      	bne.n	80049f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	6839      	ldr	r1, [r7, #0]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f949 	bl	8004d24 <SPI_EndRxTxTransaction>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10a      	bne.n	8004abc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	613b      	str	r3, [r7, #16]
 8004aba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	77fb      	strb	r3, [r7, #31]
 8004ac8:	e000      	b.n	8004acc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3720      	adds	r7, #32
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004af8:	f7fd f982 	bl	8001e00 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b08:	f7fd f97a 	bl	8001e00 <HAL_GetTick>
 8004b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b0e:	4b39      	ldr	r3, [pc, #228]	; (8004bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	015b      	lsls	r3, r3, #5
 8004b14:	0d1b      	lsrs	r3, r3, #20
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b1e:	e054      	b.n	8004bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d050      	beq.n	8004bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b28:	f7fd f96a 	bl	8001e00 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d902      	bls.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d13d      	bne.n	8004bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b56:	d111      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b60:	d004      	beq.n	8004b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d107      	bne.n	8004b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b84:	d10f      	bne.n	8004ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e017      	b.n	8004bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d101      	bne.n	8004bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	bf0c      	ite	eq
 8004bda:	2301      	moveq	r3, #1
 8004bdc:	2300      	movne	r3, #0
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	461a      	mov	r2, r3
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d19b      	bne.n	8004b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000000 	.word	0x20000000

08004bf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c0a:	f7fd f8f9 	bl	8001e00 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	1a9b      	subs	r3, r3, r2
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004c1a:	f7fd f8f1 	bl	8001e00 <HAL_GetTick>
 8004c1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	330c      	adds	r3, #12
 8004c26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c28:	4b3d      	ldr	r3, [pc, #244]	; (8004d20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00da      	lsls	r2, r3, #3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	0d1b      	lsrs	r3, r3, #20
 8004c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3a:	fb02 f303 	mul.w	r3, r2, r3
 8004c3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c40:	e060      	b.n	8004d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c48:	d107      	bne.n	8004c5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d050      	beq.n	8004d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c62:	f7fd f8cd 	bl	8001e00 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d902      	bls.n	8004c78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d13d      	bne.n	8004cf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c90:	d111      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c9a:	d004      	beq.n	8004ca6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca4:	d107      	bne.n	8004cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cbe:	d10f      	bne.n	8004ce0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e010      	b.n	8004d16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d196      	bne.n	8004c42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3728      	adds	r7, #40	; 0x28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000000 	.word	0x20000000

08004d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7ff ff5b 	bl	8004bf8 <SPI_WaitFifoStateUntilTimeout>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4c:	f043 0220 	orr.w	r2, r3, #32
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e027      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2180      	movs	r1, #128	; 0x80
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fec0 	bl	8004ae8 <SPI_WaitFlagStateUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e014      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f7ff ff34 	bl	8004bf8 <SPI_WaitFifoStateUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e000      	b.n	8004da8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e040      	b.n	8004e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fc ff26 	bl	8001c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2224      	movs	r2, #36	; 0x24
 8004ddc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 0201 	bic.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f8c0 	bl	8004f74 <UART_SetConfig>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb6c 	bl	80054e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685a      	ldr	r2, [r3, #4]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fbf3 	bl	8005628 <UART_CheckIdleState>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	f040 8082 	bne.w	8004f6a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <HAL_UART_Transmit+0x26>
 8004e6c:	88fb      	ldrh	r3, [r7, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07a      	b.n	8004f6c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_UART_Transmit+0x38>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e073      	b.n	8004f6c <HAL_UART_Transmit+0x120>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2221      	movs	r2, #33	; 0x21
 8004e98:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e9a:	f7fc ffb1 	bl	8001e00 <HAL_GetTick>
 8004e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	88fa      	ldrh	r2, [r7, #6]
 8004ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	88fa      	ldrh	r2, [r7, #6]
 8004eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb8:	d108      	bne.n	8004ecc <HAL_UART_Transmit+0x80>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	e003      	b.n	8004ed4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004edc:	e02d      	b.n	8004f3a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2180      	movs	r1, #128	; 0x80
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 fbe6 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d001      	beq.n	8004ef8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e039      	b.n	8004f6c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	881a      	ldrh	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	3302      	adds	r3, #2
 8004f12:	61bb      	str	r3, [r7, #24]
 8004f14:	e008      	b.n	8004f28 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	781a      	ldrb	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	b292      	uxth	r2, r2
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1cb      	bne.n	8004ede <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	2140      	movs	r1, #64	; 0x40
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fbb2 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e005      	b.n	8004f6c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2220      	movs	r2, #32
 8004f64:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e000      	b.n	8004f6c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
  }
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3720      	adds	r7, #32
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f78:	b08a      	sub	sp, #40	; 0x28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4ba4      	ldr	r3, [pc, #656]	; (8005234 <UART_SetConfig+0x2c0>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fac:	430b      	orrs	r3, r1
 8004fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a99      	ldr	r2, [pc, #612]	; (8005238 <UART_SetConfig+0x2c4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d004      	beq.n	8004fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a90      	ldr	r2, [pc, #576]	; (800523c <UART_SetConfig+0x2c8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d126      	bne.n	800504c <UART_SetConfig+0xd8>
 8004ffe:	4b90      	ldr	r3, [pc, #576]	; (8005240 <UART_SetConfig+0x2cc>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f003 0303 	and.w	r3, r3, #3
 8005008:	2b03      	cmp	r3, #3
 800500a:	d81b      	bhi.n	8005044 <UART_SetConfig+0xd0>
 800500c:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0xa0>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	08005025 	.word	0x08005025
 8005018:	08005035 	.word	0x08005035
 800501c:	0800502d 	.word	0x0800502d
 8005020:	0800503d 	.word	0x0800503d
 8005024:	2301      	movs	r3, #1
 8005026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800502a:	e116      	b.n	800525a <UART_SetConfig+0x2e6>
 800502c:	2302      	movs	r3, #2
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005032:	e112      	b.n	800525a <UART_SetConfig+0x2e6>
 8005034:	2304      	movs	r3, #4
 8005036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800503a:	e10e      	b.n	800525a <UART_SetConfig+0x2e6>
 800503c:	2308      	movs	r3, #8
 800503e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005042:	e10a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005044:	2310      	movs	r3, #16
 8005046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800504a:	e106      	b.n	800525a <UART_SetConfig+0x2e6>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a7c      	ldr	r2, [pc, #496]	; (8005244 <UART_SetConfig+0x2d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d138      	bne.n	80050c8 <UART_SetConfig+0x154>
 8005056:	4b7a      	ldr	r3, [pc, #488]	; (8005240 <UART_SetConfig+0x2cc>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f003 030c 	and.w	r3, r3, #12
 8005060:	2b0c      	cmp	r3, #12
 8005062:	d82d      	bhi.n	80050c0 <UART_SetConfig+0x14c>
 8005064:	a201      	add	r2, pc, #4	; (adr r2, 800506c <UART_SetConfig+0xf8>)
 8005066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506a:	bf00      	nop
 800506c:	080050a1 	.word	0x080050a1
 8005070:	080050c1 	.word	0x080050c1
 8005074:	080050c1 	.word	0x080050c1
 8005078:	080050c1 	.word	0x080050c1
 800507c:	080050b1 	.word	0x080050b1
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c1 	.word	0x080050c1
 8005088:	080050c1 	.word	0x080050c1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050c1 	.word	0x080050c1
 8005094:	080050c1 	.word	0x080050c1
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050b9 	.word	0x080050b9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050a6:	e0d8      	b.n	800525a <UART_SetConfig+0x2e6>
 80050a8:	2302      	movs	r3, #2
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050ae:	e0d4      	b.n	800525a <UART_SetConfig+0x2e6>
 80050b0:	2304      	movs	r3, #4
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050b6:	e0d0      	b.n	800525a <UART_SetConfig+0x2e6>
 80050b8:	2308      	movs	r3, #8
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050be:	e0cc      	b.n	800525a <UART_SetConfig+0x2e6>
 80050c0:	2310      	movs	r3, #16
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050c6:	e0c8      	b.n	800525a <UART_SetConfig+0x2e6>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <UART_SetConfig+0x2d4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d125      	bne.n	800511e <UART_SetConfig+0x1aa>
 80050d2:	4b5b      	ldr	r3, [pc, #364]	; (8005240 <UART_SetConfig+0x2cc>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d016      	beq.n	800510e <UART_SetConfig+0x19a>
 80050e0:	2b30      	cmp	r3, #48	; 0x30
 80050e2:	d818      	bhi.n	8005116 <UART_SetConfig+0x1a2>
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d00a      	beq.n	80050fe <UART_SetConfig+0x18a>
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d814      	bhi.n	8005116 <UART_SetConfig+0x1a2>
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <UART_SetConfig+0x182>
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d008      	beq.n	8005106 <UART_SetConfig+0x192>
 80050f4:	e00f      	b.n	8005116 <UART_SetConfig+0x1a2>
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050fc:	e0ad      	b.n	800525a <UART_SetConfig+0x2e6>
 80050fe:	2302      	movs	r3, #2
 8005100:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005104:	e0a9      	b.n	800525a <UART_SetConfig+0x2e6>
 8005106:	2304      	movs	r3, #4
 8005108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800510c:	e0a5      	b.n	800525a <UART_SetConfig+0x2e6>
 800510e:	2308      	movs	r3, #8
 8005110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005114:	e0a1      	b.n	800525a <UART_SetConfig+0x2e6>
 8005116:	2310      	movs	r3, #16
 8005118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800511c:	e09d      	b.n	800525a <UART_SetConfig+0x2e6>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4a      	ldr	r2, [pc, #296]	; (800524c <UART_SetConfig+0x2d8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d125      	bne.n	8005174 <UART_SetConfig+0x200>
 8005128:	4b45      	ldr	r3, [pc, #276]	; (8005240 <UART_SetConfig+0x2cc>)
 800512a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005132:	2bc0      	cmp	r3, #192	; 0xc0
 8005134:	d016      	beq.n	8005164 <UART_SetConfig+0x1f0>
 8005136:	2bc0      	cmp	r3, #192	; 0xc0
 8005138:	d818      	bhi.n	800516c <UART_SetConfig+0x1f8>
 800513a:	2b80      	cmp	r3, #128	; 0x80
 800513c:	d00a      	beq.n	8005154 <UART_SetConfig+0x1e0>
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d814      	bhi.n	800516c <UART_SetConfig+0x1f8>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <UART_SetConfig+0x1d8>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d008      	beq.n	800515c <UART_SetConfig+0x1e8>
 800514a:	e00f      	b.n	800516c <UART_SetConfig+0x1f8>
 800514c:	2300      	movs	r3, #0
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e082      	b.n	800525a <UART_SetConfig+0x2e6>
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800515a:	e07e      	b.n	800525a <UART_SetConfig+0x2e6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005162:	e07a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800516a:	e076      	b.n	800525a <UART_SetConfig+0x2e6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005172:	e072      	b.n	800525a <UART_SetConfig+0x2e6>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	; (8005250 <UART_SetConfig+0x2dc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d12a      	bne.n	80051d4 <UART_SetConfig+0x260>
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <UART_SetConfig+0x2cc>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800518c:	d01a      	beq.n	80051c4 <UART_SetConfig+0x250>
 800518e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005192:	d81b      	bhi.n	80051cc <UART_SetConfig+0x258>
 8005194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005198:	d00c      	beq.n	80051b4 <UART_SetConfig+0x240>
 800519a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519e:	d815      	bhi.n	80051cc <UART_SetConfig+0x258>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <UART_SetConfig+0x238>
 80051a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a8:	d008      	beq.n	80051bc <UART_SetConfig+0x248>
 80051aa:	e00f      	b.n	80051cc <UART_SetConfig+0x258>
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b2:	e052      	b.n	800525a <UART_SetConfig+0x2e6>
 80051b4:	2302      	movs	r3, #2
 80051b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ba:	e04e      	b.n	800525a <UART_SetConfig+0x2e6>
 80051bc:	2304      	movs	r3, #4
 80051be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c2:	e04a      	b.n	800525a <UART_SetConfig+0x2e6>
 80051c4:	2308      	movs	r3, #8
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ca:	e046      	b.n	800525a <UART_SetConfig+0x2e6>
 80051cc:	2310      	movs	r3, #16
 80051ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051d2:	e042      	b.n	800525a <UART_SetConfig+0x2e6>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <UART_SetConfig+0x2c4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d13a      	bne.n	8005254 <UART_SetConfig+0x2e0>
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <UART_SetConfig+0x2cc>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051ec:	d01a      	beq.n	8005224 <UART_SetConfig+0x2b0>
 80051ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f2:	d81b      	bhi.n	800522c <UART_SetConfig+0x2b8>
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f8:	d00c      	beq.n	8005214 <UART_SetConfig+0x2a0>
 80051fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051fe:	d815      	bhi.n	800522c <UART_SetConfig+0x2b8>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <UART_SetConfig+0x298>
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005208:	d008      	beq.n	800521c <UART_SetConfig+0x2a8>
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x2b8>
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e022      	b.n	800525a <UART_SetConfig+0x2e6>
 8005214:	2302      	movs	r3, #2
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521a:	e01e      	b.n	800525a <UART_SetConfig+0x2e6>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005222:	e01a      	b.n	800525a <UART_SetConfig+0x2e6>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522a:	e016      	b.n	800525a <UART_SetConfig+0x2e6>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005232:	e012      	b.n	800525a <UART_SetConfig+0x2e6>
 8005234:	efff69f3 	.word	0xefff69f3
 8005238:	40008000 	.word	0x40008000
 800523c:	40013800 	.word	0x40013800
 8005240:	40021000 	.word	0x40021000
 8005244:	40004400 	.word	0x40004400
 8005248:	40004800 	.word	0x40004800
 800524c:	40004c00 	.word	0x40004c00
 8005250:	40005000 	.word	0x40005000
 8005254:	2310      	movs	r3, #16
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a9f      	ldr	r2, [pc, #636]	; (80054dc <UART_SetConfig+0x568>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d17a      	bne.n	800535a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005268:	2b08      	cmp	r3, #8
 800526a:	d824      	bhi.n	80052b6 <UART_SetConfig+0x342>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0x300>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005299 	.word	0x08005299
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052a1 	.word	0x080052a1
 8005280:	080052b7 	.word	0x080052b7
 8005284:	080052a7 	.word	0x080052a7
 8005288:	080052b7 	.word	0x080052b7
 800528c:	080052b7 	.word	0x080052b7
 8005290:	080052b7 	.word	0x080052b7
 8005294:	080052af 	.word	0x080052af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005298:	f7fe faf6 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 800529c:	61f8      	str	r0, [r7, #28]
        break;
 800529e:	e010      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052a0:	4b8f      	ldr	r3, [pc, #572]	; (80054e0 <UART_SetConfig+0x56c>)
 80052a2:	61fb      	str	r3, [r7, #28]
        break;
 80052a4:	e00d      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052a6:	f7fe fa57 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80052aa:	61f8      	str	r0, [r7, #28]
        break;
 80052ac:	e009      	b.n	80052c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b2:	61fb      	str	r3, [r7, #28]
        break;
 80052b4:	e005      	b.n	80052c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80052c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 80fb 	beq.w	80054c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	4413      	add	r3, r2
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d305      	bcc.n	80052e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d903      	bls.n	80052ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80052ec:	e0e8      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2200      	movs	r2, #0
 80052f2:	461c      	mov	r4, r3
 80052f4:	4615      	mov	r5, r2
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	022b      	lsls	r3, r5, #8
 8005300:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005304:	0222      	lsls	r2, r4, #8
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	6849      	ldr	r1, [r1, #4]
 800530a:	0849      	lsrs	r1, r1, #1
 800530c:	2000      	movs	r0, #0
 800530e:	4688      	mov	r8, r1
 8005310:	4681      	mov	r9, r0
 8005312:	eb12 0a08 	adds.w	sl, r2, r8
 8005316:	eb43 0b09 	adc.w	fp, r3, r9
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005328:	4650      	mov	r0, sl
 800532a:	4659      	mov	r1, fp
 800532c:	f7fb fc8c 	bl	8000c48 <__aeabi_uldivmod>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4613      	mov	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800533e:	d308      	bcc.n	8005352 <UART_SetConfig+0x3de>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005346:	d204      	bcs.n	8005352 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	60da      	str	r2, [r3, #12]
 8005350:	e0b6      	b.n	80054c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005358:	e0b2      	b.n	80054c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005362:	d15e      	bne.n	8005422 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005368:	2b08      	cmp	r3, #8
 800536a:	d828      	bhi.n	80053be <UART_SetConfig+0x44a>
 800536c:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <UART_SetConfig+0x400>)
 800536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005372:	bf00      	nop
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053af 	.word	0x080053af
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053bf 	.word	0x080053bf
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005398:	f7fe fa76 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 800539c:	61f8      	str	r0, [r7, #28]
        break;
 800539e:	e014      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053a0:	f7fe fa88 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 80053a4:	61f8      	str	r0, [r7, #28]
        break;
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <UART_SetConfig+0x56c>)
 80053aa:	61fb      	str	r3, [r7, #28]
        break;
 80053ac:	e00d      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe f9d3 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 80053b2:	61f8      	str	r0, [r7, #28]
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d077      	beq.n	80054c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	005a      	lsls	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	441a      	add	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d916      	bls.n	800541a <UART_SetConfig+0x4a6>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f2:	d212      	bcs.n	800541a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f023 030f 	bic.w	r3, r3, #15
 80053fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	b29b      	uxth	r3, r3
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	b29a      	uxth	r2, r3
 800540a:	8afb      	ldrh	r3, [r7, #22]
 800540c:	4313      	orrs	r3, r2
 800540e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	8afa      	ldrh	r2, [r7, #22]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e052      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005420:	e04e      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005426:	2b08      	cmp	r3, #8
 8005428:	d827      	bhi.n	800547a <UART_SetConfig+0x506>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x4bc>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	0800547b 	.word	0x0800547b
 8005440:	0800546b 	.word	0x0800546b
 8005444:	0800547b 	.word	0x0800547b
 8005448:	0800547b 	.word	0x0800547b
 800544c:	0800547b 	.word	0x0800547b
 8005450:	08005473 	.word	0x08005473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005454:	f7fe fa18 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e014      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800545c:	f7fe fa2a 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8005460:	61f8      	str	r0, [r7, #28]
        break;
 8005462:	e010      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <UART_SetConfig+0x56c>)
 8005466:	61fb      	str	r3, [r7, #28]
        break;
 8005468:	e00d      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800546a:	f7fe f975 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 800546e:	61f8      	str	r0, [r7, #28]
        break;
 8005470:	e009      	b.n	8005486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	61fb      	str	r3, [r7, #28]
        break;
 8005478:	e005      	b.n	8005486 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005484:	bf00      	nop
    }

    if (pclk != 0U)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085a      	lsrs	r2, r3, #1
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	441a      	add	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d909      	bls.n	80054ba <UART_SetConfig+0x546>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d205      	bcs.n	80054ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	e002      	b.n	80054c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80054cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	; 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054da:	bf00      	nop
 80054dc:	40008000 	.word	0x40008000
 80054e0:	00f42400 	.word	0x00f42400

080054e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00a      	beq.n	8005530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00a      	beq.n	8005552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00a      	beq.n	8005596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00a      	beq.n	80055b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d01a      	beq.n	80055fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e2:	d10a      	bne.n	80055fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	605a      	str	r2, [r3, #4]
  }
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af02      	add	r7, sp, #8
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005638:	f7fc fbe2 	bl	8001e00 <HAL_GetTick>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10e      	bne.n	800566a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800564c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f82d 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e023      	b.n	80056b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d10e      	bne.n	8005696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f817 	bl	80056ba <UART_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e00d      	b.n	80056b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2220      	movs	r2, #32
 800569a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b09c      	sub	sp, #112	; 0x70
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	603b      	str	r3, [r7, #0]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ca:	e0a5      	b.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	f000 80a1 	beq.w	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d6:	f7fc fb93 	bl	8001e00 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d302      	bcc.n	80056ec <UART_WaitOnFlagUntilTimeout+0x32>
 80056e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d13e      	bne.n	800576a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005700:	667b      	str	r3, [r7, #100]	; 0x64
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800570c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005712:	e841 2300 	strex	r3, r2, [r1]
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1e6      	bne.n	80056ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3308      	adds	r3, #8
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	e853 3f00 	ldrex	r3, [r3]
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	663b      	str	r3, [r7, #96]	; 0x60
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800573e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005740:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005746:	e841 2300 	strex	r3, r2, [r1]
 800574a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800574c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1e5      	bne.n	800571e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e067      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d04f      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005786:	d147      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005790:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	e853 3f00 	ldrex	r3, [r3]
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	637b      	str	r3, [r7, #52]	; 0x34
 80057b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b8:	e841 2300 	strex	r3, r2, [r1]
 80057bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1e6      	bne.n	8005792 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	e853 3f00 	ldrex	r3, [r3]
 80057d2:	613b      	str	r3, [r7, #16]
   return(result);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	66bb      	str	r3, [r7, #104]	; 0x68
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3308      	adds	r3, #8
 80057e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057e4:	623a      	str	r2, [r7, #32]
 80057e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	6a3a      	ldr	r2, [r7, #32]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e5      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e010      	b.n	800583a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	69da      	ldr	r2, [r3, #28]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	429a      	cmp	r2, r3
 8005834:	f43f af4a 	beq.w	80056cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3770      	adds	r7, #112	; 0x70
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
 800584a:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	881a      	ldrh	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	799b      	ldrb	r3, [r3, #6]
 8005854:	08db      	lsrs	r3, r3, #3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	b29b      	uxth	r3, r3
 800585a:	fb12 f303 	smulbb	r3, r2, r3
 800585e:	b29a      	uxth	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	889b      	ldrh	r3, [r3, #4]
 8005868:	461a      	mov	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	885b      	ldrh	r3, [r3, #2]
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	60da      	str	r2, [r3, #12]
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
 8005892:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	3306      	adds	r3, #6
 800589a:	2208      	movs	r2, #8
 800589c:	4619      	mov	r1, r3
 800589e:	f000 fca5 	bl	80061ec <memcpy>
    meta->width = font[FONTX_WIDTH];
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	7b9a      	ldrb	r2, [r3, #14]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	7bda      	ldrb	r2, [r3, #15]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	7c1a      	ldrb	r2, [r3, #16]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	72da      	strb	r2, [r3, #11]

    return 0;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 80058d0:	f107 0314 	add.w	r3, r7, #20
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff ffd7 	bl	800588a <fontx_meta>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 80058e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <fontx_glyph+0x2c>
        return status;
 80058ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ee:	e077      	b.n	80059e0 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 80058f0:	7f7a      	ldrb	r2, [r7, #29]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 80058f6:	7fba      	ldrb	r2, [r7, #30]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 80058fc:	7f7b      	ldrb	r3, [r7, #29]
 80058fe:	3307      	adds	r3, #7
 8005900:	2b00      	cmp	r3, #0
 8005902:	da00      	bge.n	8005906 <fontx_glyph+0x42>
 8005904:	3307      	adds	r3, #7
 8005906:	10db      	asrs	r3, r3, #3
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	78da      	ldrb	r2, [r3, #3]
 8005912:	7fbb      	ldrb	r3, [r7, #30]
 8005914:	fb12 f303 	smulbb	r3, r2, r3
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 800591e:	7ffb      	ldrb	r3, [r7, #31]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10f      	bne.n	8005944 <fontx_glyph+0x80>
        if (code < 0x100) {
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2bff      	cmp	r3, #255	; 0xff
 8005928:	d859      	bhi.n	80059de <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	461a      	mov	r2, r3
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	fb02 f303 	mul.w	r3, r2, r3
 8005936:	3311      	adds	r3, #17
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	441a      	add	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 8005940:	2300      	movs	r3, #0
 8005942:	e04d      	b.n	80059e0 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3312      	adds	r3, #18
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3311      	adds	r3, #17
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 8005956:	e03d      	b.n	80059d4 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005960:	3301      	adds	r3, #1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	4413      	add	r3, r2
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	3302      	adds	r3, #2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	3303      	adds	r3, #3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	4413      	add	r3, r2
 800597c:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	429a      	cmp	r2, r3
 8005984:	d31c      	bcc.n	80059c0 <fontx_glyph+0xfc>
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	429a      	cmp	r2, r3
 800598c:	d818      	bhi.n	80059c0 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005996:	4413      	add	r3, r2
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3311      	adds	r3, #17
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	461a      	mov	r2, r3
                    nc * glyph->size
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	789b      	ldrb	r3, [r3, #2]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80059b0:	4413      	add	r3, r2
 80059b2:	3312      	adds	r3, #18
                glyph->buffer = &font[
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	441a      	add	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	e00f      	b.n	80059e0 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	1ad2      	subs	r2, r2, r3
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	4413      	add	r3, r2
 80059ca:	3301      	adds	r3, #1
 80059cc:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	3304      	adds	r3, #4
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	1e5a      	subs	r2, r3, #1
 80059d8:	633a      	str	r2, [r7, #48]	; 0x30
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1bc      	bne.n	8005958 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 80059de:	2301      	movs	r3, #1
 80059e0:	4618      	mov	r0, r3
 80059e2:	3738      	adds	r7, #56	; 0x38
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	80fb      	strh	r3, [r7, #6]
 80059f2:	460b      	mov	r3, r1
 80059f4:	80bb      	strh	r3, [r7, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80059fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059fe:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <hagl_put_pixel+0x60>)
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	db1a      	blt.n	8005a3c <hagl_put_pixel+0x54>
 8005a06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <hagl_put_pixel+0x60>)
 8005a0c:	8852      	ldrh	r2, [r2, #2]
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	db14      	blt.n	8005a3c <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8005a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a16:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <hagl_put_pixel+0x60>)
 8005a18:	8892      	ldrh	r2, [r2, #4]
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	dc10      	bgt.n	8005a40 <hagl_put_pixel+0x58>
 8005a1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <hagl_put_pixel+0x60>)
 8005a24:	88d2      	ldrh	r2, [r2, #6]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	dc0a      	bgt.n	8005a40 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8005a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a2e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005a32:	887a      	ldrh	r2, [r7, #2]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fb fc59 	bl	80012ec <lcd_put_pixel>
 8005a3a:	e002      	b.n	8005a42 <hagl_put_pixel+0x5a>
        return;
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <hagl_put_pixel+0x5a>
        return;
 8005a40:	bf00      	nop
}
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005a5a:	f844 0c24 	str.w	r0, [r4, #-36]
 8005a5e:	460c      	mov	r4, r1
 8005a60:	4610      	mov	r0, r2
 8005a62:	4619      	mov	r1, r3
 8005a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a68:	4622      	mov	r2, r4
 8005a6a:	f823 2c26 	strh.w	r2, [r3, #-38]
 8005a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a72:	4602      	mov	r2, r0
 8005a74:	f823 2c28 	strh.w	r2, [r3, #-40]
 8005a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8005a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a86:	4619      	mov	r1, r3
 8005a88:	f107 0310 	add.w	r3, r7, #16
 8005a8c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7ff ff14 	bl	80058c4 <fontx_glyph>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005aa2:	f102 0209 	add.w	r2, r2, #9
 8005aa6:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8005aa8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005aac:	f103 0309 	add.w	r3, r3, #9
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <hagl_put_char+0x6e>
        return 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e0c0      	b.n	8005c3c <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8005aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005abe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ac8:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8005acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ad0:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ada:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8005ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8005ae8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005aec:	3a08      	subs	r2, #8
 8005aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005af2:	3b18      	subs	r3, #24
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fea3 	bl	8005842 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8005afc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b00:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8005b04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005b08:	f102 020c 	add.w	r2, r2, #12
 8005b0c:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005b14:	f102 020b 	add.w	r2, r2, #11
 8005b18:	7013      	strb	r3, [r2, #0]
 8005b1a:	e071      	b.n	8005c00 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005b22:	f102 020a 	add.w	r2, r2, #10
 8005b26:	7013      	strb	r3, [r2, #0]
 8005b28:	e047      	b.n	8005bba <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8005b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b2e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	b25a      	sxtb	r2, r3
 8005b36:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b3a:	f103 030a 	add.w	r3, r3, #10
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	2180      	movs	r1, #128	; 0x80
 8005b46:	fa41 f303 	asr.w	r3, r1, r3
 8005b4a:	b25b      	sxtb	r3, r3
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b25b      	sxtb	r3, r3
 8005b50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005b54:	f102 0208 	add.w	r2, r2, #8
 8005b58:	7013      	strb	r3, [r2, #0]
            if (set) {
 8005b5a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b5e:	f103 0308 	add.w	r3, r3, #8
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d010      	beq.n	8005b8a <hagl_put_char+0x13e>
                *(ptr++) = color;
 8005b68:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b6c:	f103 030c 	add.w	r3, r3, #12
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8005b78:	f101 010c 	add.w	r1, r1, #12
 8005b7c:	600a      	str	r2, [r1, #0]
 8005b7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b82:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e00c      	b.n	8005ba4 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8005b8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005b8e:	f103 030c 	add.w	r3, r3, #12
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8005b9a:	f101 010c 	add.w	r1, r1, #12
 8005b9e:	600a      	str	r2, [r1, #0]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8005ba4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005ba8:	f103 030a 	add.w	r3, r3, #10
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005bb4:	f102 020a 	add.w	r2, r2, #10
 8005bb8:	7013      	strb	r3, [r2, #0]
 8005bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bbe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8005bc2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005bc6:	f102 020a 	add.w	r2, r2, #10
 8005bca:	7812      	ldrb	r2, [r2, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3ac      	bcc.n	8005b2a <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8005bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bd4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8005bd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bdc:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8005be0:	4413      	add	r3, r2
 8005be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005be6:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005bea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005bee:	f103 030b 	add.w	r3, r3, #11
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005bfa:	f102 020b 	add.w	r2, r2, #11
 8005bfe:	7013      	strb	r3, [r2, #0]
 8005c00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c04:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8005c08:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8005c0c:	f102 020b 	add.w	r2, r2, #11
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d382      	bcc.n	8005b1c <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8005c16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c1a:	3b18      	subs	r3, #24
 8005c1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c20:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8005c24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c28:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f000 f85a 	bl	8005ce6 <hagl_blit>

    return bitmap.width;
 8005c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c36:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005c3a:	b2db      	uxtb	r3, r3
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}

08005c48 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08c      	sub	sp, #48	; 0x30
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	817b      	strh	r3, [r7, #10]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	813b      	strh	r3, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8005c62:	897b      	ldrh	r3, [r7, #10]
 8005c64:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8005c66:	f107 0314 	add.w	r3, r7, #20
 8005c6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fe0c 	bl	800588a <fontx_meta>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8005c78:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <hagl_put_text+0x3c>
        return 0;
 8005c80:	2300      	movs	r3, #0
 8005c82:	e02c      	b.n	8005cde <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	60fa      	str	r2, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	2b0d      	cmp	r3, #13
 8005c92:	d002      	beq.n	8005c9a <hagl_put_text+0x52>
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b0a      	cmp	r3, #10
 8005c98:	d108      	bne.n	8005cac <hagl_put_text+0x64>
            x0 = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8005c9e:	7fbb      	ldrb	r3, [r7, #30]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	893b      	ldrh	r3, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	813b      	strh	r3, [r7, #8]
 8005caa:	e010      	b.n	8005cce <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8005cac:	88f8      	ldrh	r0, [r7, #6]
 8005cae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005cb2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6a38      	ldr	r0, [r7, #32]
 8005cbe:	f7ff fec5 	bl	8005a4c <hagl_put_char>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	897b      	ldrh	r3, [r7, #10]
 8005cc8:	4413      	add	r3, r2
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1d6      	bne.n	8005c84 <hagl_put_text+0x3c>

    return x0 - original;
 8005cd6:	897a      	ldrh	r2, [r7, #10]
 8005cd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	b29b      	uxth	r3, r3
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3728      	adds	r7, #40	; 0x28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b086      	sub	sp, #24
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	4603      	mov	r3, r0
 8005cee:	603a      	str	r2, [r7, #0]
 8005cf0:	80fb      	strh	r3, [r7, #6]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	827b      	strh	r3, [r7, #18]
 8005d00:	e020      	b.n	8005d44 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8005d02:	2300      	movs	r3, #0
 8005d04:	823b      	strh	r3, [r7, #16]
 8005d06:	e015      	b.n	8005d34 <hagl_blit+0x4e>
            color = *(ptr++);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	1c9a      	adds	r2, r3, #2
 8005d0c:	617a      	str	r2, [r7, #20]
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	8a3b      	ldrh	r3, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	b218      	sxth	r0, r3
 8005d1c:	88ba      	ldrh	r2, [r7, #4]
 8005d1e:	8a7b      	ldrh	r3, [r7, #18]
 8005d20:	4413      	add	r3, r2
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	b21b      	sxth	r3, r3
 8005d26:	89fa      	ldrh	r2, [r7, #14]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f7ff fe5d 	bl	80059e8 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8005d2e:	8a3b      	ldrh	r3, [r7, #16]
 8005d30:	3301      	adds	r3, #1
 8005d32:	823b      	strh	r3, [r7, #16]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	8a3a      	ldrh	r2, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3e4      	bcc.n	8005d08 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8005d3e:	8a7b      	ldrh	r3, [r7, #18]
 8005d40:	3301      	adds	r3, #1
 8005d42:	827b      	strh	r3, [r7, #18]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	885b      	ldrh	r3, [r3, #2]
 8005d48:	8a7a      	ldrh	r2, [r7, #18]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3d9      	bcc.n	8005d02 <hagl_blit+0x1c>
        }
    }
#endif
};
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <__errno>:
 8005d58:	4b01      	ldr	r3, [pc, #4]	; (8005d60 <__errno+0x8>)
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000014 	.word	0x20000014

08005d64 <__sflush_r>:
 8005d64:	898a      	ldrh	r2, [r1, #12]
 8005d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	0710      	lsls	r0, r2, #28
 8005d6e:	460c      	mov	r4, r1
 8005d70:	d458      	bmi.n	8005e24 <__sflush_r+0xc0>
 8005d72:	684b      	ldr	r3, [r1, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dc05      	bgt.n	8005d84 <__sflush_r+0x20>
 8005d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	dc02      	bgt.n	8005d84 <__sflush_r+0x20>
 8005d7e:	2000      	movs	r0, #0
 8005d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	d0f9      	beq.n	8005d7e <__sflush_r+0x1a>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d90:	682f      	ldr	r7, [r5, #0]
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	d032      	beq.n	8005dfc <__sflush_r+0x98>
 8005d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	075a      	lsls	r2, r3, #29
 8005d9c:	d505      	bpl.n	8005daa <__sflush_r+0x46>
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	1ac0      	subs	r0, r0, r3
 8005da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005da4:	b10b      	cbz	r3, 8005daa <__sflush_r+0x46>
 8005da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	4602      	mov	r2, r0
 8005dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db0:	6a21      	ldr	r1, [r4, #32]
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b0      	blx	r6
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	d106      	bne.n	8005dca <__sflush_r+0x66>
 8005dbc:	6829      	ldr	r1, [r5, #0]
 8005dbe:	291d      	cmp	r1, #29
 8005dc0:	d82c      	bhi.n	8005e1c <__sflush_r+0xb8>
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <__sflush_r+0x108>)
 8005dc4:	40ca      	lsrs	r2, r1
 8005dc6:	07d6      	lsls	r6, r2, #31
 8005dc8:	d528      	bpl.n	8005e1c <__sflush_r+0xb8>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6062      	str	r2, [r4, #4]
 8005dce:	04d9      	lsls	r1, r3, #19
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	d504      	bpl.n	8005de0 <__sflush_r+0x7c>
 8005dd6:	1c42      	adds	r2, r0, #1
 8005dd8:	d101      	bne.n	8005dde <__sflush_r+0x7a>
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	b903      	cbnz	r3, 8005de0 <__sflush_r+0x7c>
 8005dde:	6560      	str	r0, [r4, #84]	; 0x54
 8005de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005de2:	602f      	str	r7, [r5, #0]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d0ca      	beq.n	8005d7e <__sflush_r+0x1a>
 8005de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d002      	beq.n	8005df6 <__sflush_r+0x92>
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 fa11 	bl	8006218 <_free_r>
 8005df6:	2000      	movs	r0, #0
 8005df8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dfa:	e7c1      	b.n	8005d80 <__sflush_r+0x1c>
 8005dfc:	6a21      	ldr	r1, [r4, #32]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b0      	blx	r6
 8005e04:	1c41      	adds	r1, r0, #1
 8005e06:	d1c7      	bne.n	8005d98 <__sflush_r+0x34>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0c4      	beq.n	8005d98 <__sflush_r+0x34>
 8005e0e:	2b1d      	cmp	r3, #29
 8005e10:	d001      	beq.n	8005e16 <__sflush_r+0xb2>
 8005e12:	2b16      	cmp	r3, #22
 8005e14:	d101      	bne.n	8005e1a <__sflush_r+0xb6>
 8005e16:	602f      	str	r7, [r5, #0]
 8005e18:	e7b1      	b.n	8005d7e <__sflush_r+0x1a>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	e7ad      	b.n	8005d80 <__sflush_r+0x1c>
 8005e24:	690f      	ldr	r7, [r1, #16]
 8005e26:	2f00      	cmp	r7, #0
 8005e28:	d0a9      	beq.n	8005d7e <__sflush_r+0x1a>
 8005e2a:	0793      	lsls	r3, r2, #30
 8005e2c:	680e      	ldr	r6, [r1, #0]
 8005e2e:	bf08      	it	eq
 8005e30:	694b      	ldreq	r3, [r1, #20]
 8005e32:	600f      	str	r7, [r1, #0]
 8005e34:	bf18      	it	ne
 8005e36:	2300      	movne	r3, #0
 8005e38:	eba6 0807 	sub.w	r8, r6, r7
 8005e3c:	608b      	str	r3, [r1, #8]
 8005e3e:	f1b8 0f00 	cmp.w	r8, #0
 8005e42:	dd9c      	ble.n	8005d7e <__sflush_r+0x1a>
 8005e44:	6a21      	ldr	r1, [r4, #32]
 8005e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e48:	4643      	mov	r3, r8
 8005e4a:	463a      	mov	r2, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b0      	blx	r6
 8005e50:	2800      	cmp	r0, #0
 8005e52:	dc06      	bgt.n	8005e62 <__sflush_r+0xfe>
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e5a:	81a3      	strh	r3, [r4, #12]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	e78e      	b.n	8005d80 <__sflush_r+0x1c>
 8005e62:	4407      	add	r7, r0
 8005e64:	eba8 0800 	sub.w	r8, r8, r0
 8005e68:	e7e9      	b.n	8005e3e <__sflush_r+0xda>
 8005e6a:	bf00      	nop
 8005e6c:	20400001 	.word	0x20400001

08005e70 <_fflush_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	690b      	ldr	r3, [r1, #16]
 8005e74:	4605      	mov	r5, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	b913      	cbnz	r3, 8005e80 <_fflush_r+0x10>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	b118      	cbz	r0, 8005e8a <_fflush_r+0x1a>
 8005e82:	6983      	ldr	r3, [r0, #24]
 8005e84:	b90b      	cbnz	r3, 8005e8a <_fflush_r+0x1a>
 8005e86:	f000 f887 	bl	8005f98 <__sinit>
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <_fflush_r+0x6c>)
 8005e8c:	429c      	cmp	r4, r3
 8005e8e:	d11b      	bne.n	8005ec8 <_fflush_r+0x58>
 8005e90:	686c      	ldr	r4, [r5, #4]
 8005e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0ef      	beq.n	8005e7a <_fflush_r+0xa>
 8005e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e9c:	07d0      	lsls	r0, r2, #31
 8005e9e:	d404      	bmi.n	8005eaa <_fflush_r+0x3a>
 8005ea0:	0599      	lsls	r1, r3, #22
 8005ea2:	d402      	bmi.n	8005eaa <_fflush_r+0x3a>
 8005ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea6:	f000 f93a 	bl	800611e <__retarget_lock_acquire_recursive>
 8005eaa:	4628      	mov	r0, r5
 8005eac:	4621      	mov	r1, r4
 8005eae:	f7ff ff59 	bl	8005d64 <__sflush_r>
 8005eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eb4:	07da      	lsls	r2, r3, #31
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	d4e0      	bmi.n	8005e7c <_fflush_r+0xc>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	059b      	lsls	r3, r3, #22
 8005ebe:	d4dd      	bmi.n	8005e7c <_fflush_r+0xc>
 8005ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec2:	f000 f92d 	bl	8006120 <__retarget_lock_release_recursive>
 8005ec6:	e7d9      	b.n	8005e7c <_fflush_r+0xc>
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <_fflush_r+0x70>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d101      	bne.n	8005ed2 <_fflush_r+0x62>
 8005ece:	68ac      	ldr	r4, [r5, #8]
 8005ed0:	e7df      	b.n	8005e92 <_fflush_r+0x22>
 8005ed2:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <_fflush_r+0x74>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	bf08      	it	eq
 8005ed8:	68ec      	ldreq	r4, [r5, #12]
 8005eda:	e7da      	b.n	8005e92 <_fflush_r+0x22>
 8005edc:	0800cbd0 	.word	0x0800cbd0
 8005ee0:	0800cbf0 	.word	0x0800cbf0
 8005ee4:	0800cbb0 	.word	0x0800cbb0

08005ee8 <std>:
 8005ee8:	2300      	movs	r3, #0
 8005eea:	b510      	push	{r4, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	e9c0 3300 	strd	r3, r3, [r0]
 8005ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef6:	6083      	str	r3, [r0, #8]
 8005ef8:	8181      	strh	r1, [r0, #12]
 8005efa:	6643      	str	r3, [r0, #100]	; 0x64
 8005efc:	81c2      	strh	r2, [r0, #14]
 8005efe:	6183      	str	r3, [r0, #24]
 8005f00:	4619      	mov	r1, r3
 8005f02:	2208      	movs	r2, #8
 8005f04:	305c      	adds	r0, #92	; 0x5c
 8005f06:	f000 f97f 	bl	8006208 <memset>
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <std+0x38>)
 8005f0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <std+0x3c>)
 8005f10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f12:	4b05      	ldr	r3, [pc, #20]	; (8005f28 <std+0x40>)
 8005f14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <std+0x44>)
 8005f18:	6224      	str	r4, [r4, #32]
 8005f1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	bf00      	nop
 8005f20:	08006d35 	.word	0x08006d35
 8005f24:	08006d57 	.word	0x08006d57
 8005f28:	08006d8f 	.word	0x08006d8f
 8005f2c:	08006db3 	.word	0x08006db3

08005f30 <_cleanup_r>:
 8005f30:	4901      	ldr	r1, [pc, #4]	; (8005f38 <_cleanup_r+0x8>)
 8005f32:	f000 b8af 	b.w	8006094 <_fwalk_reent>
 8005f36:	bf00      	nop
 8005f38:	08005e71 	.word	0x08005e71

08005f3c <__sfmoreglue>:
 8005f3c:	b570      	push	{r4, r5, r6, lr}
 8005f3e:	2268      	movs	r2, #104	; 0x68
 8005f40:	1e4d      	subs	r5, r1, #1
 8005f42:	4355      	muls	r5, r2
 8005f44:	460e      	mov	r6, r1
 8005f46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f4a:	f000 f9d1 	bl	80062f0 <_malloc_r>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	b140      	cbz	r0, 8005f64 <__sfmoreglue+0x28>
 8005f52:	2100      	movs	r1, #0
 8005f54:	e9c0 1600 	strd	r1, r6, [r0]
 8005f58:	300c      	adds	r0, #12
 8005f5a:	60a0      	str	r0, [r4, #8]
 8005f5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f60:	f000 f952 	bl	8006208 <memset>
 8005f64:	4620      	mov	r0, r4
 8005f66:	bd70      	pop	{r4, r5, r6, pc}

08005f68 <__sfp_lock_acquire>:
 8005f68:	4801      	ldr	r0, [pc, #4]	; (8005f70 <__sfp_lock_acquire+0x8>)
 8005f6a:	f000 b8d8 	b.w	800611e <__retarget_lock_acquire_recursive>
 8005f6e:	bf00      	nop
 8005f70:	2000a369 	.word	0x2000a369

08005f74 <__sfp_lock_release>:
 8005f74:	4801      	ldr	r0, [pc, #4]	; (8005f7c <__sfp_lock_release+0x8>)
 8005f76:	f000 b8d3 	b.w	8006120 <__retarget_lock_release_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	2000a369 	.word	0x2000a369

08005f80 <__sinit_lock_acquire>:
 8005f80:	4801      	ldr	r0, [pc, #4]	; (8005f88 <__sinit_lock_acquire+0x8>)
 8005f82:	f000 b8cc 	b.w	800611e <__retarget_lock_acquire_recursive>
 8005f86:	bf00      	nop
 8005f88:	2000a36a 	.word	0x2000a36a

08005f8c <__sinit_lock_release>:
 8005f8c:	4801      	ldr	r0, [pc, #4]	; (8005f94 <__sinit_lock_release+0x8>)
 8005f8e:	f000 b8c7 	b.w	8006120 <__retarget_lock_release_recursive>
 8005f92:	bf00      	nop
 8005f94:	2000a36a 	.word	0x2000a36a

08005f98 <__sinit>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f7ff fff0 	bl	8005f80 <__sinit_lock_acquire>
 8005fa0:	69a3      	ldr	r3, [r4, #24]
 8005fa2:	b11b      	cbz	r3, 8005fac <__sinit+0x14>
 8005fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa8:	f7ff bff0 	b.w	8005f8c <__sinit_lock_release>
 8005fac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fb0:	6523      	str	r3, [r4, #80]	; 0x50
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <__sinit+0x68>)
 8005fb4:	4a13      	ldr	r2, [pc, #76]	; (8006004 <__sinit+0x6c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fba:	42a3      	cmp	r3, r4
 8005fbc:	bf04      	itt	eq
 8005fbe:	2301      	moveq	r3, #1
 8005fc0:	61a3      	streq	r3, [r4, #24]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f820 	bl	8006008 <__sfp>
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f81c 	bl	8006008 <__sfp>
 8005fd0:	60a0      	str	r0, [r4, #8]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f000 f818 	bl	8006008 <__sfp>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	60e0      	str	r0, [r4, #12]
 8005fdc:	2104      	movs	r1, #4
 8005fde:	6860      	ldr	r0, [r4, #4]
 8005fe0:	f7ff ff82 	bl	8005ee8 <std>
 8005fe4:	68a0      	ldr	r0, [r4, #8]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	2109      	movs	r1, #9
 8005fea:	f7ff ff7d 	bl	8005ee8 <std>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	2112      	movs	r1, #18
 8005ff4:	f7ff ff78 	bl	8005ee8 <std>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	61a3      	str	r3, [r4, #24]
 8005ffc:	e7d2      	b.n	8005fa4 <__sinit+0xc>
 8005ffe:	bf00      	nop
 8006000:	0800cc10 	.word	0x0800cc10
 8006004:	08005f31 	.word	0x08005f31

08006008 <__sfp>:
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4607      	mov	r7, r0
 800600c:	f7ff ffac 	bl	8005f68 <__sfp_lock_acquire>
 8006010:	4b1e      	ldr	r3, [pc, #120]	; (800608c <__sfp+0x84>)
 8006012:	681e      	ldr	r6, [r3, #0]
 8006014:	69b3      	ldr	r3, [r6, #24]
 8006016:	b913      	cbnz	r3, 800601e <__sfp+0x16>
 8006018:	4630      	mov	r0, r6
 800601a:	f7ff ffbd 	bl	8005f98 <__sinit>
 800601e:	3648      	adds	r6, #72	; 0x48
 8006020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006024:	3b01      	subs	r3, #1
 8006026:	d503      	bpl.n	8006030 <__sfp+0x28>
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	b30b      	cbz	r3, 8006070 <__sfp+0x68>
 800602c:	6836      	ldr	r6, [r6, #0]
 800602e:	e7f7      	b.n	8006020 <__sfp+0x18>
 8006030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006034:	b9d5      	cbnz	r5, 800606c <__sfp+0x64>
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <__sfp+0x88>)
 8006038:	60e3      	str	r3, [r4, #12]
 800603a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800603e:	6665      	str	r5, [r4, #100]	; 0x64
 8006040:	f000 f86c 	bl	800611c <__retarget_lock_init_recursive>
 8006044:	f7ff ff96 	bl	8005f74 <__sfp_lock_release>
 8006048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800604c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006050:	6025      	str	r5, [r4, #0]
 8006052:	61a5      	str	r5, [r4, #24]
 8006054:	2208      	movs	r2, #8
 8006056:	4629      	mov	r1, r5
 8006058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800605c:	f000 f8d4 	bl	8006208 <memset>
 8006060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006068:	4620      	mov	r0, r4
 800606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606c:	3468      	adds	r4, #104	; 0x68
 800606e:	e7d9      	b.n	8006024 <__sfp+0x1c>
 8006070:	2104      	movs	r1, #4
 8006072:	4638      	mov	r0, r7
 8006074:	f7ff ff62 	bl	8005f3c <__sfmoreglue>
 8006078:	4604      	mov	r4, r0
 800607a:	6030      	str	r0, [r6, #0]
 800607c:	2800      	cmp	r0, #0
 800607e:	d1d5      	bne.n	800602c <__sfp+0x24>
 8006080:	f7ff ff78 	bl	8005f74 <__sfp_lock_release>
 8006084:	230c      	movs	r3, #12
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	e7ee      	b.n	8006068 <__sfp+0x60>
 800608a:	bf00      	nop
 800608c:	0800cc10 	.word	0x0800cc10
 8006090:	ffff0001 	.word	0xffff0001

08006094 <_fwalk_reent>:
 8006094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006098:	4606      	mov	r6, r0
 800609a:	4688      	mov	r8, r1
 800609c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060a0:	2700      	movs	r7, #0
 80060a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a6:	f1b9 0901 	subs.w	r9, r9, #1
 80060aa:	d505      	bpl.n	80060b8 <_fwalk_reent+0x24>
 80060ac:	6824      	ldr	r4, [r4, #0]
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	d1f7      	bne.n	80060a2 <_fwalk_reent+0xe>
 80060b2:	4638      	mov	r0, r7
 80060b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b8:	89ab      	ldrh	r3, [r5, #12]
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d907      	bls.n	80060ce <_fwalk_reent+0x3a>
 80060be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060c2:	3301      	adds	r3, #1
 80060c4:	d003      	beq.n	80060ce <_fwalk_reent+0x3a>
 80060c6:	4629      	mov	r1, r5
 80060c8:	4630      	mov	r0, r6
 80060ca:	47c0      	blx	r8
 80060cc:	4307      	orrs	r7, r0
 80060ce:	3568      	adds	r5, #104	; 0x68
 80060d0:	e7e9      	b.n	80060a6 <_fwalk_reent+0x12>
	...

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f003 fbe0 	bl	80098ac <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	0800d144 	.word	0x0800d144
 8006110:	0800d144 	.word	0x0800d144
 8006114:	0800d144 	.word	0x0800d144
 8006118:	0800d148 	.word	0x0800d148

0800611c <__retarget_lock_init_recursive>:
 800611c:	4770      	bx	lr

0800611e <__retarget_lock_acquire_recursive>:
 800611e:	4770      	bx	lr

08006120 <__retarget_lock_release_recursive>:
 8006120:	4770      	bx	lr

08006122 <__swhatbuf_r>:
 8006122:	b570      	push	{r4, r5, r6, lr}
 8006124:	460e      	mov	r6, r1
 8006126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612a:	2900      	cmp	r1, #0
 800612c:	b096      	sub	sp, #88	; 0x58
 800612e:	4614      	mov	r4, r2
 8006130:	461d      	mov	r5, r3
 8006132:	da08      	bge.n	8006146 <__swhatbuf_r+0x24>
 8006134:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	602a      	str	r2, [r5, #0]
 800613c:	061a      	lsls	r2, r3, #24
 800613e:	d410      	bmi.n	8006162 <__swhatbuf_r+0x40>
 8006140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006144:	e00e      	b.n	8006164 <__swhatbuf_r+0x42>
 8006146:	466a      	mov	r2, sp
 8006148:	f001 fd08 	bl	8007b5c <_fstat_r>
 800614c:	2800      	cmp	r0, #0
 800614e:	dbf1      	blt.n	8006134 <__swhatbuf_r+0x12>
 8006150:	9a01      	ldr	r2, [sp, #4]
 8006152:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006156:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800615a:	425a      	negs	r2, r3
 800615c:	415a      	adcs	r2, r3
 800615e:	602a      	str	r2, [r5, #0]
 8006160:	e7ee      	b.n	8006140 <__swhatbuf_r+0x1e>
 8006162:	2340      	movs	r3, #64	; 0x40
 8006164:	2000      	movs	r0, #0
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	b016      	add	sp, #88	; 0x58
 800616a:	bd70      	pop	{r4, r5, r6, pc}

0800616c <__smakebuf_r>:
 800616c:	898b      	ldrh	r3, [r1, #12]
 800616e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006170:	079d      	lsls	r5, r3, #30
 8006172:	4606      	mov	r6, r0
 8006174:	460c      	mov	r4, r1
 8006176:	d507      	bpl.n	8006188 <__smakebuf_r+0x1c>
 8006178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	2301      	movs	r3, #1
 8006182:	6163      	str	r3, [r4, #20]
 8006184:	b002      	add	sp, #8
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	ab01      	add	r3, sp, #4
 800618a:	466a      	mov	r2, sp
 800618c:	f7ff ffc9 	bl	8006122 <__swhatbuf_r>
 8006190:	9900      	ldr	r1, [sp, #0]
 8006192:	4605      	mov	r5, r0
 8006194:	4630      	mov	r0, r6
 8006196:	f000 f8ab 	bl	80062f0 <_malloc_r>
 800619a:	b948      	cbnz	r0, 80061b0 <__smakebuf_r+0x44>
 800619c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a0:	059a      	lsls	r2, r3, #22
 80061a2:	d4ef      	bmi.n	8006184 <__smakebuf_r+0x18>
 80061a4:	f023 0303 	bic.w	r3, r3, #3
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	e7e3      	b.n	8006178 <__smakebuf_r+0xc>
 80061b0:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <__smakebuf_r+0x7c>)
 80061b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	6020      	str	r0, [r4, #0]
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	81a3      	strh	r3, [r4, #12]
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	6163      	str	r3, [r4, #20]
 80061c2:	9b01      	ldr	r3, [sp, #4]
 80061c4:	6120      	str	r0, [r4, #16]
 80061c6:	b15b      	cbz	r3, 80061e0 <__smakebuf_r+0x74>
 80061c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061cc:	4630      	mov	r0, r6
 80061ce:	f001 fcd7 	bl	8007b80 <_isatty_r>
 80061d2:	b128      	cbz	r0, 80061e0 <__smakebuf_r+0x74>
 80061d4:	89a3      	ldrh	r3, [r4, #12]
 80061d6:	f023 0303 	bic.w	r3, r3, #3
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	81a3      	strh	r3, [r4, #12]
 80061e0:	89a0      	ldrh	r0, [r4, #12]
 80061e2:	4305      	orrs	r5, r0
 80061e4:	81a5      	strh	r5, [r4, #12]
 80061e6:	e7cd      	b.n	8006184 <__smakebuf_r+0x18>
 80061e8:	08005f31 	.word	0x08005f31

080061ec <memcpy>:
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f4:	d100      	bne.n	80061f8 <memcpy+0xc>
 80061f6:	4770      	bx	lr
 80061f8:	b510      	push	{r4, lr}
 80061fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006202:	4291      	cmp	r1, r2
 8006204:	d1f9      	bne.n	80061fa <memcpy+0xe>
 8006206:	bd10      	pop	{r4, pc}

08006208 <memset>:
 8006208:	4402      	add	r2, r0
 800620a:	4603      	mov	r3, r0
 800620c:	4293      	cmp	r3, r2
 800620e:	d100      	bne.n	8006212 <memset+0xa>
 8006210:	4770      	bx	lr
 8006212:	f803 1b01 	strb.w	r1, [r3], #1
 8006216:	e7f9      	b.n	800620c <memset+0x4>

08006218 <_free_r>:
 8006218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800621a:	2900      	cmp	r1, #0
 800621c:	d044      	beq.n	80062a8 <_free_r+0x90>
 800621e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006222:	9001      	str	r0, [sp, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	f1a1 0404 	sub.w	r4, r1, #4
 800622a:	bfb8      	it	lt
 800622c:	18e4      	addlt	r4, r4, r3
 800622e:	f001 fcd5 	bl	8007bdc <__malloc_lock>
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <_free_r+0x94>)
 8006234:	9801      	ldr	r0, [sp, #4]
 8006236:	6813      	ldr	r3, [r2, #0]
 8006238:	b933      	cbnz	r3, 8006248 <_free_r+0x30>
 800623a:	6063      	str	r3, [r4, #4]
 800623c:	6014      	str	r4, [r2, #0]
 800623e:	b003      	add	sp, #12
 8006240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006244:	f001 bcd0 	b.w	8007be8 <__malloc_unlock>
 8006248:	42a3      	cmp	r3, r4
 800624a:	d908      	bls.n	800625e <_free_r+0x46>
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1961      	adds	r1, r4, r5
 8006250:	428b      	cmp	r3, r1
 8006252:	bf01      	itttt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	1949      	addeq	r1, r1, r5
 800625a:	6021      	streq	r1, [r4, #0]
 800625c:	e7ed      	b.n	800623a <_free_r+0x22>
 800625e:	461a      	mov	r2, r3
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	b10b      	cbz	r3, 8006268 <_free_r+0x50>
 8006264:	42a3      	cmp	r3, r4
 8006266:	d9fa      	bls.n	800625e <_free_r+0x46>
 8006268:	6811      	ldr	r1, [r2, #0]
 800626a:	1855      	adds	r5, r2, r1
 800626c:	42a5      	cmp	r5, r4
 800626e:	d10b      	bne.n	8006288 <_free_r+0x70>
 8006270:	6824      	ldr	r4, [r4, #0]
 8006272:	4421      	add	r1, r4
 8006274:	1854      	adds	r4, r2, r1
 8006276:	42a3      	cmp	r3, r4
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	d1e0      	bne.n	800623e <_free_r+0x26>
 800627c:	681c      	ldr	r4, [r3, #0]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	6053      	str	r3, [r2, #4]
 8006282:	4421      	add	r1, r4
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	e7da      	b.n	800623e <_free_r+0x26>
 8006288:	d902      	bls.n	8006290 <_free_r+0x78>
 800628a:	230c      	movs	r3, #12
 800628c:	6003      	str	r3, [r0, #0]
 800628e:	e7d6      	b.n	800623e <_free_r+0x26>
 8006290:	6825      	ldr	r5, [r4, #0]
 8006292:	1961      	adds	r1, r4, r5
 8006294:	428b      	cmp	r3, r1
 8006296:	bf04      	itt	eq
 8006298:	6819      	ldreq	r1, [r3, #0]
 800629a:	685b      	ldreq	r3, [r3, #4]
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	bf04      	itt	eq
 80062a0:	1949      	addeq	r1, r1, r5
 80062a2:	6021      	streq	r1, [r4, #0]
 80062a4:	6054      	str	r4, [r2, #4]
 80062a6:	e7ca      	b.n	800623e <_free_r+0x26>
 80062a8:	b003      	add	sp, #12
 80062aa:	bd30      	pop	{r4, r5, pc}
 80062ac:	2000a36c 	.word	0x2000a36c

080062b0 <sbrk_aligned>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4e0e      	ldr	r6, [pc, #56]	; (80062ec <sbrk_aligned+0x3c>)
 80062b4:	460c      	mov	r4, r1
 80062b6:	6831      	ldr	r1, [r6, #0]
 80062b8:	4605      	mov	r5, r0
 80062ba:	b911      	cbnz	r1, 80062c2 <sbrk_aligned+0x12>
 80062bc:	f000 fcf6 	bl	8006cac <_sbrk_r>
 80062c0:	6030      	str	r0, [r6, #0]
 80062c2:	4621      	mov	r1, r4
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 fcf1 	bl	8006cac <_sbrk_r>
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	d00a      	beq.n	80062e4 <sbrk_aligned+0x34>
 80062ce:	1cc4      	adds	r4, r0, #3
 80062d0:	f024 0403 	bic.w	r4, r4, #3
 80062d4:	42a0      	cmp	r0, r4
 80062d6:	d007      	beq.n	80062e8 <sbrk_aligned+0x38>
 80062d8:	1a21      	subs	r1, r4, r0
 80062da:	4628      	mov	r0, r5
 80062dc:	f000 fce6 	bl	8006cac <_sbrk_r>
 80062e0:	3001      	adds	r0, #1
 80062e2:	d101      	bne.n	80062e8 <sbrk_aligned+0x38>
 80062e4:	f04f 34ff 	mov.w	r4, #4294967295
 80062e8:	4620      	mov	r0, r4
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	2000a370 	.word	0x2000a370

080062f0 <_malloc_r>:
 80062f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f4:	1ccd      	adds	r5, r1, #3
 80062f6:	f025 0503 	bic.w	r5, r5, #3
 80062fa:	3508      	adds	r5, #8
 80062fc:	2d0c      	cmp	r5, #12
 80062fe:	bf38      	it	cc
 8006300:	250c      	movcc	r5, #12
 8006302:	2d00      	cmp	r5, #0
 8006304:	4607      	mov	r7, r0
 8006306:	db01      	blt.n	800630c <_malloc_r+0x1c>
 8006308:	42a9      	cmp	r1, r5
 800630a:	d905      	bls.n	8006318 <_malloc_r+0x28>
 800630c:	230c      	movs	r3, #12
 800630e:	603b      	str	r3, [r7, #0]
 8006310:	2600      	movs	r6, #0
 8006312:	4630      	mov	r0, r6
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	4e2e      	ldr	r6, [pc, #184]	; (80063d4 <_malloc_r+0xe4>)
 800631a:	f001 fc5f 	bl	8007bdc <__malloc_lock>
 800631e:	6833      	ldr	r3, [r6, #0]
 8006320:	461c      	mov	r4, r3
 8006322:	bb34      	cbnz	r4, 8006372 <_malloc_r+0x82>
 8006324:	4629      	mov	r1, r5
 8006326:	4638      	mov	r0, r7
 8006328:	f7ff ffc2 	bl	80062b0 <sbrk_aligned>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	4604      	mov	r4, r0
 8006330:	d14d      	bne.n	80063ce <_malloc_r+0xde>
 8006332:	6834      	ldr	r4, [r6, #0]
 8006334:	4626      	mov	r6, r4
 8006336:	2e00      	cmp	r6, #0
 8006338:	d140      	bne.n	80063bc <_malloc_r+0xcc>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4631      	mov	r1, r6
 800633e:	4638      	mov	r0, r7
 8006340:	eb04 0803 	add.w	r8, r4, r3
 8006344:	f000 fcb2 	bl	8006cac <_sbrk_r>
 8006348:	4580      	cmp	r8, r0
 800634a:	d13a      	bne.n	80063c2 <_malloc_r+0xd2>
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	3503      	adds	r5, #3
 8006350:	1a6d      	subs	r5, r5, r1
 8006352:	f025 0503 	bic.w	r5, r5, #3
 8006356:	3508      	adds	r5, #8
 8006358:	2d0c      	cmp	r5, #12
 800635a:	bf38      	it	cc
 800635c:	250c      	movcc	r5, #12
 800635e:	4629      	mov	r1, r5
 8006360:	4638      	mov	r0, r7
 8006362:	f7ff ffa5 	bl	80062b0 <sbrk_aligned>
 8006366:	3001      	adds	r0, #1
 8006368:	d02b      	beq.n	80063c2 <_malloc_r+0xd2>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	442b      	add	r3, r5
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	e00e      	b.n	8006390 <_malloc_r+0xa0>
 8006372:	6822      	ldr	r2, [r4, #0]
 8006374:	1b52      	subs	r2, r2, r5
 8006376:	d41e      	bmi.n	80063b6 <_malloc_r+0xc6>
 8006378:	2a0b      	cmp	r2, #11
 800637a:	d916      	bls.n	80063aa <_malloc_r+0xba>
 800637c:	1961      	adds	r1, r4, r5
 800637e:	42a3      	cmp	r3, r4
 8006380:	6025      	str	r5, [r4, #0]
 8006382:	bf18      	it	ne
 8006384:	6059      	strne	r1, [r3, #4]
 8006386:	6863      	ldr	r3, [r4, #4]
 8006388:	bf08      	it	eq
 800638a:	6031      	streq	r1, [r6, #0]
 800638c:	5162      	str	r2, [r4, r5]
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	4638      	mov	r0, r7
 8006392:	f104 060b 	add.w	r6, r4, #11
 8006396:	f001 fc27 	bl	8007be8 <__malloc_unlock>
 800639a:	f026 0607 	bic.w	r6, r6, #7
 800639e:	1d23      	adds	r3, r4, #4
 80063a0:	1af2      	subs	r2, r6, r3
 80063a2:	d0b6      	beq.n	8006312 <_malloc_r+0x22>
 80063a4:	1b9b      	subs	r3, r3, r6
 80063a6:	50a3      	str	r3, [r4, r2]
 80063a8:	e7b3      	b.n	8006312 <_malloc_r+0x22>
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bf0c      	ite	eq
 80063b0:	6032      	streq	r2, [r6, #0]
 80063b2:	605a      	strne	r2, [r3, #4]
 80063b4:	e7ec      	b.n	8006390 <_malloc_r+0xa0>
 80063b6:	4623      	mov	r3, r4
 80063b8:	6864      	ldr	r4, [r4, #4]
 80063ba:	e7b2      	b.n	8006322 <_malloc_r+0x32>
 80063bc:	4634      	mov	r4, r6
 80063be:	6876      	ldr	r6, [r6, #4]
 80063c0:	e7b9      	b.n	8006336 <_malloc_r+0x46>
 80063c2:	230c      	movs	r3, #12
 80063c4:	603b      	str	r3, [r7, #0]
 80063c6:	4638      	mov	r0, r7
 80063c8:	f001 fc0e 	bl	8007be8 <__malloc_unlock>
 80063cc:	e7a1      	b.n	8006312 <_malloc_r+0x22>
 80063ce:	6025      	str	r5, [r4, #0]
 80063d0:	e7de      	b.n	8006390 <_malloc_r+0xa0>
 80063d2:	bf00      	nop
 80063d4:	2000a36c 	.word	0x2000a36c

080063d8 <__cvt>:
 80063d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	ec55 4b10 	vmov	r4, r5, d0
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	460e      	mov	r6, r1
 80063e4:	4619      	mov	r1, r3
 80063e6:	462b      	mov	r3, r5
 80063e8:	bfbb      	ittet	lt
 80063ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063ee:	461d      	movlt	r5, r3
 80063f0:	2300      	movge	r3, #0
 80063f2:	232d      	movlt	r3, #45	; 0x2d
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063fc:	4691      	mov	r9, r2
 80063fe:	f023 0820 	bic.w	r8, r3, #32
 8006402:	bfbc      	itt	lt
 8006404:	4622      	movlt	r2, r4
 8006406:	4614      	movlt	r4, r2
 8006408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800640c:	d005      	beq.n	800641a <__cvt+0x42>
 800640e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006412:	d100      	bne.n	8006416 <__cvt+0x3e>
 8006414:	3601      	adds	r6, #1
 8006416:	2102      	movs	r1, #2
 8006418:	e000      	b.n	800641c <__cvt+0x44>
 800641a:	2103      	movs	r1, #3
 800641c:	ab03      	add	r3, sp, #12
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	ab02      	add	r3, sp, #8
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	ec45 4b10 	vmov	d0, r4, r5
 8006428:	4653      	mov	r3, sl
 800642a:	4632      	mov	r2, r6
 800642c:	f000 fda8 	bl	8006f80 <_dtoa_r>
 8006430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006434:	4607      	mov	r7, r0
 8006436:	d102      	bne.n	800643e <__cvt+0x66>
 8006438:	f019 0f01 	tst.w	r9, #1
 800643c:	d022      	beq.n	8006484 <__cvt+0xac>
 800643e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006442:	eb07 0906 	add.w	r9, r7, r6
 8006446:	d110      	bne.n	800646a <__cvt+0x92>
 8006448:	783b      	ldrb	r3, [r7, #0]
 800644a:	2b30      	cmp	r3, #48	; 0x30
 800644c:	d10a      	bne.n	8006464 <__cvt+0x8c>
 800644e:	2200      	movs	r2, #0
 8006450:	2300      	movs	r3, #0
 8006452:	4620      	mov	r0, r4
 8006454:	4629      	mov	r1, r5
 8006456:	f7fa fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800645a:	b918      	cbnz	r0, 8006464 <__cvt+0x8c>
 800645c:	f1c6 0601 	rsb	r6, r6, #1
 8006460:	f8ca 6000 	str.w	r6, [sl]
 8006464:	f8da 3000 	ldr.w	r3, [sl]
 8006468:	4499      	add	r9, r3
 800646a:	2200      	movs	r2, #0
 800646c:	2300      	movs	r3, #0
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7fa fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8006476:	b108      	cbz	r0, 800647c <__cvt+0xa4>
 8006478:	f8cd 900c 	str.w	r9, [sp, #12]
 800647c:	2230      	movs	r2, #48	; 0x30
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	454b      	cmp	r3, r9
 8006482:	d307      	bcc.n	8006494 <__cvt+0xbc>
 8006484:	9b03      	ldr	r3, [sp, #12]
 8006486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006488:	1bdb      	subs	r3, r3, r7
 800648a:	4638      	mov	r0, r7
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	b004      	add	sp, #16
 8006490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	9103      	str	r1, [sp, #12]
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e7f0      	b.n	800647e <__cvt+0xa6>

0800649c <__exponent>:
 800649c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800649e:	4603      	mov	r3, r0
 80064a0:	2900      	cmp	r1, #0
 80064a2:	bfb8      	it	lt
 80064a4:	4249      	neglt	r1, r1
 80064a6:	f803 2b02 	strb.w	r2, [r3], #2
 80064aa:	bfb4      	ite	lt
 80064ac:	222d      	movlt	r2, #45	; 0x2d
 80064ae:	222b      	movge	r2, #43	; 0x2b
 80064b0:	2909      	cmp	r1, #9
 80064b2:	7042      	strb	r2, [r0, #1]
 80064b4:	dd2a      	ble.n	800650c <__exponent+0x70>
 80064b6:	f10d 0407 	add.w	r4, sp, #7
 80064ba:	46a4      	mov	ip, r4
 80064bc:	270a      	movs	r7, #10
 80064be:	46a6      	mov	lr, r4
 80064c0:	460a      	mov	r2, r1
 80064c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80064c6:	fb07 1516 	mls	r5, r7, r6, r1
 80064ca:	3530      	adds	r5, #48	; 0x30
 80064cc:	2a63      	cmp	r2, #99	; 0x63
 80064ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80064d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80064d6:	4631      	mov	r1, r6
 80064d8:	dcf1      	bgt.n	80064be <__exponent+0x22>
 80064da:	3130      	adds	r1, #48	; 0x30
 80064dc:	f1ae 0502 	sub.w	r5, lr, #2
 80064e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80064e4:	1c44      	adds	r4, r0, #1
 80064e6:	4629      	mov	r1, r5
 80064e8:	4561      	cmp	r1, ip
 80064ea:	d30a      	bcc.n	8006502 <__exponent+0x66>
 80064ec:	f10d 0209 	add.w	r2, sp, #9
 80064f0:	eba2 020e 	sub.w	r2, r2, lr
 80064f4:	4565      	cmp	r5, ip
 80064f6:	bf88      	it	hi
 80064f8:	2200      	movhi	r2, #0
 80064fa:	4413      	add	r3, r2
 80064fc:	1a18      	subs	r0, r3, r0
 80064fe:	b003      	add	sp, #12
 8006500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006502:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006506:	f804 2f01 	strb.w	r2, [r4, #1]!
 800650a:	e7ed      	b.n	80064e8 <__exponent+0x4c>
 800650c:	2330      	movs	r3, #48	; 0x30
 800650e:	3130      	adds	r1, #48	; 0x30
 8006510:	7083      	strb	r3, [r0, #2]
 8006512:	70c1      	strb	r1, [r0, #3]
 8006514:	1d03      	adds	r3, r0, #4
 8006516:	e7f1      	b.n	80064fc <__exponent+0x60>

08006518 <_printf_float>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	ed2d 8b02 	vpush	{d8}
 8006520:	b08d      	sub	sp, #52	; 0x34
 8006522:	460c      	mov	r4, r1
 8006524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006528:	4616      	mov	r6, r2
 800652a:	461f      	mov	r7, r3
 800652c:	4605      	mov	r5, r0
 800652e:	f001 fb37 	bl	8007ba0 <_localeconv_r>
 8006532:	f8d0 a000 	ldr.w	sl, [r0]
 8006536:	4650      	mov	r0, sl
 8006538:	f7f9 fe4a 	bl	80001d0 <strlen>
 800653c:	2300      	movs	r3, #0
 800653e:	930a      	str	r3, [sp, #40]	; 0x28
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	f894 b018 	ldrb.w	fp, [r4, #24]
 800654c:	3307      	adds	r3, #7
 800654e:	f023 0307 	bic.w	r3, r3, #7
 8006552:	f103 0208 	add.w	r2, r3, #8
 8006556:	f8c8 2000 	str.w	r2, [r8]
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006562:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006566:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800656a:	9307      	str	r3, [sp, #28]
 800656c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006570:	ee08 0a10 	vmov	s16, r0
 8006574:	4b9f      	ldr	r3, [pc, #636]	; (80067f4 <_printf_float+0x2dc>)
 8006576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	f7fa fad5 	bl	8000b2c <__aeabi_dcmpun>
 8006582:	bb88      	cbnz	r0, 80065e8 <_printf_float+0xd0>
 8006584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006588:	4b9a      	ldr	r3, [pc, #616]	; (80067f4 <_printf_float+0x2dc>)
 800658a:	f04f 32ff 	mov.w	r2, #4294967295
 800658e:	f7fa faaf 	bl	8000af0 <__aeabi_dcmple>
 8006592:	bb48      	cbnz	r0, 80065e8 <_printf_float+0xd0>
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7fa fa9e 	bl	8000adc <__aeabi_dcmplt>
 80065a0:	b110      	cbz	r0, 80065a8 <_printf_float+0x90>
 80065a2:	232d      	movs	r3, #45	; 0x2d
 80065a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a8:	4b93      	ldr	r3, [pc, #588]	; (80067f8 <_printf_float+0x2e0>)
 80065aa:	4894      	ldr	r0, [pc, #592]	; (80067fc <_printf_float+0x2e4>)
 80065ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80065b0:	bf94      	ite	ls
 80065b2:	4698      	movls	r8, r3
 80065b4:	4680      	movhi	r8, r0
 80065b6:	2303      	movs	r3, #3
 80065b8:	6123      	str	r3, [r4, #16]
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	f023 0204 	bic.w	r2, r3, #4
 80065c0:	6022      	str	r2, [r4, #0]
 80065c2:	f04f 0900 	mov.w	r9, #0
 80065c6:	9700      	str	r7, [sp, #0]
 80065c8:	4633      	mov	r3, r6
 80065ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80065cc:	4621      	mov	r1, r4
 80065ce:	4628      	mov	r0, r5
 80065d0:	f000 f9d8 	bl	8006984 <_printf_common>
 80065d4:	3001      	adds	r0, #1
 80065d6:	f040 8090 	bne.w	80066fa <_printf_float+0x1e2>
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	b00d      	add	sp, #52	; 0x34
 80065e0:	ecbd 8b02 	vpop	{d8}
 80065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e8:	4642      	mov	r2, r8
 80065ea:	464b      	mov	r3, r9
 80065ec:	4640      	mov	r0, r8
 80065ee:	4649      	mov	r1, r9
 80065f0:	f7fa fa9c 	bl	8000b2c <__aeabi_dcmpun>
 80065f4:	b140      	cbz	r0, 8006608 <_printf_float+0xf0>
 80065f6:	464b      	mov	r3, r9
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	bfbc      	itt	lt
 80065fc:	232d      	movlt	r3, #45	; 0x2d
 80065fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006602:	487f      	ldr	r0, [pc, #508]	; (8006800 <_printf_float+0x2e8>)
 8006604:	4b7f      	ldr	r3, [pc, #508]	; (8006804 <_printf_float+0x2ec>)
 8006606:	e7d1      	b.n	80065ac <_printf_float+0x94>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800660e:	9206      	str	r2, [sp, #24]
 8006610:	1c5a      	adds	r2, r3, #1
 8006612:	d13f      	bne.n	8006694 <_printf_float+0x17c>
 8006614:	2306      	movs	r3, #6
 8006616:	6063      	str	r3, [r4, #4]
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	6861      	ldr	r1, [r4, #4]
 800661c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006620:	2300      	movs	r3, #0
 8006622:	9303      	str	r3, [sp, #12]
 8006624:	ab0a      	add	r3, sp, #40	; 0x28
 8006626:	e9cd b301 	strd	fp, r3, [sp, #4]
 800662a:	ab09      	add	r3, sp, #36	; 0x24
 800662c:	ec49 8b10 	vmov	d0, r8, r9
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff fecd 	bl	80063d8 <__cvt>
 800663e:	9b06      	ldr	r3, [sp, #24]
 8006640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006642:	2b47      	cmp	r3, #71	; 0x47
 8006644:	4680      	mov	r8, r0
 8006646:	d108      	bne.n	800665a <_printf_float+0x142>
 8006648:	1cc8      	adds	r0, r1, #3
 800664a:	db02      	blt.n	8006652 <_printf_float+0x13a>
 800664c:	6863      	ldr	r3, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	dd41      	ble.n	80066d6 <_printf_float+0x1be>
 8006652:	f1ab 0b02 	sub.w	fp, fp, #2
 8006656:	fa5f fb8b 	uxtb.w	fp, fp
 800665a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800665e:	d820      	bhi.n	80066a2 <_printf_float+0x18a>
 8006660:	3901      	subs	r1, #1
 8006662:	465a      	mov	r2, fp
 8006664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006668:	9109      	str	r1, [sp, #36]	; 0x24
 800666a:	f7ff ff17 	bl	800649c <__exponent>
 800666e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006670:	1813      	adds	r3, r2, r0
 8006672:	2a01      	cmp	r2, #1
 8006674:	4681      	mov	r9, r0
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	dc02      	bgt.n	8006680 <_printf_float+0x168>
 800667a:	6822      	ldr	r2, [r4, #0]
 800667c:	07d2      	lsls	r2, r2, #31
 800667e:	d501      	bpl.n	8006684 <_printf_float+0x16c>
 8006680:	3301      	adds	r3, #1
 8006682:	6123      	str	r3, [r4, #16]
 8006684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006688:	2b00      	cmp	r3, #0
 800668a:	d09c      	beq.n	80065c6 <_printf_float+0xae>
 800668c:	232d      	movs	r3, #45	; 0x2d
 800668e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006692:	e798      	b.n	80065c6 <_printf_float+0xae>
 8006694:	9a06      	ldr	r2, [sp, #24]
 8006696:	2a47      	cmp	r2, #71	; 0x47
 8006698:	d1be      	bne.n	8006618 <_printf_float+0x100>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1bc      	bne.n	8006618 <_printf_float+0x100>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7b9      	b.n	8006616 <_printf_float+0xfe>
 80066a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80066a6:	d118      	bne.n	80066da <_printf_float+0x1c2>
 80066a8:	2900      	cmp	r1, #0
 80066aa:	6863      	ldr	r3, [r4, #4]
 80066ac:	dd0b      	ble.n	80066c6 <_printf_float+0x1ae>
 80066ae:	6121      	str	r1, [r4, #16]
 80066b0:	b913      	cbnz	r3, 80066b8 <_printf_float+0x1a0>
 80066b2:	6822      	ldr	r2, [r4, #0]
 80066b4:	07d0      	lsls	r0, r2, #31
 80066b6:	d502      	bpl.n	80066be <_printf_float+0x1a6>
 80066b8:	3301      	adds	r3, #1
 80066ba:	440b      	add	r3, r1
 80066bc:	6123      	str	r3, [r4, #16]
 80066be:	65a1      	str	r1, [r4, #88]	; 0x58
 80066c0:	f04f 0900 	mov.w	r9, #0
 80066c4:	e7de      	b.n	8006684 <_printf_float+0x16c>
 80066c6:	b913      	cbnz	r3, 80066ce <_printf_float+0x1b6>
 80066c8:	6822      	ldr	r2, [r4, #0]
 80066ca:	07d2      	lsls	r2, r2, #31
 80066cc:	d501      	bpl.n	80066d2 <_printf_float+0x1ba>
 80066ce:	3302      	adds	r3, #2
 80066d0:	e7f4      	b.n	80066bc <_printf_float+0x1a4>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7f2      	b.n	80066bc <_printf_float+0x1a4>
 80066d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80066da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066dc:	4299      	cmp	r1, r3
 80066de:	db05      	blt.n	80066ec <_printf_float+0x1d4>
 80066e0:	6823      	ldr	r3, [r4, #0]
 80066e2:	6121      	str	r1, [r4, #16]
 80066e4:	07d8      	lsls	r0, r3, #31
 80066e6:	d5ea      	bpl.n	80066be <_printf_float+0x1a6>
 80066e8:	1c4b      	adds	r3, r1, #1
 80066ea:	e7e7      	b.n	80066bc <_printf_float+0x1a4>
 80066ec:	2900      	cmp	r1, #0
 80066ee:	bfd4      	ite	le
 80066f0:	f1c1 0202 	rsble	r2, r1, #2
 80066f4:	2201      	movgt	r2, #1
 80066f6:	4413      	add	r3, r2
 80066f8:	e7e0      	b.n	80066bc <_printf_float+0x1a4>
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	055a      	lsls	r2, r3, #21
 80066fe:	d407      	bmi.n	8006710 <_printf_float+0x1f8>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	4642      	mov	r2, r8
 8006704:	4631      	mov	r1, r6
 8006706:	4628      	mov	r0, r5
 8006708:	47b8      	blx	r7
 800670a:	3001      	adds	r0, #1
 800670c:	d12c      	bne.n	8006768 <_printf_float+0x250>
 800670e:	e764      	b.n	80065da <_printf_float+0xc2>
 8006710:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006714:	f240 80e0 	bls.w	80068d8 <_printf_float+0x3c0>
 8006718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	f7fa f9d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006724:	2800      	cmp	r0, #0
 8006726:	d034      	beq.n	8006792 <_printf_float+0x27a>
 8006728:	4a37      	ldr	r2, [pc, #220]	; (8006808 <_printf_float+0x2f0>)
 800672a:	2301      	movs	r3, #1
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af51 	beq.w	80065da <_printf_float+0xc2>
 8006738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800673c:	429a      	cmp	r2, r3
 800673e:	db02      	blt.n	8006746 <_printf_float+0x22e>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07d8      	lsls	r0, r3, #31
 8006744:	d510      	bpl.n	8006768 <_printf_float+0x250>
 8006746:	ee18 3a10 	vmov	r3, s16
 800674a:	4652      	mov	r2, sl
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af41 	beq.w	80065da <_printf_float+0xc2>
 8006758:	f04f 0800 	mov.w	r8, #0
 800675c:	f104 091a 	add.w	r9, r4, #26
 8006760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006762:	3b01      	subs	r3, #1
 8006764:	4543      	cmp	r3, r8
 8006766:	dc09      	bgt.n	800677c <_printf_float+0x264>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	079b      	lsls	r3, r3, #30
 800676c:	f100 8105 	bmi.w	800697a <_printf_float+0x462>
 8006770:	68e0      	ldr	r0, [r4, #12]
 8006772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006774:	4298      	cmp	r0, r3
 8006776:	bfb8      	it	lt
 8006778:	4618      	movlt	r0, r3
 800677a:	e730      	b.n	80065de <_printf_float+0xc6>
 800677c:	2301      	movs	r3, #1
 800677e:	464a      	mov	r2, r9
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	f43f af27 	beq.w	80065da <_printf_float+0xc2>
 800678c:	f108 0801 	add.w	r8, r8, #1
 8006790:	e7e6      	b.n	8006760 <_printf_float+0x248>
 8006792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc39      	bgt.n	800680c <_printf_float+0x2f4>
 8006798:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <_printf_float+0x2f0>)
 800679a:	2301      	movs	r3, #1
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f af19 	beq.w	80065da <_printf_float+0xc2>
 80067a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d102      	bne.n	80067b6 <_printf_float+0x29e>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d5d8      	bpl.n	8006768 <_printf_float+0x250>
 80067b6:	ee18 3a10 	vmov	r3, s16
 80067ba:	4652      	mov	r2, sl
 80067bc:	4631      	mov	r1, r6
 80067be:	4628      	mov	r0, r5
 80067c0:	47b8      	blx	r7
 80067c2:	3001      	adds	r0, #1
 80067c4:	f43f af09 	beq.w	80065da <_printf_float+0xc2>
 80067c8:	f04f 0900 	mov.w	r9, #0
 80067cc:	f104 0a1a 	add.w	sl, r4, #26
 80067d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d2:	425b      	negs	r3, r3
 80067d4:	454b      	cmp	r3, r9
 80067d6:	dc01      	bgt.n	80067dc <_printf_float+0x2c4>
 80067d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067da:	e792      	b.n	8006702 <_printf_float+0x1ea>
 80067dc:	2301      	movs	r3, #1
 80067de:	4652      	mov	r2, sl
 80067e0:	4631      	mov	r1, r6
 80067e2:	4628      	mov	r0, r5
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	f43f aef7 	beq.w	80065da <_printf_float+0xc2>
 80067ec:	f109 0901 	add.w	r9, r9, #1
 80067f0:	e7ee      	b.n	80067d0 <_printf_float+0x2b8>
 80067f2:	bf00      	nop
 80067f4:	7fefffff 	.word	0x7fefffff
 80067f8:	0800cc14 	.word	0x0800cc14
 80067fc:	0800cc18 	.word	0x0800cc18
 8006800:	0800cc20 	.word	0x0800cc20
 8006804:	0800cc1c 	.word	0x0800cc1c
 8006808:	0800cc24 	.word	0x0800cc24
 800680c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800680e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006810:	429a      	cmp	r2, r3
 8006812:	bfa8      	it	ge
 8006814:	461a      	movge	r2, r3
 8006816:	2a00      	cmp	r2, #0
 8006818:	4691      	mov	r9, r2
 800681a:	dc37      	bgt.n	800688c <_printf_float+0x374>
 800681c:	f04f 0b00 	mov.w	fp, #0
 8006820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006824:	f104 021a 	add.w	r2, r4, #26
 8006828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	eba3 0309 	sub.w	r3, r3, r9
 8006830:	455b      	cmp	r3, fp
 8006832:	dc33      	bgt.n	800689c <_printf_float+0x384>
 8006834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006838:	429a      	cmp	r2, r3
 800683a:	db3b      	blt.n	80068b4 <_printf_float+0x39c>
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	07da      	lsls	r2, r3, #31
 8006840:	d438      	bmi.n	80068b4 <_printf_float+0x39c>
 8006842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006844:	9a05      	ldr	r2, [sp, #20]
 8006846:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006848:	1a9a      	subs	r2, r3, r2
 800684a:	eba3 0901 	sub.w	r9, r3, r1
 800684e:	4591      	cmp	r9, r2
 8006850:	bfa8      	it	ge
 8006852:	4691      	movge	r9, r2
 8006854:	f1b9 0f00 	cmp.w	r9, #0
 8006858:	dc35      	bgt.n	80068c6 <_printf_float+0x3ae>
 800685a:	f04f 0800 	mov.w	r8, #0
 800685e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006862:	f104 0a1a 	add.w	sl, r4, #26
 8006866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800686a:	1a9b      	subs	r3, r3, r2
 800686c:	eba3 0309 	sub.w	r3, r3, r9
 8006870:	4543      	cmp	r3, r8
 8006872:	f77f af79 	ble.w	8006768 <_printf_float+0x250>
 8006876:	2301      	movs	r3, #1
 8006878:	4652      	mov	r2, sl
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f aeaa 	beq.w	80065da <_printf_float+0xc2>
 8006886:	f108 0801 	add.w	r8, r8, #1
 800688a:	e7ec      	b.n	8006866 <_printf_float+0x34e>
 800688c:	4613      	mov	r3, r2
 800688e:	4631      	mov	r1, r6
 8006890:	4642      	mov	r2, r8
 8006892:	4628      	mov	r0, r5
 8006894:	47b8      	blx	r7
 8006896:	3001      	adds	r0, #1
 8006898:	d1c0      	bne.n	800681c <_printf_float+0x304>
 800689a:	e69e      	b.n	80065da <_printf_float+0xc2>
 800689c:	2301      	movs	r3, #1
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	9205      	str	r2, [sp, #20]
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f ae97 	beq.w	80065da <_printf_float+0xc2>
 80068ac:	9a05      	ldr	r2, [sp, #20]
 80068ae:	f10b 0b01 	add.w	fp, fp, #1
 80068b2:	e7b9      	b.n	8006828 <_printf_float+0x310>
 80068b4:	ee18 3a10 	vmov	r3, s16
 80068b8:	4652      	mov	r2, sl
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	d1be      	bne.n	8006842 <_printf_float+0x32a>
 80068c4:	e689      	b.n	80065da <_printf_float+0xc2>
 80068c6:	9a05      	ldr	r2, [sp, #20]
 80068c8:	464b      	mov	r3, r9
 80068ca:	4442      	add	r2, r8
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	d1c1      	bne.n	800685a <_printf_float+0x342>
 80068d6:	e680      	b.n	80065da <_printf_float+0xc2>
 80068d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068da:	2a01      	cmp	r2, #1
 80068dc:	dc01      	bgt.n	80068e2 <_printf_float+0x3ca>
 80068de:	07db      	lsls	r3, r3, #31
 80068e0:	d538      	bpl.n	8006954 <_printf_float+0x43c>
 80068e2:	2301      	movs	r3, #1
 80068e4:	4642      	mov	r2, r8
 80068e6:	4631      	mov	r1, r6
 80068e8:	4628      	mov	r0, r5
 80068ea:	47b8      	blx	r7
 80068ec:	3001      	adds	r0, #1
 80068ee:	f43f ae74 	beq.w	80065da <_printf_float+0xc2>
 80068f2:	ee18 3a10 	vmov	r3, s16
 80068f6:	4652      	mov	r2, sl
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	47b8      	blx	r7
 80068fe:	3001      	adds	r0, #1
 8006900:	f43f ae6b 	beq.w	80065da <_printf_float+0xc2>
 8006904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006908:	2200      	movs	r2, #0
 800690a:	2300      	movs	r3, #0
 800690c:	f7fa f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006910:	b9d8      	cbnz	r0, 800694a <_printf_float+0x432>
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	f108 0201 	add.w	r2, r8, #1
 8006918:	3b01      	subs	r3, #1
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	d10e      	bne.n	8006942 <_printf_float+0x42a>
 8006924:	e659      	b.n	80065da <_printf_float+0xc2>
 8006926:	2301      	movs	r3, #1
 8006928:	4652      	mov	r2, sl
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f ae52 	beq.w	80065da <_printf_float+0xc2>
 8006936:	f108 0801 	add.w	r8, r8, #1
 800693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800693c:	3b01      	subs	r3, #1
 800693e:	4543      	cmp	r3, r8
 8006940:	dcf1      	bgt.n	8006926 <_printf_float+0x40e>
 8006942:	464b      	mov	r3, r9
 8006944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006948:	e6dc      	b.n	8006704 <_printf_float+0x1ec>
 800694a:	f04f 0800 	mov.w	r8, #0
 800694e:	f104 0a1a 	add.w	sl, r4, #26
 8006952:	e7f2      	b.n	800693a <_printf_float+0x422>
 8006954:	2301      	movs	r3, #1
 8006956:	4642      	mov	r2, r8
 8006958:	e7df      	b.n	800691a <_printf_float+0x402>
 800695a:	2301      	movs	r3, #1
 800695c:	464a      	mov	r2, r9
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae38 	beq.w	80065da <_printf_float+0xc2>
 800696a:	f108 0801 	add.w	r8, r8, #1
 800696e:	68e3      	ldr	r3, [r4, #12]
 8006970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006972:	1a5b      	subs	r3, r3, r1
 8006974:	4543      	cmp	r3, r8
 8006976:	dcf0      	bgt.n	800695a <_printf_float+0x442>
 8006978:	e6fa      	b.n	8006770 <_printf_float+0x258>
 800697a:	f04f 0800 	mov.w	r8, #0
 800697e:	f104 0919 	add.w	r9, r4, #25
 8006982:	e7f4      	b.n	800696e <_printf_float+0x456>

08006984 <_printf_common>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	4616      	mov	r6, r2
 800698a:	4699      	mov	r9, r3
 800698c:	688a      	ldr	r2, [r1, #8]
 800698e:	690b      	ldr	r3, [r1, #16]
 8006990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006994:	4293      	cmp	r3, r2
 8006996:	bfb8      	it	lt
 8006998:	4613      	movlt	r3, r2
 800699a:	6033      	str	r3, [r6, #0]
 800699c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a0:	4607      	mov	r7, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b10a      	cbz	r2, 80069aa <_printf_common+0x26>
 80069a6:	3301      	adds	r3, #1
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	0699      	lsls	r1, r3, #26
 80069ae:	bf42      	ittt	mi
 80069b0:	6833      	ldrmi	r3, [r6, #0]
 80069b2:	3302      	addmi	r3, #2
 80069b4:	6033      	strmi	r3, [r6, #0]
 80069b6:	6825      	ldr	r5, [r4, #0]
 80069b8:	f015 0506 	ands.w	r5, r5, #6
 80069bc:	d106      	bne.n	80069cc <_printf_common+0x48>
 80069be:	f104 0a19 	add.w	sl, r4, #25
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	6832      	ldr	r2, [r6, #0]
 80069c6:	1a9b      	subs	r3, r3, r2
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dc26      	bgt.n	8006a1a <_printf_common+0x96>
 80069cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d0:	1e13      	subs	r3, r2, #0
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	bf18      	it	ne
 80069d6:	2301      	movne	r3, #1
 80069d8:	0692      	lsls	r2, r2, #26
 80069da:	d42b      	bmi.n	8006a34 <_printf_common+0xb0>
 80069dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e0:	4649      	mov	r1, r9
 80069e2:	4638      	mov	r0, r7
 80069e4:	47c0      	blx	r8
 80069e6:	3001      	adds	r0, #1
 80069e8:	d01e      	beq.n	8006a28 <_printf_common+0xa4>
 80069ea:	6823      	ldr	r3, [r4, #0]
 80069ec:	68e5      	ldr	r5, [r4, #12]
 80069ee:	6832      	ldr	r2, [r6, #0]
 80069f0:	f003 0306 	and.w	r3, r3, #6
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	bf08      	it	eq
 80069f8:	1aad      	subeq	r5, r5, r2
 80069fa:	68a3      	ldr	r3, [r4, #8]
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	bf0c      	ite	eq
 8006a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a04:	2500      	movne	r5, #0
 8006a06:	4293      	cmp	r3, r2
 8006a08:	bfc4      	itt	gt
 8006a0a:	1a9b      	subgt	r3, r3, r2
 8006a0c:	18ed      	addgt	r5, r5, r3
 8006a0e:	2600      	movs	r6, #0
 8006a10:	341a      	adds	r4, #26
 8006a12:	42b5      	cmp	r5, r6
 8006a14:	d11a      	bne.n	8006a4c <_printf_common+0xc8>
 8006a16:	2000      	movs	r0, #0
 8006a18:	e008      	b.n	8006a2c <_printf_common+0xa8>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	4652      	mov	r2, sl
 8006a1e:	4649      	mov	r1, r9
 8006a20:	4638      	mov	r0, r7
 8006a22:	47c0      	blx	r8
 8006a24:	3001      	adds	r0, #1
 8006a26:	d103      	bne.n	8006a30 <_printf_common+0xac>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a30:	3501      	adds	r5, #1
 8006a32:	e7c6      	b.n	80069c2 <_printf_common+0x3e>
 8006a34:	18e1      	adds	r1, r4, r3
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	2030      	movs	r0, #48	; 0x30
 8006a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a3e:	4422      	add	r2, r4
 8006a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a48:	3302      	adds	r3, #2
 8006a4a:	e7c7      	b.n	80069dc <_printf_common+0x58>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4649      	mov	r1, r9
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c0      	blx	r8
 8006a56:	3001      	adds	r0, #1
 8006a58:	d0e6      	beq.n	8006a28 <_printf_common+0xa4>
 8006a5a:	3601      	adds	r6, #1
 8006a5c:	e7d9      	b.n	8006a12 <_printf_common+0x8e>
	...

08006a60 <_printf_i>:
 8006a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a64:	7e0f      	ldrb	r7, [r1, #24]
 8006a66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a68:	2f78      	cmp	r7, #120	; 0x78
 8006a6a:	4691      	mov	r9, r2
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	469a      	mov	sl, r3
 8006a72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a76:	d807      	bhi.n	8006a88 <_printf_i+0x28>
 8006a78:	2f62      	cmp	r7, #98	; 0x62
 8006a7a:	d80a      	bhi.n	8006a92 <_printf_i+0x32>
 8006a7c:	2f00      	cmp	r7, #0
 8006a7e:	f000 80d8 	beq.w	8006c32 <_printf_i+0x1d2>
 8006a82:	2f58      	cmp	r7, #88	; 0x58
 8006a84:	f000 80a3 	beq.w	8006bce <_printf_i+0x16e>
 8006a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a90:	e03a      	b.n	8006b08 <_printf_i+0xa8>
 8006a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a96:	2b15      	cmp	r3, #21
 8006a98:	d8f6      	bhi.n	8006a88 <_printf_i+0x28>
 8006a9a:	a101      	add	r1, pc, #4	; (adr r1, 8006aa0 <_printf_i+0x40>)
 8006a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa0:	08006af9 	.word	0x08006af9
 8006aa4:	08006b0d 	.word	0x08006b0d
 8006aa8:	08006a89 	.word	0x08006a89
 8006aac:	08006a89 	.word	0x08006a89
 8006ab0:	08006a89 	.word	0x08006a89
 8006ab4:	08006a89 	.word	0x08006a89
 8006ab8:	08006b0d 	.word	0x08006b0d
 8006abc:	08006a89 	.word	0x08006a89
 8006ac0:	08006a89 	.word	0x08006a89
 8006ac4:	08006a89 	.word	0x08006a89
 8006ac8:	08006a89 	.word	0x08006a89
 8006acc:	08006c19 	.word	0x08006c19
 8006ad0:	08006b3d 	.word	0x08006b3d
 8006ad4:	08006bfb 	.word	0x08006bfb
 8006ad8:	08006a89 	.word	0x08006a89
 8006adc:	08006a89 	.word	0x08006a89
 8006ae0:	08006c3b 	.word	0x08006c3b
 8006ae4:	08006a89 	.word	0x08006a89
 8006ae8:	08006b3d 	.word	0x08006b3d
 8006aec:	08006a89 	.word	0x08006a89
 8006af0:	08006a89 	.word	0x08006a89
 8006af4:	08006c03 	.word	0x08006c03
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	1d1a      	adds	r2, r3, #4
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	602a      	str	r2, [r5, #0]
 8006b00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e0a3      	b.n	8006c54 <_printf_i+0x1f4>
 8006b0c:	6820      	ldr	r0, [r4, #0]
 8006b0e:	6829      	ldr	r1, [r5, #0]
 8006b10:	0606      	lsls	r6, r0, #24
 8006b12:	f101 0304 	add.w	r3, r1, #4
 8006b16:	d50a      	bpl.n	8006b2e <_printf_i+0xce>
 8006b18:	680e      	ldr	r6, [r1, #0]
 8006b1a:	602b      	str	r3, [r5, #0]
 8006b1c:	2e00      	cmp	r6, #0
 8006b1e:	da03      	bge.n	8006b28 <_printf_i+0xc8>
 8006b20:	232d      	movs	r3, #45	; 0x2d
 8006b22:	4276      	negs	r6, r6
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b28:	485e      	ldr	r0, [pc, #376]	; (8006ca4 <_printf_i+0x244>)
 8006b2a:	230a      	movs	r3, #10
 8006b2c:	e019      	b.n	8006b62 <_printf_i+0x102>
 8006b2e:	680e      	ldr	r6, [r1, #0]
 8006b30:	602b      	str	r3, [r5, #0]
 8006b32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b36:	bf18      	it	ne
 8006b38:	b236      	sxthne	r6, r6
 8006b3a:	e7ef      	b.n	8006b1c <_printf_i+0xbc>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1d19      	adds	r1, r3, #4
 8006b42:	6029      	str	r1, [r5, #0]
 8006b44:	0601      	lsls	r1, r0, #24
 8006b46:	d501      	bpl.n	8006b4c <_printf_i+0xec>
 8006b48:	681e      	ldr	r6, [r3, #0]
 8006b4a:	e002      	b.n	8006b52 <_printf_i+0xf2>
 8006b4c:	0646      	lsls	r6, r0, #25
 8006b4e:	d5fb      	bpl.n	8006b48 <_printf_i+0xe8>
 8006b50:	881e      	ldrh	r6, [r3, #0]
 8006b52:	4854      	ldr	r0, [pc, #336]	; (8006ca4 <_printf_i+0x244>)
 8006b54:	2f6f      	cmp	r7, #111	; 0x6f
 8006b56:	bf0c      	ite	eq
 8006b58:	2308      	moveq	r3, #8
 8006b5a:	230a      	movne	r3, #10
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b62:	6865      	ldr	r5, [r4, #4]
 8006b64:	60a5      	str	r5, [r4, #8]
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	bfa2      	ittt	ge
 8006b6a:	6821      	ldrge	r1, [r4, #0]
 8006b6c:	f021 0104 	bicge.w	r1, r1, #4
 8006b70:	6021      	strge	r1, [r4, #0]
 8006b72:	b90e      	cbnz	r6, 8006b78 <_printf_i+0x118>
 8006b74:	2d00      	cmp	r5, #0
 8006b76:	d04d      	beq.n	8006c14 <_printf_i+0x1b4>
 8006b78:	4615      	mov	r5, r2
 8006b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b82:	5dc7      	ldrb	r7, [r0, r7]
 8006b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b88:	4637      	mov	r7, r6
 8006b8a:	42bb      	cmp	r3, r7
 8006b8c:	460e      	mov	r6, r1
 8006b8e:	d9f4      	bls.n	8006b7a <_printf_i+0x11a>
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d10b      	bne.n	8006bac <_printf_i+0x14c>
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	07de      	lsls	r6, r3, #31
 8006b98:	d508      	bpl.n	8006bac <_printf_i+0x14c>
 8006b9a:	6923      	ldr	r3, [r4, #16]
 8006b9c:	6861      	ldr	r1, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	bfde      	ittt	le
 8006ba2:	2330      	movle	r3, #48	; 0x30
 8006ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bac:	1b52      	subs	r2, r2, r5
 8006bae:	6122      	str	r2, [r4, #16]
 8006bb0:	f8cd a000 	str.w	sl, [sp]
 8006bb4:	464b      	mov	r3, r9
 8006bb6:	aa03      	add	r2, sp, #12
 8006bb8:	4621      	mov	r1, r4
 8006bba:	4640      	mov	r0, r8
 8006bbc:	f7ff fee2 	bl	8006984 <_printf_common>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d14c      	bne.n	8006c5e <_printf_i+0x1fe>
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	b004      	add	sp, #16
 8006bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bce:	4835      	ldr	r0, [pc, #212]	; (8006ca4 <_printf_i+0x244>)
 8006bd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bd4:	6829      	ldr	r1, [r5, #0]
 8006bd6:	6823      	ldr	r3, [r4, #0]
 8006bd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006bdc:	6029      	str	r1, [r5, #0]
 8006bde:	061d      	lsls	r5, r3, #24
 8006be0:	d514      	bpl.n	8006c0c <_printf_i+0x1ac>
 8006be2:	07df      	lsls	r7, r3, #31
 8006be4:	bf44      	itt	mi
 8006be6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bea:	6023      	strmi	r3, [r4, #0]
 8006bec:	b91e      	cbnz	r6, 8006bf6 <_printf_i+0x196>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	f023 0320 	bic.w	r3, r3, #32
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	2310      	movs	r3, #16
 8006bf8:	e7b0      	b.n	8006b5c <_printf_i+0xfc>
 8006bfa:	6823      	ldr	r3, [r4, #0]
 8006bfc:	f043 0320 	orr.w	r3, r3, #32
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	2378      	movs	r3, #120	; 0x78
 8006c04:	4828      	ldr	r0, [pc, #160]	; (8006ca8 <_printf_i+0x248>)
 8006c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c0a:	e7e3      	b.n	8006bd4 <_printf_i+0x174>
 8006c0c:	0659      	lsls	r1, r3, #25
 8006c0e:	bf48      	it	mi
 8006c10:	b2b6      	uxthmi	r6, r6
 8006c12:	e7e6      	b.n	8006be2 <_printf_i+0x182>
 8006c14:	4615      	mov	r5, r2
 8006c16:	e7bb      	b.n	8006b90 <_printf_i+0x130>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	6826      	ldr	r6, [r4, #0]
 8006c1c:	6961      	ldr	r1, [r4, #20]
 8006c1e:	1d18      	adds	r0, r3, #4
 8006c20:	6028      	str	r0, [r5, #0]
 8006c22:	0635      	lsls	r5, r6, #24
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	d501      	bpl.n	8006c2c <_printf_i+0x1cc>
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	e002      	b.n	8006c32 <_printf_i+0x1d2>
 8006c2c:	0670      	lsls	r0, r6, #25
 8006c2e:	d5fb      	bpl.n	8006c28 <_printf_i+0x1c8>
 8006c30:	8019      	strh	r1, [r3, #0]
 8006c32:	2300      	movs	r3, #0
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	4615      	mov	r5, r2
 8006c38:	e7ba      	b.n	8006bb0 <_printf_i+0x150>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	602a      	str	r2, [r5, #0]
 8006c40:	681d      	ldr	r5, [r3, #0]
 8006c42:	6862      	ldr	r2, [r4, #4]
 8006c44:	2100      	movs	r1, #0
 8006c46:	4628      	mov	r0, r5
 8006c48:	f7f9 faca 	bl	80001e0 <memchr>
 8006c4c:	b108      	cbz	r0, 8006c52 <_printf_i+0x1f2>
 8006c4e:	1b40      	subs	r0, r0, r5
 8006c50:	6060      	str	r0, [r4, #4]
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	2300      	movs	r3, #0
 8006c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c5c:	e7a8      	b.n	8006bb0 <_printf_i+0x150>
 8006c5e:	6923      	ldr	r3, [r4, #16]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4649      	mov	r1, r9
 8006c64:	4640      	mov	r0, r8
 8006c66:	47d0      	blx	sl
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d0ab      	beq.n	8006bc4 <_printf_i+0x164>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	079b      	lsls	r3, r3, #30
 8006c70:	d413      	bmi.n	8006c9a <_printf_i+0x23a>
 8006c72:	68e0      	ldr	r0, [r4, #12]
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	4298      	cmp	r0, r3
 8006c78:	bfb8      	it	lt
 8006c7a:	4618      	movlt	r0, r3
 8006c7c:	e7a4      	b.n	8006bc8 <_printf_i+0x168>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	4632      	mov	r2, r6
 8006c82:	4649      	mov	r1, r9
 8006c84:	4640      	mov	r0, r8
 8006c86:	47d0      	blx	sl
 8006c88:	3001      	adds	r0, #1
 8006c8a:	d09b      	beq.n	8006bc4 <_printf_i+0x164>
 8006c8c:	3501      	adds	r5, #1
 8006c8e:	68e3      	ldr	r3, [r4, #12]
 8006c90:	9903      	ldr	r1, [sp, #12]
 8006c92:	1a5b      	subs	r3, r3, r1
 8006c94:	42ab      	cmp	r3, r5
 8006c96:	dcf2      	bgt.n	8006c7e <_printf_i+0x21e>
 8006c98:	e7eb      	b.n	8006c72 <_printf_i+0x212>
 8006c9a:	2500      	movs	r5, #0
 8006c9c:	f104 0619 	add.w	r6, r4, #25
 8006ca0:	e7f5      	b.n	8006c8e <_printf_i+0x22e>
 8006ca2:	bf00      	nop
 8006ca4:	0800cc26 	.word	0x0800cc26
 8006ca8:	0800cc37 	.word	0x0800cc37

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa ff3c 	bl	8001b34 <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	2000a374 	.word	0x2000a374

08006ccc <sniprintf>:
 8006ccc:	b40c      	push	{r2, r3}
 8006cce:	b530      	push	{r4, r5, lr}
 8006cd0:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <sniprintf+0x64>)
 8006cd2:	1e0c      	subs	r4, r1, #0
 8006cd4:	681d      	ldr	r5, [r3, #0]
 8006cd6:	b09d      	sub	sp, #116	; 0x74
 8006cd8:	da08      	bge.n	8006cec <sniprintf+0x20>
 8006cda:	238b      	movs	r3, #139	; 0x8b
 8006cdc:	602b      	str	r3, [r5, #0]
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	b01d      	add	sp, #116	; 0x74
 8006ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ce8:	b002      	add	sp, #8
 8006cea:	4770      	bx	lr
 8006cec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006cf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006cf4:	bf14      	ite	ne
 8006cf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006cfa:	4623      	moveq	r3, r4
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	9307      	str	r3, [sp, #28]
 8006d00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	9006      	str	r0, [sp, #24]
 8006d08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006d0e:	ab21      	add	r3, sp, #132	; 0x84
 8006d10:	a902      	add	r1, sp, #8
 8006d12:	4628      	mov	r0, r5
 8006d14:	9301      	str	r3, [sp, #4]
 8006d16:	f001 fb63 	bl	80083e0 <_svfiprintf_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	bfbc      	itt	lt
 8006d1e:	238b      	movlt	r3, #139	; 0x8b
 8006d20:	602b      	strlt	r3, [r5, #0]
 8006d22:	2c00      	cmp	r4, #0
 8006d24:	d0dd      	beq.n	8006ce2 <sniprintf+0x16>
 8006d26:	9b02      	ldr	r3, [sp, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e7d9      	b.n	8006ce2 <sniprintf+0x16>
 8006d2e:	bf00      	nop
 8006d30:	20000014 	.word	0x20000014

08006d34 <__sread>:
 8006d34:	b510      	push	{r4, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	f001 fc50 	bl	80085e0 <_read_r>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	bfab      	itete	ge
 8006d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d46:	89a3      	ldrhlt	r3, [r4, #12]
 8006d48:	181b      	addge	r3, r3, r0
 8006d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d4e:	bfac      	ite	ge
 8006d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d52:	81a3      	strhlt	r3, [r4, #12]
 8006d54:	bd10      	pop	{r4, pc}

08006d56 <__swrite>:
 8006d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5a:	461f      	mov	r7, r3
 8006d5c:	898b      	ldrh	r3, [r1, #12]
 8006d5e:	05db      	lsls	r3, r3, #23
 8006d60:	4605      	mov	r5, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4616      	mov	r6, r2
 8006d66:	d505      	bpl.n	8006d74 <__swrite+0x1e>
 8006d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f000 ff1a 	bl	8007ba8 <_lseek_r>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	4632      	mov	r2, r6
 8006d82:	463b      	mov	r3, r7
 8006d84:	4628      	mov	r0, r5
 8006d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8a:	f000 b84b 	b.w	8006e24 <_write_r>

08006d8e <__sseek>:
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	460c      	mov	r4, r1
 8006d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d96:	f000 ff07 	bl	8007ba8 <_lseek_r>
 8006d9a:	1c43      	adds	r3, r0, #1
 8006d9c:	89a3      	ldrh	r3, [r4, #12]
 8006d9e:	bf15      	itete	ne
 8006da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006daa:	81a3      	strheq	r3, [r4, #12]
 8006dac:	bf18      	it	ne
 8006dae:	81a3      	strhne	r3, [r4, #12]
 8006db0:	bd10      	pop	{r4, pc}

08006db2 <__sclose>:
 8006db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db6:	f000 b847 	b.w	8006e48 <_close_r>
	...

08006dbc <swprintf>:
 8006dbc:	b40c      	push	{r2, r3}
 8006dbe:	b530      	push	{r4, r5, lr}
 8006dc0:	4b17      	ldr	r3, [pc, #92]	; (8006e20 <swprintf+0x64>)
 8006dc2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006dc6:	681d      	ldr	r5, [r3, #0]
 8006dc8:	b09d      	sub	sp, #116	; 0x74
 8006dca:	460c      	mov	r4, r1
 8006dcc:	d308      	bcc.n	8006de0 <swprintf+0x24>
 8006dce:	238b      	movs	r3, #139	; 0x8b
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	b01d      	add	sp, #116	; 0x74
 8006dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ddc:	b002      	add	sp, #8
 8006dde:	4770      	bx	lr
 8006de0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006de4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006de8:	9002      	str	r0, [sp, #8]
 8006dea:	9006      	str	r0, [sp, #24]
 8006dec:	b1b1      	cbz	r1, 8006e1c <swprintf+0x60>
 8006dee:	1e4b      	subs	r3, r1, #1
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	9307      	str	r3, [sp, #28]
 8006df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006dfa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006dfe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e00:	ab21      	add	r3, sp, #132	; 0x84
 8006e02:	a902      	add	r1, sp, #8
 8006e04:	4628      	mov	r0, r5
 8006e06:	9301      	str	r3, [sp, #4]
 8006e08:	f001 fc6e 	bl	80086e8 <_svfwprintf_r>
 8006e0c:	2c00      	cmp	r4, #0
 8006e0e:	d0de      	beq.n	8006dce <swprintf+0x12>
 8006e10:	9b02      	ldr	r3, [sp, #8]
 8006e12:	2200      	movs	r2, #0
 8006e14:	42a0      	cmp	r0, r4
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	d3dd      	bcc.n	8006dd6 <swprintf+0x1a>
 8006e1a:	e7d8      	b.n	8006dce <swprintf+0x12>
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	e7e8      	b.n	8006df2 <swprintf+0x36>
 8006e20:	20000014 	.word	0x20000014

08006e24 <_write_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	4d07      	ldr	r5, [pc, #28]	; (8006e44 <_write_r+0x20>)
 8006e28:	4604      	mov	r4, r0
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	2200      	movs	r2, #0
 8006e30:	602a      	str	r2, [r5, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f7fa fe2d 	bl	8001a92 <_write>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_write_r+0x1e>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_write_r+0x1e>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	2000a374 	.word	0x2000a374

08006e48 <_close_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d06      	ldr	r5, [pc, #24]	; (8006e64 <_close_r+0x1c>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fa fe39 	bl	8001aca <_close>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_close_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_close_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	2000a374 	.word	0x2000a374

08006e68 <quorem>:
 8006e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	6903      	ldr	r3, [r0, #16]
 8006e6e:	690c      	ldr	r4, [r1, #16]
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	4607      	mov	r7, r0
 8006e74:	f2c0 8081 	blt.w	8006f7a <quorem+0x112>
 8006e78:	3c01      	subs	r4, #1
 8006e7a:	f101 0814 	add.w	r8, r1, #20
 8006e7e:	f100 0514 	add.w	r5, r0, #20
 8006e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e90:	3301      	adds	r3, #1
 8006e92:	429a      	cmp	r2, r3
 8006e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ea0:	d331      	bcc.n	8006f06 <quorem+0x9e>
 8006ea2:	f04f 0e00 	mov.w	lr, #0
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	46ac      	mov	ip, r5
 8006eaa:	46f2      	mov	sl, lr
 8006eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006eb0:	b293      	uxth	r3, r2
 8006eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8006eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8006ec0:	f8dc a000 	ldr.w	sl, [ip]
 8006ec4:	0c12      	lsrs	r2, r2, #16
 8006ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8006eca:	fb06 e202 	mla	r2, r6, r2, lr
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	9b00      	ldr	r3, [sp, #0]
 8006ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ed6:	b292      	uxth	r2, r2
 8006ed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ee4:	4581      	cmp	r9, r0
 8006ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eea:	f84c 3b04 	str.w	r3, [ip], #4
 8006eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ef2:	d2db      	bcs.n	8006eac <quorem+0x44>
 8006ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8006ef8:	b92b      	cbnz	r3, 8006f06 <quorem+0x9e>
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	429d      	cmp	r5, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	d32e      	bcc.n	8006f62 <quorem+0xfa>
 8006f04:	613c      	str	r4, [r7, #16]
 8006f06:	4638      	mov	r0, r7
 8006f08:	f001 f8f6 	bl	80080f8 <__mcmp>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	db24      	blt.n	8006f5a <quorem+0xf2>
 8006f10:	3601      	adds	r6, #1
 8006f12:	4628      	mov	r0, r5
 8006f14:	f04f 0c00 	mov.w	ip, #0
 8006f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8006f20:	b293      	uxth	r3, r2
 8006f22:	ebac 0303 	sub.w	r3, ip, r3
 8006f26:	0c12      	lsrs	r2, r2, #16
 8006f28:	fa13 f38e 	uxtah	r3, r3, lr
 8006f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3a:	45c1      	cmp	r9, r8
 8006f3c:	f840 3b04 	str.w	r3, [r0], #4
 8006f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f44:	d2e8      	bcs.n	8006f18 <quorem+0xb0>
 8006f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f4e:	b922      	cbnz	r2, 8006f5a <quorem+0xf2>
 8006f50:	3b04      	subs	r3, #4
 8006f52:	429d      	cmp	r5, r3
 8006f54:	461a      	mov	r2, r3
 8006f56:	d30a      	bcc.n	8006f6e <quorem+0x106>
 8006f58:	613c      	str	r4, [r7, #16]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	b003      	add	sp, #12
 8006f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f62:	6812      	ldr	r2, [r2, #0]
 8006f64:	3b04      	subs	r3, #4
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	d1cc      	bne.n	8006f04 <quorem+0x9c>
 8006f6a:	3c01      	subs	r4, #1
 8006f6c:	e7c7      	b.n	8006efe <quorem+0x96>
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	d1f0      	bne.n	8006f58 <quorem+0xf0>
 8006f76:	3c01      	subs	r4, #1
 8006f78:	e7eb      	b.n	8006f52 <quorem+0xea>
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	e7ee      	b.n	8006f5c <quorem+0xf4>
	...

08006f80 <_dtoa_r>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	ed2d 8b04 	vpush	{d8-d9}
 8006f88:	ec57 6b10 	vmov	r6, r7, d0
 8006f8c:	b093      	sub	sp, #76	; 0x4c
 8006f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f94:	9106      	str	r1, [sp, #24]
 8006f96:	ee10 aa10 	vmov	sl, s0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8006fa0:	46bb      	mov	fp, r7
 8006fa2:	b975      	cbnz	r5, 8006fc2 <_dtoa_r+0x42>
 8006fa4:	2010      	movs	r0, #16
 8006fa6:	f000 fe11 	bl	8007bcc <malloc>
 8006faa:	4602      	mov	r2, r0
 8006fac:	6260      	str	r0, [r4, #36]	; 0x24
 8006fae:	b920      	cbnz	r0, 8006fba <_dtoa_r+0x3a>
 8006fb0:	4ba7      	ldr	r3, [pc, #668]	; (8007250 <_dtoa_r+0x2d0>)
 8006fb2:	21ea      	movs	r1, #234	; 0xea
 8006fb4:	48a7      	ldr	r0, [pc, #668]	; (8007254 <_dtoa_r+0x2d4>)
 8006fb6:	f002 f929 	bl	800920c <__assert_func>
 8006fba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fbe:	6005      	str	r5, [r0, #0]
 8006fc0:	60c5      	str	r5, [r0, #12]
 8006fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc4:	6819      	ldr	r1, [r3, #0]
 8006fc6:	b151      	cbz	r1, 8006fde <_dtoa_r+0x5e>
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	604a      	str	r2, [r1, #4]
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4093      	lsls	r3, r2
 8006fd0:	608b      	str	r3, [r1, #8]
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	f000 fe4e 	bl	8007c74 <_Bfree>
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	1e3b      	subs	r3, r7, #0
 8006fe0:	bfaa      	itet	ge
 8006fe2:	2300      	movge	r3, #0
 8006fe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006fe8:	f8c8 3000 	strge.w	r3, [r8]
 8006fec:	4b9a      	ldr	r3, [pc, #616]	; (8007258 <_dtoa_r+0x2d8>)
 8006fee:	bfbc      	itt	lt
 8006ff0:	2201      	movlt	r2, #1
 8006ff2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ff6:	ea33 030b 	bics.w	r3, r3, fp
 8006ffa:	d11b      	bne.n	8007034 <_dtoa_r+0xb4>
 8006ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007008:	4333      	orrs	r3, r6
 800700a:	f000 8592 	beq.w	8007b32 <_dtoa_r+0xbb2>
 800700e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007010:	b963      	cbnz	r3, 800702c <_dtoa_r+0xac>
 8007012:	4b92      	ldr	r3, [pc, #584]	; (800725c <_dtoa_r+0x2dc>)
 8007014:	e022      	b.n	800705c <_dtoa_r+0xdc>
 8007016:	4b92      	ldr	r3, [pc, #584]	; (8007260 <_dtoa_r+0x2e0>)
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	3308      	adds	r3, #8
 800701c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	9801      	ldr	r0, [sp, #4]
 8007022:	b013      	add	sp, #76	; 0x4c
 8007024:	ecbd 8b04 	vpop	{d8-d9}
 8007028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702c:	4b8b      	ldr	r3, [pc, #556]	; (800725c <_dtoa_r+0x2dc>)
 800702e:	9301      	str	r3, [sp, #4]
 8007030:	3303      	adds	r3, #3
 8007032:	e7f3      	b.n	800701c <_dtoa_r+0x9c>
 8007034:	2200      	movs	r2, #0
 8007036:	2300      	movs	r3, #0
 8007038:	4650      	mov	r0, sl
 800703a:	4659      	mov	r1, fp
 800703c:	f7f9 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007040:	ec4b ab19 	vmov	d9, sl, fp
 8007044:	4680      	mov	r8, r0
 8007046:	b158      	cbz	r0, 8007060 <_dtoa_r+0xe0>
 8007048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800704a:	2301      	movs	r3, #1
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 856b 	beq.w	8007b2c <_dtoa_r+0xbac>
 8007056:	4883      	ldr	r0, [pc, #524]	; (8007264 <_dtoa_r+0x2e4>)
 8007058:	6018      	str	r0, [r3, #0]
 800705a:	1e43      	subs	r3, r0, #1
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	e7df      	b.n	8007020 <_dtoa_r+0xa0>
 8007060:	ec4b ab10 	vmov	d0, sl, fp
 8007064:	aa10      	add	r2, sp, #64	; 0x40
 8007066:	a911      	add	r1, sp, #68	; 0x44
 8007068:	4620      	mov	r0, r4
 800706a:	f001 f8eb 	bl	8008244 <__d2b>
 800706e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007072:	ee08 0a10 	vmov	s16, r0
 8007076:	2d00      	cmp	r5, #0
 8007078:	f000 8084 	beq.w	8007184 <_dtoa_r+0x204>
 800707c:	ee19 3a90 	vmov	r3, s19
 8007080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007088:	4656      	mov	r6, sl
 800708a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800708e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007096:	4b74      	ldr	r3, [pc, #464]	; (8007268 <_dtoa_r+0x2e8>)
 8007098:	2200      	movs	r2, #0
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 f8f3 	bl	8000288 <__aeabi_dsub>
 80070a2:	a365      	add	r3, pc, #404	; (adr r3, 8007238 <_dtoa_r+0x2b8>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	a364      	add	r3, pc, #400	; (adr r3, 8007240 <_dtoa_r+0x2c0>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f8eb 	bl	800028c <__adddf3>
 80070b6:	4606      	mov	r6, r0
 80070b8:	4628      	mov	r0, r5
 80070ba:	460f      	mov	r7, r1
 80070bc:	f7f9 fa32 	bl	8000524 <__aeabi_i2d>
 80070c0:	a361      	add	r3, pc, #388	; (adr r3, 8007248 <_dtoa_r+0x2c8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fa97 	bl	80005f8 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 f8db 	bl	800028c <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fd3d 	bl	8000b58 <__aeabi_d2iz>
 80070de:	2200      	movs	r2, #0
 80070e0:	9000      	str	r0, [sp, #0]
 80070e2:	2300      	movs	r3, #0
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80070ec:	b150      	cbz	r0, 8007104 <_dtoa_r+0x184>
 80070ee:	9800      	ldr	r0, [sp, #0]
 80070f0:	f7f9 fa18 	bl	8000524 <__aeabi_i2d>
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	f7f9 fce6 	bl	8000ac8 <__aeabi_dcmpeq>
 80070fc:	b910      	cbnz	r0, 8007104 <_dtoa_r+0x184>
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	3b01      	subs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	2b16      	cmp	r3, #22
 8007108:	d85a      	bhi.n	80071c0 <_dtoa_r+0x240>
 800710a:	9a00      	ldr	r2, [sp, #0]
 800710c:	4b57      	ldr	r3, [pc, #348]	; (800726c <_dtoa_r+0x2ec>)
 800710e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	ec51 0b19 	vmov	r0, r1, d9
 800711a:	f7f9 fcdf 	bl	8000adc <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	d050      	beq.n	80071c4 <_dtoa_r+0x244>
 8007122:	9b00      	ldr	r3, [sp, #0]
 8007124:	3b01      	subs	r3, #1
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	2300      	movs	r3, #0
 800712a:	930b      	str	r3, [sp, #44]	; 0x2c
 800712c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800712e:	1b5d      	subs	r5, r3, r5
 8007130:	1e6b      	subs	r3, r5, #1
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	bf45      	ittet	mi
 8007136:	f1c5 0301 	rsbmi	r3, r5, #1
 800713a:	9304      	strmi	r3, [sp, #16]
 800713c:	2300      	movpl	r3, #0
 800713e:	2300      	movmi	r3, #0
 8007140:	bf4c      	ite	mi
 8007142:	9305      	strmi	r3, [sp, #20]
 8007144:	9304      	strpl	r3, [sp, #16]
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	db3d      	blt.n	80071c8 <_dtoa_r+0x248>
 800714c:	9b05      	ldr	r3, [sp, #20]
 800714e:	9a00      	ldr	r2, [sp, #0]
 8007150:	920a      	str	r2, [sp, #40]	; 0x28
 8007152:	4413      	add	r3, r2
 8007154:	9305      	str	r3, [sp, #20]
 8007156:	2300      	movs	r3, #0
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	2b09      	cmp	r3, #9
 800715e:	f200 8089 	bhi.w	8007274 <_dtoa_r+0x2f4>
 8007162:	2b05      	cmp	r3, #5
 8007164:	bfc4      	itt	gt
 8007166:	3b04      	subgt	r3, #4
 8007168:	9306      	strgt	r3, [sp, #24]
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	f1a3 0302 	sub.w	r3, r3, #2
 8007170:	bfcc      	ite	gt
 8007172:	2500      	movgt	r5, #0
 8007174:	2501      	movle	r5, #1
 8007176:	2b03      	cmp	r3, #3
 8007178:	f200 8087 	bhi.w	800728a <_dtoa_r+0x30a>
 800717c:	e8df f003 	tbb	[pc, r3]
 8007180:	59383a2d 	.word	0x59383a2d
 8007184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007188:	441d      	add	r5, r3
 800718a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800718e:	2b20      	cmp	r3, #32
 8007190:	bfc1      	itttt	gt
 8007192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800719a:	fa0b f303 	lslgt.w	r3, fp, r3
 800719e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071a2:	bfda      	itte	le
 80071a4:	f1c3 0320 	rsble	r3, r3, #32
 80071a8:	fa06 f003 	lslle.w	r0, r6, r3
 80071ac:	4318      	orrgt	r0, r3
 80071ae:	f7f9 f9a9 	bl	8000504 <__aeabi_ui2d>
 80071b2:	2301      	movs	r3, #1
 80071b4:	4606      	mov	r6, r0
 80071b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071ba:	3d01      	subs	r5, #1
 80071bc:	930e      	str	r3, [sp, #56]	; 0x38
 80071be:	e76a      	b.n	8007096 <_dtoa_r+0x116>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7b2      	b.n	800712a <_dtoa_r+0x1aa>
 80071c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80071c6:	e7b1      	b.n	800712c <_dtoa_r+0x1ac>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	9a00      	ldr	r2, [sp, #0]
 80071cc:	1a9b      	subs	r3, r3, r2
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	4253      	negs	r3, r2
 80071d2:	9307      	str	r3, [sp, #28]
 80071d4:	2300      	movs	r3, #0
 80071d6:	930a      	str	r3, [sp, #40]	; 0x28
 80071d8:	e7bf      	b.n	800715a <_dtoa_r+0x1da>
 80071da:	2300      	movs	r3, #0
 80071dc:	9308      	str	r3, [sp, #32]
 80071de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dc55      	bgt.n	8007290 <_dtoa_r+0x310>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071ea:	461a      	mov	r2, r3
 80071ec:	9209      	str	r2, [sp, #36]	; 0x24
 80071ee:	e00c      	b.n	800720a <_dtoa_r+0x28a>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e7f3      	b.n	80071dc <_dtoa_r+0x25c>
 80071f4:	2300      	movs	r3, #0
 80071f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071f8:	9308      	str	r3, [sp, #32]
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	4413      	add	r3, r2
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	3301      	adds	r3, #1
 8007202:	2b01      	cmp	r3, #1
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	bfb8      	it	lt
 8007208:	2301      	movlt	r3, #1
 800720a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800720c:	2200      	movs	r2, #0
 800720e:	6042      	str	r2, [r0, #4]
 8007210:	2204      	movs	r2, #4
 8007212:	f102 0614 	add.w	r6, r2, #20
 8007216:	429e      	cmp	r6, r3
 8007218:	6841      	ldr	r1, [r0, #4]
 800721a:	d93d      	bls.n	8007298 <_dtoa_r+0x318>
 800721c:	4620      	mov	r0, r4
 800721e:	f000 fce9 	bl	8007bf4 <_Balloc>
 8007222:	9001      	str	r0, [sp, #4]
 8007224:	2800      	cmp	r0, #0
 8007226:	d13b      	bne.n	80072a0 <_dtoa_r+0x320>
 8007228:	4b11      	ldr	r3, [pc, #68]	; (8007270 <_dtoa_r+0x2f0>)
 800722a:	4602      	mov	r2, r0
 800722c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007230:	e6c0      	b.n	8006fb4 <_dtoa_r+0x34>
 8007232:	2301      	movs	r3, #1
 8007234:	e7df      	b.n	80071f6 <_dtoa_r+0x276>
 8007236:	bf00      	nop
 8007238:	636f4361 	.word	0x636f4361
 800723c:	3fd287a7 	.word	0x3fd287a7
 8007240:	8b60c8b3 	.word	0x8b60c8b3
 8007244:	3fc68a28 	.word	0x3fc68a28
 8007248:	509f79fb 	.word	0x509f79fb
 800724c:	3fd34413 	.word	0x3fd34413
 8007250:	0800cc55 	.word	0x0800cc55
 8007254:	0800cc6c 	.word	0x0800cc6c
 8007258:	7ff00000 	.word	0x7ff00000
 800725c:	0800cc51 	.word	0x0800cc51
 8007260:	0800cc48 	.word	0x0800cc48
 8007264:	0800cc25 	.word	0x0800cc25
 8007268:	3ff80000 	.word	0x3ff80000
 800726c:	0800cd60 	.word	0x0800cd60
 8007270:	0800ccc7 	.word	0x0800ccc7
 8007274:	2501      	movs	r5, #1
 8007276:	2300      	movs	r3, #0
 8007278:	9306      	str	r3, [sp, #24]
 800727a:	9508      	str	r5, [sp, #32]
 800727c:	f04f 33ff 	mov.w	r3, #4294967295
 8007280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007284:	2200      	movs	r2, #0
 8007286:	2312      	movs	r3, #18
 8007288:	e7b0      	b.n	80071ec <_dtoa_r+0x26c>
 800728a:	2301      	movs	r3, #1
 800728c:	9308      	str	r3, [sp, #32]
 800728e:	e7f5      	b.n	800727c <_dtoa_r+0x2fc>
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007296:	e7b8      	b.n	800720a <_dtoa_r+0x28a>
 8007298:	3101      	adds	r1, #1
 800729a:	6041      	str	r1, [r0, #4]
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	e7b8      	b.n	8007212 <_dtoa_r+0x292>
 80072a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a2:	9a01      	ldr	r2, [sp, #4]
 80072a4:	601a      	str	r2, [r3, #0]
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	2b0e      	cmp	r3, #14
 80072aa:	f200 809d 	bhi.w	80073e8 <_dtoa_r+0x468>
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	f000 809a 	beq.w	80073e8 <_dtoa_r+0x468>
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd32      	ble.n	8007320 <_dtoa_r+0x3a0>
 80072ba:	4ab7      	ldr	r2, [pc, #732]	; (8007598 <_dtoa_r+0x618>)
 80072bc:	f003 030f 	and.w	r3, r3, #15
 80072c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072c8:	9b00      	ldr	r3, [sp, #0]
 80072ca:	05d8      	lsls	r0, r3, #23
 80072cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80072d0:	d516      	bpl.n	8007300 <_dtoa_r+0x380>
 80072d2:	4bb2      	ldr	r3, [pc, #712]	; (800759c <_dtoa_r+0x61c>)
 80072d4:	ec51 0b19 	vmov	r0, r1, d9
 80072d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072dc:	f7f9 fab6 	bl	800084c <__aeabi_ddiv>
 80072e0:	f007 070f 	and.w	r7, r7, #15
 80072e4:	4682      	mov	sl, r0
 80072e6:	468b      	mov	fp, r1
 80072e8:	2503      	movs	r5, #3
 80072ea:	4eac      	ldr	r6, [pc, #688]	; (800759c <_dtoa_r+0x61c>)
 80072ec:	b957      	cbnz	r7, 8007304 <_dtoa_r+0x384>
 80072ee:	4642      	mov	r2, r8
 80072f0:	464b      	mov	r3, r9
 80072f2:	4650      	mov	r0, sl
 80072f4:	4659      	mov	r1, fp
 80072f6:	f7f9 faa9 	bl	800084c <__aeabi_ddiv>
 80072fa:	4682      	mov	sl, r0
 80072fc:	468b      	mov	fp, r1
 80072fe:	e028      	b.n	8007352 <_dtoa_r+0x3d2>
 8007300:	2502      	movs	r5, #2
 8007302:	e7f2      	b.n	80072ea <_dtoa_r+0x36a>
 8007304:	07f9      	lsls	r1, r7, #31
 8007306:	d508      	bpl.n	800731a <_dtoa_r+0x39a>
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	3501      	adds	r5, #1
 8007316:	4680      	mov	r8, r0
 8007318:	4689      	mov	r9, r1
 800731a:	107f      	asrs	r7, r7, #1
 800731c:	3608      	adds	r6, #8
 800731e:	e7e5      	b.n	80072ec <_dtoa_r+0x36c>
 8007320:	f000 809b 	beq.w	800745a <_dtoa_r+0x4da>
 8007324:	9b00      	ldr	r3, [sp, #0]
 8007326:	4f9d      	ldr	r7, [pc, #628]	; (800759c <_dtoa_r+0x61c>)
 8007328:	425e      	negs	r6, r3
 800732a:	4b9b      	ldr	r3, [pc, #620]	; (8007598 <_dtoa_r+0x618>)
 800732c:	f006 020f 	and.w	r2, r6, #15
 8007330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	ec51 0b19 	vmov	r0, r1, d9
 800733c:	f7f9 f95c 	bl	80005f8 <__aeabi_dmul>
 8007340:	1136      	asrs	r6, r6, #4
 8007342:	4682      	mov	sl, r0
 8007344:	468b      	mov	fp, r1
 8007346:	2300      	movs	r3, #0
 8007348:	2502      	movs	r5, #2
 800734a:	2e00      	cmp	r6, #0
 800734c:	d17a      	bne.n	8007444 <_dtoa_r+0x4c4>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1d3      	bne.n	80072fa <_dtoa_r+0x37a>
 8007352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 8082 	beq.w	800745e <_dtoa_r+0x4de>
 800735a:	4b91      	ldr	r3, [pc, #580]	; (80075a0 <_dtoa_r+0x620>)
 800735c:	2200      	movs	r2, #0
 800735e:	4650      	mov	r0, sl
 8007360:	4659      	mov	r1, fp
 8007362:	f7f9 fbbb 	bl	8000adc <__aeabi_dcmplt>
 8007366:	2800      	cmp	r0, #0
 8007368:	d079      	beq.n	800745e <_dtoa_r+0x4de>
 800736a:	9b03      	ldr	r3, [sp, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d076      	beq.n	800745e <_dtoa_r+0x4de>
 8007370:	9b02      	ldr	r3, [sp, #8]
 8007372:	2b00      	cmp	r3, #0
 8007374:	dd36      	ble.n	80073e4 <_dtoa_r+0x464>
 8007376:	9b00      	ldr	r3, [sp, #0]
 8007378:	4650      	mov	r0, sl
 800737a:	4659      	mov	r1, fp
 800737c:	1e5f      	subs	r7, r3, #1
 800737e:	2200      	movs	r2, #0
 8007380:	4b88      	ldr	r3, [pc, #544]	; (80075a4 <_dtoa_r+0x624>)
 8007382:	f7f9 f939 	bl	80005f8 <__aeabi_dmul>
 8007386:	9e02      	ldr	r6, [sp, #8]
 8007388:	4682      	mov	sl, r0
 800738a:	468b      	mov	fp, r1
 800738c:	3501      	adds	r5, #1
 800738e:	4628      	mov	r0, r5
 8007390:	f7f9 f8c8 	bl	8000524 <__aeabi_i2d>
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	f7f9 f92e 	bl	80005f8 <__aeabi_dmul>
 800739c:	4b82      	ldr	r3, [pc, #520]	; (80075a8 <_dtoa_r+0x628>)
 800739e:	2200      	movs	r2, #0
 80073a0:	f7f8 ff74 	bl	800028c <__adddf3>
 80073a4:	46d0      	mov	r8, sl
 80073a6:	46d9      	mov	r9, fp
 80073a8:	4682      	mov	sl, r0
 80073aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	d158      	bne.n	8007464 <_dtoa_r+0x4e4>
 80073b2:	4b7e      	ldr	r3, [pc, #504]	; (80075ac <_dtoa_r+0x62c>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	f7f8 ff65 	bl	8000288 <__aeabi_dsub>
 80073be:	4652      	mov	r2, sl
 80073c0:	465b      	mov	r3, fp
 80073c2:	4680      	mov	r8, r0
 80073c4:	4689      	mov	r9, r1
 80073c6:	f7f9 fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f040 8295 	bne.w	80078fa <_dtoa_r+0x97a>
 80073d0:	4652      	mov	r2, sl
 80073d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80073d6:	4640      	mov	r0, r8
 80073d8:	4649      	mov	r1, r9
 80073da:	f7f9 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	f040 8289 	bne.w	80078f6 <_dtoa_r+0x976>
 80073e4:	ec5b ab19 	vmov	sl, fp, d9
 80073e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f2c0 8148 	blt.w	8007680 <_dtoa_r+0x700>
 80073f0:	9a00      	ldr	r2, [sp, #0]
 80073f2:	2a0e      	cmp	r2, #14
 80073f4:	f300 8144 	bgt.w	8007680 <_dtoa_r+0x700>
 80073f8:	4b67      	ldr	r3, [pc, #412]	; (8007598 <_dtoa_r+0x618>)
 80073fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	f280 80d5 	bge.w	80075b4 <_dtoa_r+0x634>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f300 80d1 	bgt.w	80075b4 <_dtoa_r+0x634>
 8007412:	f040 826f 	bne.w	80078f4 <_dtoa_r+0x974>
 8007416:	4b65      	ldr	r3, [pc, #404]	; (80075ac <_dtoa_r+0x62c>)
 8007418:	2200      	movs	r2, #0
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f8eb 	bl	80005f8 <__aeabi_dmul>
 8007422:	4652      	mov	r2, sl
 8007424:	465b      	mov	r3, fp
 8007426:	f7f9 fb6d 	bl	8000b04 <__aeabi_dcmpge>
 800742a:	9e03      	ldr	r6, [sp, #12]
 800742c:	4637      	mov	r7, r6
 800742e:	2800      	cmp	r0, #0
 8007430:	f040 8245 	bne.w	80078be <_dtoa_r+0x93e>
 8007434:	9d01      	ldr	r5, [sp, #4]
 8007436:	2331      	movs	r3, #49	; 0x31
 8007438:	f805 3b01 	strb.w	r3, [r5], #1
 800743c:	9b00      	ldr	r3, [sp, #0]
 800743e:	3301      	adds	r3, #1
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	e240      	b.n	80078c6 <_dtoa_r+0x946>
 8007444:	07f2      	lsls	r2, r6, #31
 8007446:	d505      	bpl.n	8007454 <_dtoa_r+0x4d4>
 8007448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800744c:	f7f9 f8d4 	bl	80005f8 <__aeabi_dmul>
 8007450:	3501      	adds	r5, #1
 8007452:	2301      	movs	r3, #1
 8007454:	1076      	asrs	r6, r6, #1
 8007456:	3708      	adds	r7, #8
 8007458:	e777      	b.n	800734a <_dtoa_r+0x3ca>
 800745a:	2502      	movs	r5, #2
 800745c:	e779      	b.n	8007352 <_dtoa_r+0x3d2>
 800745e:	9f00      	ldr	r7, [sp, #0]
 8007460:	9e03      	ldr	r6, [sp, #12]
 8007462:	e794      	b.n	800738e <_dtoa_r+0x40e>
 8007464:	9901      	ldr	r1, [sp, #4]
 8007466:	4b4c      	ldr	r3, [pc, #304]	; (8007598 <_dtoa_r+0x618>)
 8007468:	4431      	add	r1, r6
 800746a:	910d      	str	r1, [sp, #52]	; 0x34
 800746c:	9908      	ldr	r1, [sp, #32]
 800746e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007476:	2900      	cmp	r1, #0
 8007478:	d043      	beq.n	8007502 <_dtoa_r+0x582>
 800747a:	494d      	ldr	r1, [pc, #308]	; (80075b0 <_dtoa_r+0x630>)
 800747c:	2000      	movs	r0, #0
 800747e:	f7f9 f9e5 	bl	800084c <__aeabi_ddiv>
 8007482:	4652      	mov	r2, sl
 8007484:	465b      	mov	r3, fp
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	9d01      	ldr	r5, [sp, #4]
 800748c:	4682      	mov	sl, r0
 800748e:	468b      	mov	fp, r1
 8007490:	4649      	mov	r1, r9
 8007492:	4640      	mov	r0, r8
 8007494:	f7f9 fb60 	bl	8000b58 <__aeabi_d2iz>
 8007498:	4606      	mov	r6, r0
 800749a:	f7f9 f843 	bl	8000524 <__aeabi_i2d>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f8 feef 	bl	8000288 <__aeabi_dsub>
 80074aa:	3630      	adds	r6, #48	; 0x30
 80074ac:	f805 6b01 	strb.w	r6, [r5], #1
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	f7f9 fb10 	bl	8000adc <__aeabi_dcmplt>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d163      	bne.n	8007588 <_dtoa_r+0x608>
 80074c0:	4642      	mov	r2, r8
 80074c2:	464b      	mov	r3, r9
 80074c4:	4936      	ldr	r1, [pc, #216]	; (80075a0 <_dtoa_r+0x620>)
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7f8 fede 	bl	8000288 <__aeabi_dsub>
 80074cc:	4652      	mov	r2, sl
 80074ce:	465b      	mov	r3, fp
 80074d0:	f7f9 fb04 	bl	8000adc <__aeabi_dcmplt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f040 80b5 	bne.w	8007644 <_dtoa_r+0x6c4>
 80074da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074dc:	429d      	cmp	r5, r3
 80074de:	d081      	beq.n	80073e4 <_dtoa_r+0x464>
 80074e0:	4b30      	ldr	r3, [pc, #192]	; (80075a4 <_dtoa_r+0x624>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	4650      	mov	r0, sl
 80074e6:	4659      	mov	r1, fp
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <_dtoa_r+0x624>)
 80074ee:	4682      	mov	sl, r0
 80074f0:	468b      	mov	fp, r1
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	2200      	movs	r2, #0
 80074f8:	f7f9 f87e 	bl	80005f8 <__aeabi_dmul>
 80074fc:	4680      	mov	r8, r0
 80074fe:	4689      	mov	r9, r1
 8007500:	e7c6      	b.n	8007490 <_dtoa_r+0x510>
 8007502:	4650      	mov	r0, sl
 8007504:	4659      	mov	r1, fp
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800750c:	9d01      	ldr	r5, [sp, #4]
 800750e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007510:	4682      	mov	sl, r0
 8007512:	468b      	mov	fp, r1
 8007514:	4649      	mov	r1, r9
 8007516:	4640      	mov	r0, r8
 8007518:	f7f9 fb1e 	bl	8000b58 <__aeabi_d2iz>
 800751c:	4606      	mov	r6, r0
 800751e:	f7f9 f801 	bl	8000524 <__aeabi_i2d>
 8007522:	3630      	adds	r6, #48	; 0x30
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f8 feac 	bl	8000288 <__aeabi_dsub>
 8007530:	f805 6b01 	strb.w	r6, [r5], #1
 8007534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007536:	429d      	cmp	r5, r3
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	f04f 0200 	mov.w	r2, #0
 8007540:	d124      	bne.n	800758c <_dtoa_r+0x60c>
 8007542:	4b1b      	ldr	r3, [pc, #108]	; (80075b0 <_dtoa_r+0x630>)
 8007544:	4650      	mov	r0, sl
 8007546:	4659      	mov	r1, fp
 8007548:	f7f8 fea0 	bl	800028c <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	4640      	mov	r0, r8
 8007552:	4649      	mov	r1, r9
 8007554:	f7f9 fae0 	bl	8000b18 <__aeabi_dcmpgt>
 8007558:	2800      	cmp	r0, #0
 800755a:	d173      	bne.n	8007644 <_dtoa_r+0x6c4>
 800755c:	4652      	mov	r2, sl
 800755e:	465b      	mov	r3, fp
 8007560:	4913      	ldr	r1, [pc, #76]	; (80075b0 <_dtoa_r+0x630>)
 8007562:	2000      	movs	r0, #0
 8007564:	f7f8 fe90 	bl	8000288 <__aeabi_dsub>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4640      	mov	r0, r8
 800756e:	4649      	mov	r1, r9
 8007570:	f7f9 fab4 	bl	8000adc <__aeabi_dcmplt>
 8007574:	2800      	cmp	r0, #0
 8007576:	f43f af35 	beq.w	80073e4 <_dtoa_r+0x464>
 800757a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800757c:	1e6b      	subs	r3, r5, #1
 800757e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007584:	2b30      	cmp	r3, #48	; 0x30
 8007586:	d0f8      	beq.n	800757a <_dtoa_r+0x5fa>
 8007588:	9700      	str	r7, [sp, #0]
 800758a:	e049      	b.n	8007620 <_dtoa_r+0x6a0>
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <_dtoa_r+0x624>)
 800758e:	f7f9 f833 	bl	80005f8 <__aeabi_dmul>
 8007592:	4680      	mov	r8, r0
 8007594:	4689      	mov	r9, r1
 8007596:	e7bd      	b.n	8007514 <_dtoa_r+0x594>
 8007598:	0800cd60 	.word	0x0800cd60
 800759c:	0800cd38 	.word	0x0800cd38
 80075a0:	3ff00000 	.word	0x3ff00000
 80075a4:	40240000 	.word	0x40240000
 80075a8:	401c0000 	.word	0x401c0000
 80075ac:	40140000 	.word	0x40140000
 80075b0:	3fe00000 	.word	0x3fe00000
 80075b4:	9d01      	ldr	r5, [sp, #4]
 80075b6:	4656      	mov	r6, sl
 80075b8:	465f      	mov	r7, fp
 80075ba:	4642      	mov	r2, r8
 80075bc:	464b      	mov	r3, r9
 80075be:	4630      	mov	r0, r6
 80075c0:	4639      	mov	r1, r7
 80075c2:	f7f9 f943 	bl	800084c <__aeabi_ddiv>
 80075c6:	f7f9 fac7 	bl	8000b58 <__aeabi_d2iz>
 80075ca:	4682      	mov	sl, r0
 80075cc:	f7f8 ffaa 	bl	8000524 <__aeabi_i2d>
 80075d0:	4642      	mov	r2, r8
 80075d2:	464b      	mov	r3, r9
 80075d4:	f7f9 f810 	bl	80005f8 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4630      	mov	r0, r6
 80075de:	4639      	mov	r1, r7
 80075e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	f805 6b01 	strb.w	r6, [r5], #1
 80075ec:	9e01      	ldr	r6, [sp, #4]
 80075ee:	9f03      	ldr	r7, [sp, #12]
 80075f0:	1bae      	subs	r6, r5, r6
 80075f2:	42b7      	cmp	r7, r6
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	d135      	bne.n	8007666 <_dtoa_r+0x6e6>
 80075fa:	f7f8 fe47 	bl	800028c <__adddf3>
 80075fe:	4642      	mov	r2, r8
 8007600:	464b      	mov	r3, r9
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	f7f9 fa87 	bl	8000b18 <__aeabi_dcmpgt>
 800760a:	b9d0      	cbnz	r0, 8007642 <_dtoa_r+0x6c2>
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 fa58 	bl	8000ac8 <__aeabi_dcmpeq>
 8007618:	b110      	cbz	r0, 8007620 <_dtoa_r+0x6a0>
 800761a:	f01a 0f01 	tst.w	sl, #1
 800761e:	d110      	bne.n	8007642 <_dtoa_r+0x6c2>
 8007620:	4620      	mov	r0, r4
 8007622:	ee18 1a10 	vmov	r1, s16
 8007626:	f000 fb25 	bl	8007c74 <_Bfree>
 800762a:	2300      	movs	r3, #0
 800762c:	9800      	ldr	r0, [sp, #0]
 800762e:	702b      	strb	r3, [r5, #0]
 8007630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007632:	3001      	adds	r0, #1
 8007634:	6018      	str	r0, [r3, #0]
 8007636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f acf1 	beq.w	8007020 <_dtoa_r+0xa0>
 800763e:	601d      	str	r5, [r3, #0]
 8007640:	e4ee      	b.n	8007020 <_dtoa_r+0xa0>
 8007642:	9f00      	ldr	r7, [sp, #0]
 8007644:	462b      	mov	r3, r5
 8007646:	461d      	mov	r5, r3
 8007648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800764c:	2a39      	cmp	r2, #57	; 0x39
 800764e:	d106      	bne.n	800765e <_dtoa_r+0x6de>
 8007650:	9a01      	ldr	r2, [sp, #4]
 8007652:	429a      	cmp	r2, r3
 8007654:	d1f7      	bne.n	8007646 <_dtoa_r+0x6c6>
 8007656:	9901      	ldr	r1, [sp, #4]
 8007658:	2230      	movs	r2, #48	; 0x30
 800765a:	3701      	adds	r7, #1
 800765c:	700a      	strb	r2, [r1, #0]
 800765e:	781a      	ldrb	r2, [r3, #0]
 8007660:	3201      	adds	r2, #1
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e790      	b.n	8007588 <_dtoa_r+0x608>
 8007666:	4ba6      	ldr	r3, [pc, #664]	; (8007900 <_dtoa_r+0x980>)
 8007668:	2200      	movs	r2, #0
 800766a:	f7f8 ffc5 	bl	80005f8 <__aeabi_dmul>
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	4606      	mov	r6, r0
 8007674:	460f      	mov	r7, r1
 8007676:	f7f9 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800767a:	2800      	cmp	r0, #0
 800767c:	d09d      	beq.n	80075ba <_dtoa_r+0x63a>
 800767e:	e7cf      	b.n	8007620 <_dtoa_r+0x6a0>
 8007680:	9a08      	ldr	r2, [sp, #32]
 8007682:	2a00      	cmp	r2, #0
 8007684:	f000 80d7 	beq.w	8007836 <_dtoa_r+0x8b6>
 8007688:	9a06      	ldr	r2, [sp, #24]
 800768a:	2a01      	cmp	r2, #1
 800768c:	f300 80ba 	bgt.w	8007804 <_dtoa_r+0x884>
 8007690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007692:	2a00      	cmp	r2, #0
 8007694:	f000 80b2 	beq.w	80077fc <_dtoa_r+0x87c>
 8007698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800769c:	9e07      	ldr	r6, [sp, #28]
 800769e:	9d04      	ldr	r5, [sp, #16]
 80076a0:	9a04      	ldr	r2, [sp, #16]
 80076a2:	441a      	add	r2, r3
 80076a4:	9204      	str	r2, [sp, #16]
 80076a6:	9a05      	ldr	r2, [sp, #20]
 80076a8:	2101      	movs	r1, #1
 80076aa:	441a      	add	r2, r3
 80076ac:	4620      	mov	r0, r4
 80076ae:	9205      	str	r2, [sp, #20]
 80076b0:	f000 fb98 	bl	8007de4 <__i2b>
 80076b4:	4607      	mov	r7, r0
 80076b6:	2d00      	cmp	r5, #0
 80076b8:	dd0c      	ble.n	80076d4 <_dtoa_r+0x754>
 80076ba:	9b05      	ldr	r3, [sp, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	dd09      	ble.n	80076d4 <_dtoa_r+0x754>
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	9a04      	ldr	r2, [sp, #16]
 80076c4:	bfa8      	it	ge
 80076c6:	462b      	movge	r3, r5
 80076c8:	1ad2      	subs	r2, r2, r3
 80076ca:	9204      	str	r2, [sp, #16]
 80076cc:	9a05      	ldr	r2, [sp, #20]
 80076ce:	1aed      	subs	r5, r5, r3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	9b07      	ldr	r3, [sp, #28]
 80076d6:	b31b      	cbz	r3, 8007720 <_dtoa_r+0x7a0>
 80076d8:	9b08      	ldr	r3, [sp, #32]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80af 	beq.w	800783e <_dtoa_r+0x8be>
 80076e0:	2e00      	cmp	r6, #0
 80076e2:	dd13      	ble.n	800770c <_dtoa_r+0x78c>
 80076e4:	4639      	mov	r1, r7
 80076e6:	4632      	mov	r2, r6
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fc3b 	bl	8007f64 <__pow5mult>
 80076ee:	ee18 2a10 	vmov	r2, s16
 80076f2:	4601      	mov	r1, r0
 80076f4:	4607      	mov	r7, r0
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 fb8a 	bl	8007e10 <__multiply>
 80076fc:	ee18 1a10 	vmov	r1, s16
 8007700:	4680      	mov	r8, r0
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fab6 	bl	8007c74 <_Bfree>
 8007708:	ee08 8a10 	vmov	s16, r8
 800770c:	9b07      	ldr	r3, [sp, #28]
 800770e:	1b9a      	subs	r2, r3, r6
 8007710:	d006      	beq.n	8007720 <_dtoa_r+0x7a0>
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	4620      	mov	r0, r4
 8007718:	f000 fc24 	bl	8007f64 <__pow5mult>
 800771c:	ee08 0a10 	vmov	s16, r0
 8007720:	2101      	movs	r1, #1
 8007722:	4620      	mov	r0, r4
 8007724:	f000 fb5e 	bl	8007de4 <__i2b>
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	4606      	mov	r6, r0
 800772e:	f340 8088 	ble.w	8007842 <_dtoa_r+0x8c2>
 8007732:	461a      	mov	r2, r3
 8007734:	4601      	mov	r1, r0
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fc14 	bl	8007f64 <__pow5mult>
 800773c:	9b06      	ldr	r3, [sp, #24]
 800773e:	2b01      	cmp	r3, #1
 8007740:	4606      	mov	r6, r0
 8007742:	f340 8081 	ble.w	8007848 <_dtoa_r+0x8c8>
 8007746:	f04f 0800 	mov.w	r8, #0
 800774a:	6933      	ldr	r3, [r6, #16]
 800774c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007750:	6918      	ldr	r0, [r3, #16]
 8007752:	f000 faf7 	bl	8007d44 <__hi0bits>
 8007756:	f1c0 0020 	rsb	r0, r0, #32
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	4418      	add	r0, r3
 800775e:	f010 001f 	ands.w	r0, r0, #31
 8007762:	f000 8092 	beq.w	800788a <_dtoa_r+0x90a>
 8007766:	f1c0 0320 	rsb	r3, r0, #32
 800776a:	2b04      	cmp	r3, #4
 800776c:	f340 808a 	ble.w	8007884 <_dtoa_r+0x904>
 8007770:	f1c0 001c 	rsb	r0, r0, #28
 8007774:	9b04      	ldr	r3, [sp, #16]
 8007776:	4403      	add	r3, r0
 8007778:	9304      	str	r3, [sp, #16]
 800777a:	9b05      	ldr	r3, [sp, #20]
 800777c:	4403      	add	r3, r0
 800777e:	4405      	add	r5, r0
 8007780:	9305      	str	r3, [sp, #20]
 8007782:	9b04      	ldr	r3, [sp, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd07      	ble.n	8007798 <_dtoa_r+0x818>
 8007788:	ee18 1a10 	vmov	r1, s16
 800778c:	461a      	mov	r2, r3
 800778e:	4620      	mov	r0, r4
 8007790:	f000 fc42 	bl	8008018 <__lshift>
 8007794:	ee08 0a10 	vmov	s16, r0
 8007798:	9b05      	ldr	r3, [sp, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	dd05      	ble.n	80077aa <_dtoa_r+0x82a>
 800779e:	4631      	mov	r1, r6
 80077a0:	461a      	mov	r2, r3
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fc38 	bl	8008018 <__lshift>
 80077a8:	4606      	mov	r6, r0
 80077aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d06e      	beq.n	800788e <_dtoa_r+0x90e>
 80077b0:	ee18 0a10 	vmov	r0, s16
 80077b4:	4631      	mov	r1, r6
 80077b6:	f000 fc9f 	bl	80080f8 <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	da67      	bge.n	800788e <_dtoa_r+0x90e>
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	ee18 1a10 	vmov	r1, s16
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	220a      	movs	r2, #10
 80077ca:	2300      	movs	r3, #0
 80077cc:	4620      	mov	r0, r4
 80077ce:	f000 fa73 	bl	8007cb8 <__multadd>
 80077d2:	9b08      	ldr	r3, [sp, #32]
 80077d4:	ee08 0a10 	vmov	s16, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 81b1 	beq.w	8007b40 <_dtoa_r+0xbc0>
 80077de:	2300      	movs	r3, #0
 80077e0:	4639      	mov	r1, r7
 80077e2:	220a      	movs	r2, #10
 80077e4:	4620      	mov	r0, r4
 80077e6:	f000 fa67 	bl	8007cb8 <__multadd>
 80077ea:	9b02      	ldr	r3, [sp, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	4607      	mov	r7, r0
 80077f0:	f300 808e 	bgt.w	8007910 <_dtoa_r+0x990>
 80077f4:	9b06      	ldr	r3, [sp, #24]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	dc51      	bgt.n	800789e <_dtoa_r+0x91e>
 80077fa:	e089      	b.n	8007910 <_dtoa_r+0x990>
 80077fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007802:	e74b      	b.n	800769c <_dtoa_r+0x71c>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1e5e      	subs	r6, r3, #1
 8007808:	9b07      	ldr	r3, [sp, #28]
 800780a:	42b3      	cmp	r3, r6
 800780c:	bfbf      	itttt	lt
 800780e:	9b07      	ldrlt	r3, [sp, #28]
 8007810:	9607      	strlt	r6, [sp, #28]
 8007812:	1af2      	sublt	r2, r6, r3
 8007814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007816:	bfb6      	itet	lt
 8007818:	189b      	addlt	r3, r3, r2
 800781a:	1b9e      	subge	r6, r3, r6
 800781c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	bfb8      	it	lt
 8007822:	2600      	movlt	r6, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	bfb7      	itett	lt
 8007828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800782c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007830:	1a9d      	sublt	r5, r3, r2
 8007832:	2300      	movlt	r3, #0
 8007834:	e734      	b.n	80076a0 <_dtoa_r+0x720>
 8007836:	9e07      	ldr	r6, [sp, #28]
 8007838:	9d04      	ldr	r5, [sp, #16]
 800783a:	9f08      	ldr	r7, [sp, #32]
 800783c:	e73b      	b.n	80076b6 <_dtoa_r+0x736>
 800783e:	9a07      	ldr	r2, [sp, #28]
 8007840:	e767      	b.n	8007712 <_dtoa_r+0x792>
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b01      	cmp	r3, #1
 8007846:	dc18      	bgt.n	800787a <_dtoa_r+0x8fa>
 8007848:	f1ba 0f00 	cmp.w	sl, #0
 800784c:	d115      	bne.n	800787a <_dtoa_r+0x8fa>
 800784e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007852:	b993      	cbnz	r3, 800787a <_dtoa_r+0x8fa>
 8007854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007858:	0d1b      	lsrs	r3, r3, #20
 800785a:	051b      	lsls	r3, r3, #20
 800785c:	b183      	cbz	r3, 8007880 <_dtoa_r+0x900>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	3301      	adds	r3, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	9b05      	ldr	r3, [sp, #20]
 8007866:	3301      	adds	r3, #1
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	f04f 0801 	mov.w	r8, #1
 800786e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007870:	2b00      	cmp	r3, #0
 8007872:	f47f af6a 	bne.w	800774a <_dtoa_r+0x7ca>
 8007876:	2001      	movs	r0, #1
 8007878:	e76f      	b.n	800775a <_dtoa_r+0x7da>
 800787a:	f04f 0800 	mov.w	r8, #0
 800787e:	e7f6      	b.n	800786e <_dtoa_r+0x8ee>
 8007880:	4698      	mov	r8, r3
 8007882:	e7f4      	b.n	800786e <_dtoa_r+0x8ee>
 8007884:	f43f af7d 	beq.w	8007782 <_dtoa_r+0x802>
 8007888:	4618      	mov	r0, r3
 800788a:	301c      	adds	r0, #28
 800788c:	e772      	b.n	8007774 <_dtoa_r+0x7f4>
 800788e:	9b03      	ldr	r3, [sp, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc37      	bgt.n	8007904 <_dtoa_r+0x984>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	2b02      	cmp	r3, #2
 8007898:	dd34      	ble.n	8007904 <_dtoa_r+0x984>
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	9302      	str	r3, [sp, #8]
 800789e:	9b02      	ldr	r3, [sp, #8]
 80078a0:	b96b      	cbnz	r3, 80078be <_dtoa_r+0x93e>
 80078a2:	4631      	mov	r1, r6
 80078a4:	2205      	movs	r2, #5
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 fa06 	bl	8007cb8 <__multadd>
 80078ac:	4601      	mov	r1, r0
 80078ae:	4606      	mov	r6, r0
 80078b0:	ee18 0a10 	vmov	r0, s16
 80078b4:	f000 fc20 	bl	80080f8 <__mcmp>
 80078b8:	2800      	cmp	r0, #0
 80078ba:	f73f adbb 	bgt.w	8007434 <_dtoa_r+0x4b4>
 80078be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c0:	9d01      	ldr	r5, [sp, #4]
 80078c2:	43db      	mvns	r3, r3
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	4631      	mov	r1, r6
 80078cc:	4620      	mov	r0, r4
 80078ce:	f000 f9d1 	bl	8007c74 <_Bfree>
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	f43f aea4 	beq.w	8007620 <_dtoa_r+0x6a0>
 80078d8:	f1b8 0f00 	cmp.w	r8, #0
 80078dc:	d005      	beq.n	80078ea <_dtoa_r+0x96a>
 80078de:	45b8      	cmp	r8, r7
 80078e0:	d003      	beq.n	80078ea <_dtoa_r+0x96a>
 80078e2:	4641      	mov	r1, r8
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 f9c5 	bl	8007c74 <_Bfree>
 80078ea:	4639      	mov	r1, r7
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 f9c1 	bl	8007c74 <_Bfree>
 80078f2:	e695      	b.n	8007620 <_dtoa_r+0x6a0>
 80078f4:	2600      	movs	r6, #0
 80078f6:	4637      	mov	r7, r6
 80078f8:	e7e1      	b.n	80078be <_dtoa_r+0x93e>
 80078fa:	9700      	str	r7, [sp, #0]
 80078fc:	4637      	mov	r7, r6
 80078fe:	e599      	b.n	8007434 <_dtoa_r+0x4b4>
 8007900:	40240000 	.word	0x40240000
 8007904:	9b08      	ldr	r3, [sp, #32]
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80ca 	beq.w	8007aa0 <_dtoa_r+0xb20>
 800790c:	9b03      	ldr	r3, [sp, #12]
 800790e:	9302      	str	r3, [sp, #8]
 8007910:	2d00      	cmp	r5, #0
 8007912:	dd05      	ble.n	8007920 <_dtoa_r+0x9a0>
 8007914:	4639      	mov	r1, r7
 8007916:	462a      	mov	r2, r5
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fb7d 	bl	8008018 <__lshift>
 800791e:	4607      	mov	r7, r0
 8007920:	f1b8 0f00 	cmp.w	r8, #0
 8007924:	d05b      	beq.n	80079de <_dtoa_r+0xa5e>
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4620      	mov	r0, r4
 800792a:	f000 f963 	bl	8007bf4 <_Balloc>
 800792e:	4605      	mov	r5, r0
 8007930:	b928      	cbnz	r0, 800793e <_dtoa_r+0x9be>
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <_dtoa_r+0xbd0>)
 8007934:	4602      	mov	r2, r0
 8007936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800793a:	f7ff bb3b 	b.w	8006fb4 <_dtoa_r+0x34>
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	3202      	adds	r2, #2
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	f107 010c 	add.w	r1, r7, #12
 8007948:	300c      	adds	r0, #12
 800794a:	f7fe fc4f 	bl	80061ec <memcpy>
 800794e:	2201      	movs	r2, #1
 8007950:	4629      	mov	r1, r5
 8007952:	4620      	mov	r0, r4
 8007954:	f000 fb60 	bl	8008018 <__lshift>
 8007958:	9b01      	ldr	r3, [sp, #4]
 800795a:	f103 0901 	add.w	r9, r3, #1
 800795e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007962:	4413      	add	r3, r2
 8007964:	9305      	str	r3, [sp, #20]
 8007966:	f00a 0301 	and.w	r3, sl, #1
 800796a:	46b8      	mov	r8, r7
 800796c:	9304      	str	r3, [sp, #16]
 800796e:	4607      	mov	r7, r0
 8007970:	4631      	mov	r1, r6
 8007972:	ee18 0a10 	vmov	r0, s16
 8007976:	f7ff fa77 	bl	8006e68 <quorem>
 800797a:	4641      	mov	r1, r8
 800797c:	9002      	str	r0, [sp, #8]
 800797e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007982:	ee18 0a10 	vmov	r0, s16
 8007986:	f000 fbb7 	bl	80080f8 <__mcmp>
 800798a:	463a      	mov	r2, r7
 800798c:	9003      	str	r0, [sp, #12]
 800798e:	4631      	mov	r1, r6
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fbcd 	bl	8008130 <__mdiff>
 8007996:	68c2      	ldr	r2, [r0, #12]
 8007998:	f109 3bff 	add.w	fp, r9, #4294967295
 800799c:	4605      	mov	r5, r0
 800799e:	bb02      	cbnz	r2, 80079e2 <_dtoa_r+0xa62>
 80079a0:	4601      	mov	r1, r0
 80079a2:	ee18 0a10 	vmov	r0, s16
 80079a6:	f000 fba7 	bl	80080f8 <__mcmp>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4629      	mov	r1, r5
 80079ae:	4620      	mov	r0, r4
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	f000 f95f 	bl	8007c74 <_Bfree>
 80079b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80079ba:	ea43 0102 	orr.w	r1, r3, r2
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	464d      	mov	r5, r9
 80079c4:	d10f      	bne.n	80079e6 <_dtoa_r+0xa66>
 80079c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80079ca:	d02a      	beq.n	8007a22 <_dtoa_r+0xaa2>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd02      	ble.n	80079d8 <_dtoa_r+0xa58>
 80079d2:	9b02      	ldr	r3, [sp, #8]
 80079d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80079d8:	f88b a000 	strb.w	sl, [fp]
 80079dc:	e775      	b.n	80078ca <_dtoa_r+0x94a>
 80079de:	4638      	mov	r0, r7
 80079e0:	e7ba      	b.n	8007958 <_dtoa_r+0x9d8>
 80079e2:	2201      	movs	r2, #1
 80079e4:	e7e2      	b.n	80079ac <_dtoa_r+0xa2c>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db04      	blt.n	80079f6 <_dtoa_r+0xa76>
 80079ec:	9906      	ldr	r1, [sp, #24]
 80079ee:	430b      	orrs	r3, r1
 80079f0:	9904      	ldr	r1, [sp, #16]
 80079f2:	430b      	orrs	r3, r1
 80079f4:	d122      	bne.n	8007a3c <_dtoa_r+0xabc>
 80079f6:	2a00      	cmp	r2, #0
 80079f8:	ddee      	ble.n	80079d8 <_dtoa_r+0xa58>
 80079fa:	ee18 1a10 	vmov	r1, s16
 80079fe:	2201      	movs	r2, #1
 8007a00:	4620      	mov	r0, r4
 8007a02:	f000 fb09 	bl	8008018 <__lshift>
 8007a06:	4631      	mov	r1, r6
 8007a08:	ee08 0a10 	vmov	s16, r0
 8007a0c:	f000 fb74 	bl	80080f8 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	dc03      	bgt.n	8007a1c <_dtoa_r+0xa9c>
 8007a14:	d1e0      	bne.n	80079d8 <_dtoa_r+0xa58>
 8007a16:	f01a 0f01 	tst.w	sl, #1
 8007a1a:	d0dd      	beq.n	80079d8 <_dtoa_r+0xa58>
 8007a1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a20:	d1d7      	bne.n	80079d2 <_dtoa_r+0xa52>
 8007a22:	2339      	movs	r3, #57	; 0x39
 8007a24:	f88b 3000 	strb.w	r3, [fp]
 8007a28:	462b      	mov	r3, r5
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a32:	2a39      	cmp	r2, #57	; 0x39
 8007a34:	d071      	beq.n	8007b1a <_dtoa_r+0xb9a>
 8007a36:	3201      	adds	r2, #1
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e746      	b.n	80078ca <_dtoa_r+0x94a>
 8007a3c:	2a00      	cmp	r2, #0
 8007a3e:	dd07      	ble.n	8007a50 <_dtoa_r+0xad0>
 8007a40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007a44:	d0ed      	beq.n	8007a22 <_dtoa_r+0xaa2>
 8007a46:	f10a 0301 	add.w	r3, sl, #1
 8007a4a:	f88b 3000 	strb.w	r3, [fp]
 8007a4e:	e73c      	b.n	80078ca <_dtoa_r+0x94a>
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007a56:	4599      	cmp	r9, r3
 8007a58:	d047      	beq.n	8007aea <_dtoa_r+0xb6a>
 8007a5a:	ee18 1a10 	vmov	r1, s16
 8007a5e:	2300      	movs	r3, #0
 8007a60:	220a      	movs	r2, #10
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 f928 	bl	8007cb8 <__multadd>
 8007a68:	45b8      	cmp	r8, r7
 8007a6a:	ee08 0a10 	vmov	s16, r0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	f04f 020a 	mov.w	r2, #10
 8007a76:	4641      	mov	r1, r8
 8007a78:	4620      	mov	r0, r4
 8007a7a:	d106      	bne.n	8007a8a <_dtoa_r+0xb0a>
 8007a7c:	f000 f91c 	bl	8007cb8 <__multadd>
 8007a80:	4680      	mov	r8, r0
 8007a82:	4607      	mov	r7, r0
 8007a84:	f109 0901 	add.w	r9, r9, #1
 8007a88:	e772      	b.n	8007970 <_dtoa_r+0x9f0>
 8007a8a:	f000 f915 	bl	8007cb8 <__multadd>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4680      	mov	r8, r0
 8007a92:	2300      	movs	r3, #0
 8007a94:	220a      	movs	r2, #10
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f90e 	bl	8007cb8 <__multadd>
 8007a9c:	4607      	mov	r7, r0
 8007a9e:	e7f1      	b.n	8007a84 <_dtoa_r+0xb04>
 8007aa0:	9b03      	ldr	r3, [sp, #12]
 8007aa2:	9302      	str	r3, [sp, #8]
 8007aa4:	9d01      	ldr	r5, [sp, #4]
 8007aa6:	ee18 0a10 	vmov	r0, s16
 8007aaa:	4631      	mov	r1, r6
 8007aac:	f7ff f9dc 	bl	8006e68 <quorem>
 8007ab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ab4:	9b01      	ldr	r3, [sp, #4]
 8007ab6:	f805 ab01 	strb.w	sl, [r5], #1
 8007aba:	1aea      	subs	r2, r5, r3
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dd09      	ble.n	8007ad6 <_dtoa_r+0xb56>
 8007ac2:	ee18 1a10 	vmov	r1, s16
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	220a      	movs	r2, #10
 8007aca:	4620      	mov	r0, r4
 8007acc:	f000 f8f4 	bl	8007cb8 <__multadd>
 8007ad0:	ee08 0a10 	vmov	s16, r0
 8007ad4:	e7e7      	b.n	8007aa6 <_dtoa_r+0xb26>
 8007ad6:	9b02      	ldr	r3, [sp, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	bfc8      	it	gt
 8007adc:	461d      	movgt	r5, r3
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	bfd8      	it	le
 8007ae2:	2501      	movle	r5, #1
 8007ae4:	441d      	add	r5, r3
 8007ae6:	f04f 0800 	mov.w	r8, #0
 8007aea:	ee18 1a10 	vmov	r1, s16
 8007aee:	2201      	movs	r2, #1
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fa91 	bl	8008018 <__lshift>
 8007af6:	4631      	mov	r1, r6
 8007af8:	ee08 0a10 	vmov	s16, r0
 8007afc:	f000 fafc 	bl	80080f8 <__mcmp>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dc91      	bgt.n	8007a28 <_dtoa_r+0xaa8>
 8007b04:	d102      	bne.n	8007b0c <_dtoa_r+0xb8c>
 8007b06:	f01a 0f01 	tst.w	sl, #1
 8007b0a:	d18d      	bne.n	8007a28 <_dtoa_r+0xaa8>
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	461d      	mov	r5, r3
 8007b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b14:	2a30      	cmp	r2, #48	; 0x30
 8007b16:	d0fa      	beq.n	8007b0e <_dtoa_r+0xb8e>
 8007b18:	e6d7      	b.n	80078ca <_dtoa_r+0x94a>
 8007b1a:	9a01      	ldr	r2, [sp, #4]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d184      	bne.n	8007a2a <_dtoa_r+0xaaa>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	3301      	adds	r3, #1
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2331      	movs	r3, #49	; 0x31
 8007b28:	7013      	strb	r3, [r2, #0]
 8007b2a:	e6ce      	b.n	80078ca <_dtoa_r+0x94a>
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <_dtoa_r+0xbd4>)
 8007b2e:	f7ff ba95 	b.w	800705c <_dtoa_r+0xdc>
 8007b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f47f aa6e 	bne.w	8007016 <_dtoa_r+0x96>
 8007b3a:	4b07      	ldr	r3, [pc, #28]	; (8007b58 <_dtoa_r+0xbd8>)
 8007b3c:	f7ff ba8e 	b.w	800705c <_dtoa_r+0xdc>
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	dcae      	bgt.n	8007aa4 <_dtoa_r+0xb24>
 8007b46:	9b06      	ldr	r3, [sp, #24]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	f73f aea8 	bgt.w	800789e <_dtoa_r+0x91e>
 8007b4e:	e7a9      	b.n	8007aa4 <_dtoa_r+0xb24>
 8007b50:	0800ccc7 	.word	0x0800ccc7
 8007b54:	0800cc24 	.word	0x0800cc24
 8007b58:	0800cc48 	.word	0x0800cc48

08007b5c <_fstat_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	; (8007b7c <_fstat_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f7f9 ffba 	bl	8001ae2 <_fstat>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d102      	bne.n	8007b78 <_fstat_r+0x1c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b103      	cbz	r3, 8007b78 <_fstat_r+0x1c>
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	2000a374 	.word	0x2000a374

08007b80 <_isatty_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_isatty_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7f9 ffb9 	bl	8001b02 <_isatty>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_isatty_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_isatty_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	2000a374 	.word	0x2000a374

08007ba0 <_localeconv_r>:
 8007ba0:	4800      	ldr	r0, [pc, #0]	; (8007ba4 <_localeconv_r+0x4>)
 8007ba2:	4770      	bx	lr
 8007ba4:	20000168 	.word	0x20000168

08007ba8 <_lseek_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d07      	ldr	r5, [pc, #28]	; (8007bc8 <_lseek_r+0x20>)
 8007bac:	4604      	mov	r4, r0
 8007bae:	4608      	mov	r0, r1
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	602a      	str	r2, [r5, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f7f9 ffae 	bl	8001b18 <_lseek>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_lseek_r+0x1e>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_lseek_r+0x1e>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	2000a374 	.word	0x2000a374

08007bcc <malloc>:
 8007bcc:	4b02      	ldr	r3, [pc, #8]	; (8007bd8 <malloc+0xc>)
 8007bce:	4601      	mov	r1, r0
 8007bd0:	6818      	ldr	r0, [r3, #0]
 8007bd2:	f7fe bb8d 	b.w	80062f0 <_malloc_r>
 8007bd6:	bf00      	nop
 8007bd8:	20000014 	.word	0x20000014

08007bdc <__malloc_lock>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__malloc_lock+0x8>)
 8007bde:	f7fe ba9e 	b.w	800611e <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	2000a368 	.word	0x2000a368

08007be8 <__malloc_unlock>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__malloc_unlock+0x8>)
 8007bea:	f7fe ba99 	b.w	8006120 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	2000a368 	.word	0x2000a368

08007bf4 <_Balloc>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	b976      	cbnz	r6, 8007c1c <_Balloc+0x28>
 8007bfe:	2010      	movs	r0, #16
 8007c00:	f7ff ffe4 	bl	8007bcc <malloc>
 8007c04:	4602      	mov	r2, r0
 8007c06:	6260      	str	r0, [r4, #36]	; 0x24
 8007c08:	b920      	cbnz	r0, 8007c14 <_Balloc+0x20>
 8007c0a:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <_Balloc+0x78>)
 8007c0c:	4818      	ldr	r0, [pc, #96]	; (8007c70 <_Balloc+0x7c>)
 8007c0e:	2166      	movs	r1, #102	; 0x66
 8007c10:	f001 fafc 	bl	800920c <__assert_func>
 8007c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c18:	6006      	str	r6, [r0, #0]
 8007c1a:	60c6      	str	r6, [r0, #12]
 8007c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c1e:	68f3      	ldr	r3, [r6, #12]
 8007c20:	b183      	cbz	r3, 8007c44 <_Balloc+0x50>
 8007c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c2a:	b9b8      	cbnz	r0, 8007c5c <_Balloc+0x68>
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c32:	1d72      	adds	r2, r6, #5
 8007c34:	0092      	lsls	r2, r2, #2
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fb60 	bl	80082fc <_calloc_r>
 8007c3c:	b160      	cbz	r0, 8007c58 <_Balloc+0x64>
 8007c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c42:	e00e      	b.n	8007c62 <_Balloc+0x6e>
 8007c44:	2221      	movs	r2, #33	; 0x21
 8007c46:	2104      	movs	r1, #4
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fb57 	bl	80082fc <_calloc_r>
 8007c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c50:	60f0      	str	r0, [r6, #12]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1e4      	bne.n	8007c22 <_Balloc+0x2e>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	6802      	ldr	r2, [r0, #0]
 8007c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c62:	2300      	movs	r3, #0
 8007c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c68:	e7f7      	b.n	8007c5a <_Balloc+0x66>
 8007c6a:	bf00      	nop
 8007c6c:	0800cc55 	.word	0x0800cc55
 8007c70:	0800ccd8 	.word	0x0800ccd8

08007c74 <_Bfree>:
 8007c74:	b570      	push	{r4, r5, r6, lr}
 8007c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c78:	4605      	mov	r5, r0
 8007c7a:	460c      	mov	r4, r1
 8007c7c:	b976      	cbnz	r6, 8007c9c <_Bfree+0x28>
 8007c7e:	2010      	movs	r0, #16
 8007c80:	f7ff ffa4 	bl	8007bcc <malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	6268      	str	r0, [r5, #36]	; 0x24
 8007c88:	b920      	cbnz	r0, 8007c94 <_Bfree+0x20>
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <_Bfree+0x3c>)
 8007c8c:	4809      	ldr	r0, [pc, #36]	; (8007cb4 <_Bfree+0x40>)
 8007c8e:	218a      	movs	r1, #138	; 0x8a
 8007c90:	f001 fabc 	bl	800920c <__assert_func>
 8007c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c98:	6006      	str	r6, [r0, #0]
 8007c9a:	60c6      	str	r6, [r0, #12]
 8007c9c:	b13c      	cbz	r4, 8007cae <_Bfree+0x3a>
 8007c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ca0:	6862      	ldr	r2, [r4, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ca8:	6021      	str	r1, [r4, #0]
 8007caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	0800cc55 	.word	0x0800cc55
 8007cb4:	0800ccd8 	.word	0x0800ccd8

08007cb8 <__multadd>:
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	690d      	ldr	r5, [r1, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	461e      	mov	r6, r3
 8007cc4:	f101 0c14 	add.w	ip, r1, #20
 8007cc8:	2000      	movs	r0, #0
 8007cca:	f8dc 3000 	ldr.w	r3, [ip]
 8007cce:	b299      	uxth	r1, r3
 8007cd0:	fb02 6101 	mla	r1, r2, r1, r6
 8007cd4:	0c1e      	lsrs	r6, r3, #16
 8007cd6:	0c0b      	lsrs	r3, r1, #16
 8007cd8:	fb02 3306 	mla	r3, r2, r6, r3
 8007cdc:	b289      	uxth	r1, r1
 8007cde:	3001      	adds	r0, #1
 8007ce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ce4:	4285      	cmp	r5, r0
 8007ce6:	f84c 1b04 	str.w	r1, [ip], #4
 8007cea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cee:	dcec      	bgt.n	8007cca <__multadd+0x12>
 8007cf0:	b30e      	cbz	r6, 8007d36 <__multadd+0x7e>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	42ab      	cmp	r3, r5
 8007cf6:	dc19      	bgt.n	8007d2c <__multadd+0x74>
 8007cf8:	6861      	ldr	r1, [r4, #4]
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	3101      	adds	r1, #1
 8007cfe:	f7ff ff79 	bl	8007bf4 <_Balloc>
 8007d02:	4680      	mov	r8, r0
 8007d04:	b928      	cbnz	r0, 8007d12 <__multadd+0x5a>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b0c      	ldr	r3, [pc, #48]	; (8007d3c <__multadd+0x84>)
 8007d0a:	480d      	ldr	r0, [pc, #52]	; (8007d40 <__multadd+0x88>)
 8007d0c:	21b5      	movs	r1, #181	; 0xb5
 8007d0e:	f001 fa7d 	bl	800920c <__assert_func>
 8007d12:	6922      	ldr	r2, [r4, #16]
 8007d14:	3202      	adds	r2, #2
 8007d16:	f104 010c 	add.w	r1, r4, #12
 8007d1a:	0092      	lsls	r2, r2, #2
 8007d1c:	300c      	adds	r0, #12
 8007d1e:	f7fe fa65 	bl	80061ec <memcpy>
 8007d22:	4621      	mov	r1, r4
 8007d24:	4638      	mov	r0, r7
 8007d26:	f7ff ffa5 	bl	8007c74 <_Bfree>
 8007d2a:	4644      	mov	r4, r8
 8007d2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d30:	3501      	adds	r5, #1
 8007d32:	615e      	str	r6, [r3, #20]
 8007d34:	6125      	str	r5, [r4, #16]
 8007d36:	4620      	mov	r0, r4
 8007d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3c:	0800ccc7 	.word	0x0800ccc7
 8007d40:	0800ccd8 	.word	0x0800ccd8

08007d44 <__hi0bits>:
 8007d44:	0c03      	lsrs	r3, r0, #16
 8007d46:	041b      	lsls	r3, r3, #16
 8007d48:	b9d3      	cbnz	r3, 8007d80 <__hi0bits+0x3c>
 8007d4a:	0400      	lsls	r0, r0, #16
 8007d4c:	2310      	movs	r3, #16
 8007d4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007d52:	bf04      	itt	eq
 8007d54:	0200      	lsleq	r0, r0, #8
 8007d56:	3308      	addeq	r3, #8
 8007d58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007d5c:	bf04      	itt	eq
 8007d5e:	0100      	lsleq	r0, r0, #4
 8007d60:	3304      	addeq	r3, #4
 8007d62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007d66:	bf04      	itt	eq
 8007d68:	0080      	lsleq	r0, r0, #2
 8007d6a:	3302      	addeq	r3, #2
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	db05      	blt.n	8007d7c <__hi0bits+0x38>
 8007d70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007d74:	f103 0301 	add.w	r3, r3, #1
 8007d78:	bf08      	it	eq
 8007d7a:	2320      	moveq	r3, #32
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	4770      	bx	lr
 8007d80:	2300      	movs	r3, #0
 8007d82:	e7e4      	b.n	8007d4e <__hi0bits+0xa>

08007d84 <__lo0bits>:
 8007d84:	6803      	ldr	r3, [r0, #0]
 8007d86:	f013 0207 	ands.w	r2, r3, #7
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	d00b      	beq.n	8007da6 <__lo0bits+0x22>
 8007d8e:	07da      	lsls	r2, r3, #31
 8007d90:	d423      	bmi.n	8007dda <__lo0bits+0x56>
 8007d92:	0798      	lsls	r0, r3, #30
 8007d94:	bf49      	itett	mi
 8007d96:	085b      	lsrmi	r3, r3, #1
 8007d98:	089b      	lsrpl	r3, r3, #2
 8007d9a:	2001      	movmi	r0, #1
 8007d9c:	600b      	strmi	r3, [r1, #0]
 8007d9e:	bf5c      	itt	pl
 8007da0:	600b      	strpl	r3, [r1, #0]
 8007da2:	2002      	movpl	r0, #2
 8007da4:	4770      	bx	lr
 8007da6:	b298      	uxth	r0, r3
 8007da8:	b9a8      	cbnz	r0, 8007dd6 <__lo0bits+0x52>
 8007daa:	0c1b      	lsrs	r3, r3, #16
 8007dac:	2010      	movs	r0, #16
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	b90a      	cbnz	r2, 8007db6 <__lo0bits+0x32>
 8007db2:	3008      	adds	r0, #8
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	071a      	lsls	r2, r3, #28
 8007db8:	bf04      	itt	eq
 8007dba:	091b      	lsreq	r3, r3, #4
 8007dbc:	3004      	addeq	r0, #4
 8007dbe:	079a      	lsls	r2, r3, #30
 8007dc0:	bf04      	itt	eq
 8007dc2:	089b      	lsreq	r3, r3, #2
 8007dc4:	3002      	addeq	r0, #2
 8007dc6:	07da      	lsls	r2, r3, #31
 8007dc8:	d403      	bmi.n	8007dd2 <__lo0bits+0x4e>
 8007dca:	085b      	lsrs	r3, r3, #1
 8007dcc:	f100 0001 	add.w	r0, r0, #1
 8007dd0:	d005      	beq.n	8007dde <__lo0bits+0x5a>
 8007dd2:	600b      	str	r3, [r1, #0]
 8007dd4:	4770      	bx	lr
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	e7e9      	b.n	8007dae <__lo0bits+0x2a>
 8007dda:	2000      	movs	r0, #0
 8007ddc:	4770      	bx	lr
 8007dde:	2020      	movs	r0, #32
 8007de0:	4770      	bx	lr
	...

08007de4 <__i2b>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	2101      	movs	r1, #1
 8007dea:	f7ff ff03 	bl	8007bf4 <_Balloc>
 8007dee:	4602      	mov	r2, r0
 8007df0:	b928      	cbnz	r0, 8007dfe <__i2b+0x1a>
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <__i2b+0x24>)
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <__i2b+0x28>)
 8007df6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dfa:	f001 fa07 	bl	800920c <__assert_func>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6144      	str	r4, [r0, #20]
 8007e02:	6103      	str	r3, [r0, #16]
 8007e04:	bd10      	pop	{r4, pc}
 8007e06:	bf00      	nop
 8007e08:	0800ccc7 	.word	0x0800ccc7
 8007e0c:	0800ccd8 	.word	0x0800ccd8

08007e10 <__multiply>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	4691      	mov	r9, r2
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	bfb8      	it	lt
 8007e20:	460b      	movlt	r3, r1
 8007e22:	460c      	mov	r4, r1
 8007e24:	bfbc      	itt	lt
 8007e26:	464c      	movlt	r4, r9
 8007e28:	4699      	movlt	r9, r3
 8007e2a:	6927      	ldr	r7, [r4, #16]
 8007e2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e30:	68a3      	ldr	r3, [r4, #8]
 8007e32:	6861      	ldr	r1, [r4, #4]
 8007e34:	eb07 060a 	add.w	r6, r7, sl
 8007e38:	42b3      	cmp	r3, r6
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	bfb8      	it	lt
 8007e3e:	3101      	addlt	r1, #1
 8007e40:	f7ff fed8 	bl	8007bf4 <_Balloc>
 8007e44:	b930      	cbnz	r0, 8007e54 <__multiply+0x44>
 8007e46:	4602      	mov	r2, r0
 8007e48:	4b44      	ldr	r3, [pc, #272]	; (8007f5c <__multiply+0x14c>)
 8007e4a:	4845      	ldr	r0, [pc, #276]	; (8007f60 <__multiply+0x150>)
 8007e4c:	f240 115d 	movw	r1, #349	; 0x15d
 8007e50:	f001 f9dc 	bl	800920c <__assert_func>
 8007e54:	f100 0514 	add.w	r5, r0, #20
 8007e58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4543      	cmp	r3, r8
 8007e62:	d321      	bcc.n	8007ea8 <__multiply+0x98>
 8007e64:	f104 0314 	add.w	r3, r4, #20
 8007e68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e6c:	f109 0314 	add.w	r3, r9, #20
 8007e70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e74:	9202      	str	r2, [sp, #8]
 8007e76:	1b3a      	subs	r2, r7, r4
 8007e78:	3a15      	subs	r2, #21
 8007e7a:	f022 0203 	bic.w	r2, r2, #3
 8007e7e:	3204      	adds	r2, #4
 8007e80:	f104 0115 	add.w	r1, r4, #21
 8007e84:	428f      	cmp	r7, r1
 8007e86:	bf38      	it	cc
 8007e88:	2204      	movcc	r2, #4
 8007e8a:	9201      	str	r2, [sp, #4]
 8007e8c:	9a02      	ldr	r2, [sp, #8]
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d80c      	bhi.n	8007eae <__multiply+0x9e>
 8007e94:	2e00      	cmp	r6, #0
 8007e96:	dd03      	ble.n	8007ea0 <__multiply+0x90>
 8007e98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05a      	beq.n	8007f56 <__multiply+0x146>
 8007ea0:	6106      	str	r6, [r0, #16]
 8007ea2:	b005      	add	sp, #20
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	f843 2b04 	str.w	r2, [r3], #4
 8007eac:	e7d8      	b.n	8007e60 <__multiply+0x50>
 8007eae:	f8b3 a000 	ldrh.w	sl, [r3]
 8007eb2:	f1ba 0f00 	cmp.w	sl, #0
 8007eb6:	d024      	beq.n	8007f02 <__multiply+0xf2>
 8007eb8:	f104 0e14 	add.w	lr, r4, #20
 8007ebc:	46a9      	mov	r9, r5
 8007ebe:	f04f 0c00 	mov.w	ip, #0
 8007ec2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007ec6:	f8d9 1000 	ldr.w	r1, [r9]
 8007eca:	fa1f fb82 	uxth.w	fp, r2
 8007ece:	b289      	uxth	r1, r1
 8007ed0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ed4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ed8:	f8d9 2000 	ldr.w	r2, [r9]
 8007edc:	4461      	add	r1, ip
 8007ede:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007ee2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007ee6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eea:	b289      	uxth	r1, r1
 8007eec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ef0:	4577      	cmp	r7, lr
 8007ef2:	f849 1b04 	str.w	r1, [r9], #4
 8007ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007efa:	d8e2      	bhi.n	8007ec2 <__multiply+0xb2>
 8007efc:	9a01      	ldr	r2, [sp, #4]
 8007efe:	f845 c002 	str.w	ip, [r5, r2]
 8007f02:	9a03      	ldr	r2, [sp, #12]
 8007f04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	f1b9 0f00 	cmp.w	r9, #0
 8007f0e:	d020      	beq.n	8007f52 <__multiply+0x142>
 8007f10:	6829      	ldr	r1, [r5, #0]
 8007f12:	f104 0c14 	add.w	ip, r4, #20
 8007f16:	46ae      	mov	lr, r5
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f24:	fb09 220b 	mla	r2, r9, fp, r2
 8007f28:	4492      	add	sl, r2
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007f30:	f84e 1b04 	str.w	r1, [lr], #4
 8007f34:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f38:	f8be 1000 	ldrh.w	r1, [lr]
 8007f3c:	0c12      	lsrs	r2, r2, #16
 8007f3e:	fb09 1102 	mla	r1, r9, r2, r1
 8007f42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007f46:	4567      	cmp	r7, ip
 8007f48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f4c:	d8e6      	bhi.n	8007f1c <__multiply+0x10c>
 8007f4e:	9a01      	ldr	r2, [sp, #4]
 8007f50:	50a9      	str	r1, [r5, r2]
 8007f52:	3504      	adds	r5, #4
 8007f54:	e79a      	b.n	8007e8c <__multiply+0x7c>
 8007f56:	3e01      	subs	r6, #1
 8007f58:	e79c      	b.n	8007e94 <__multiply+0x84>
 8007f5a:	bf00      	nop
 8007f5c:	0800ccc7 	.word	0x0800ccc7
 8007f60:	0800ccd8 	.word	0x0800ccd8

08007f64 <__pow5mult>:
 8007f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f68:	4615      	mov	r5, r2
 8007f6a:	f012 0203 	ands.w	r2, r2, #3
 8007f6e:	4606      	mov	r6, r0
 8007f70:	460f      	mov	r7, r1
 8007f72:	d007      	beq.n	8007f84 <__pow5mult+0x20>
 8007f74:	4c25      	ldr	r4, [pc, #148]	; (800800c <__pow5mult+0xa8>)
 8007f76:	3a01      	subs	r2, #1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f7e:	f7ff fe9b 	bl	8007cb8 <__multadd>
 8007f82:	4607      	mov	r7, r0
 8007f84:	10ad      	asrs	r5, r5, #2
 8007f86:	d03d      	beq.n	8008004 <__pow5mult+0xa0>
 8007f88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f8a:	b97c      	cbnz	r4, 8007fac <__pow5mult+0x48>
 8007f8c:	2010      	movs	r0, #16
 8007f8e:	f7ff fe1d 	bl	8007bcc <malloc>
 8007f92:	4602      	mov	r2, r0
 8007f94:	6270      	str	r0, [r6, #36]	; 0x24
 8007f96:	b928      	cbnz	r0, 8007fa4 <__pow5mult+0x40>
 8007f98:	4b1d      	ldr	r3, [pc, #116]	; (8008010 <__pow5mult+0xac>)
 8007f9a:	481e      	ldr	r0, [pc, #120]	; (8008014 <__pow5mult+0xb0>)
 8007f9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007fa0:	f001 f934 	bl	800920c <__assert_func>
 8007fa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fa8:	6004      	str	r4, [r0, #0]
 8007faa:	60c4      	str	r4, [r0, #12]
 8007fac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fb4:	b94c      	cbnz	r4, 8007fca <__pow5mult+0x66>
 8007fb6:	f240 2171 	movw	r1, #625	; 0x271
 8007fba:	4630      	mov	r0, r6
 8007fbc:	f7ff ff12 	bl	8007de4 <__i2b>
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	f04f 0900 	mov.w	r9, #0
 8007fce:	07eb      	lsls	r3, r5, #31
 8007fd0:	d50a      	bpl.n	8007fe8 <__pow5mult+0x84>
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ff1a 	bl	8007e10 <__multiply>
 8007fdc:	4639      	mov	r1, r7
 8007fde:	4680      	mov	r8, r0
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f7ff fe47 	bl	8007c74 <_Bfree>
 8007fe6:	4647      	mov	r7, r8
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	d00b      	beq.n	8008004 <__pow5mult+0xa0>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	b938      	cbnz	r0, 8008000 <__pow5mult+0x9c>
 8007ff0:	4622      	mov	r2, r4
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4630      	mov	r0, r6
 8007ff6:	f7ff ff0b 	bl	8007e10 <__multiply>
 8007ffa:	6020      	str	r0, [r4, #0]
 8007ffc:	f8c0 9000 	str.w	r9, [r0]
 8008000:	4604      	mov	r4, r0
 8008002:	e7e4      	b.n	8007fce <__pow5mult+0x6a>
 8008004:	4638      	mov	r0, r7
 8008006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800a:	bf00      	nop
 800800c:	0800ce28 	.word	0x0800ce28
 8008010:	0800cc55 	.word	0x0800cc55
 8008014:	0800ccd8 	.word	0x0800ccd8

08008018 <__lshift>:
 8008018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	6849      	ldr	r1, [r1, #4]
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	4607      	mov	r7, r0
 800802a:	4691      	mov	r9, r2
 800802c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008030:	f108 0601 	add.w	r6, r8, #1
 8008034:	42b3      	cmp	r3, r6
 8008036:	db0b      	blt.n	8008050 <__lshift+0x38>
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff fddb 	bl	8007bf4 <_Balloc>
 800803e:	4605      	mov	r5, r0
 8008040:	b948      	cbnz	r0, 8008056 <__lshift+0x3e>
 8008042:	4602      	mov	r2, r0
 8008044:	4b2a      	ldr	r3, [pc, #168]	; (80080f0 <__lshift+0xd8>)
 8008046:	482b      	ldr	r0, [pc, #172]	; (80080f4 <__lshift+0xdc>)
 8008048:	f240 11d9 	movw	r1, #473	; 0x1d9
 800804c:	f001 f8de 	bl	800920c <__assert_func>
 8008050:	3101      	adds	r1, #1
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	e7ee      	b.n	8008034 <__lshift+0x1c>
 8008056:	2300      	movs	r3, #0
 8008058:	f100 0114 	add.w	r1, r0, #20
 800805c:	f100 0210 	add.w	r2, r0, #16
 8008060:	4618      	mov	r0, r3
 8008062:	4553      	cmp	r3, sl
 8008064:	db37      	blt.n	80080d6 <__lshift+0xbe>
 8008066:	6920      	ldr	r0, [r4, #16]
 8008068:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800806c:	f104 0314 	add.w	r3, r4, #20
 8008070:	f019 091f 	ands.w	r9, r9, #31
 8008074:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008078:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800807c:	d02f      	beq.n	80080de <__lshift+0xc6>
 800807e:	f1c9 0e20 	rsb	lr, r9, #32
 8008082:	468a      	mov	sl, r1
 8008084:	f04f 0c00 	mov.w	ip, #0
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	fa02 f209 	lsl.w	r2, r2, r9
 800808e:	ea42 020c 	orr.w	r2, r2, ip
 8008092:	f84a 2b04 	str.w	r2, [sl], #4
 8008096:	f853 2b04 	ldr.w	r2, [r3], #4
 800809a:	4298      	cmp	r0, r3
 800809c:	fa22 fc0e 	lsr.w	ip, r2, lr
 80080a0:	d8f2      	bhi.n	8008088 <__lshift+0x70>
 80080a2:	1b03      	subs	r3, r0, r4
 80080a4:	3b15      	subs	r3, #21
 80080a6:	f023 0303 	bic.w	r3, r3, #3
 80080aa:	3304      	adds	r3, #4
 80080ac:	f104 0215 	add.w	r2, r4, #21
 80080b0:	4290      	cmp	r0, r2
 80080b2:	bf38      	it	cc
 80080b4:	2304      	movcc	r3, #4
 80080b6:	f841 c003 	str.w	ip, [r1, r3]
 80080ba:	f1bc 0f00 	cmp.w	ip, #0
 80080be:	d001      	beq.n	80080c4 <__lshift+0xac>
 80080c0:	f108 0602 	add.w	r6, r8, #2
 80080c4:	3e01      	subs	r6, #1
 80080c6:	4638      	mov	r0, r7
 80080c8:	612e      	str	r6, [r5, #16]
 80080ca:	4621      	mov	r1, r4
 80080cc:	f7ff fdd2 	bl	8007c74 <_Bfree>
 80080d0:	4628      	mov	r0, r5
 80080d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80080da:	3301      	adds	r3, #1
 80080dc:	e7c1      	b.n	8008062 <__lshift+0x4a>
 80080de:	3904      	subs	r1, #4
 80080e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80080e8:	4298      	cmp	r0, r3
 80080ea:	d8f9      	bhi.n	80080e0 <__lshift+0xc8>
 80080ec:	e7ea      	b.n	80080c4 <__lshift+0xac>
 80080ee:	bf00      	nop
 80080f0:	0800ccc7 	.word	0x0800ccc7
 80080f4:	0800ccd8 	.word	0x0800ccd8

080080f8 <__mcmp>:
 80080f8:	b530      	push	{r4, r5, lr}
 80080fa:	6902      	ldr	r2, [r0, #16]
 80080fc:	690c      	ldr	r4, [r1, #16]
 80080fe:	1b12      	subs	r2, r2, r4
 8008100:	d10e      	bne.n	8008120 <__mcmp+0x28>
 8008102:	f100 0314 	add.w	r3, r0, #20
 8008106:	3114      	adds	r1, #20
 8008108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800810c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008118:	42a5      	cmp	r5, r4
 800811a:	d003      	beq.n	8008124 <__mcmp+0x2c>
 800811c:	d305      	bcc.n	800812a <__mcmp+0x32>
 800811e:	2201      	movs	r2, #1
 8008120:	4610      	mov	r0, r2
 8008122:	bd30      	pop	{r4, r5, pc}
 8008124:	4283      	cmp	r3, r0
 8008126:	d3f3      	bcc.n	8008110 <__mcmp+0x18>
 8008128:	e7fa      	b.n	8008120 <__mcmp+0x28>
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	e7f7      	b.n	8008120 <__mcmp+0x28>

08008130 <__mdiff>:
 8008130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008134:	460c      	mov	r4, r1
 8008136:	4606      	mov	r6, r0
 8008138:	4611      	mov	r1, r2
 800813a:	4620      	mov	r0, r4
 800813c:	4690      	mov	r8, r2
 800813e:	f7ff ffdb 	bl	80080f8 <__mcmp>
 8008142:	1e05      	subs	r5, r0, #0
 8008144:	d110      	bne.n	8008168 <__mdiff+0x38>
 8008146:	4629      	mov	r1, r5
 8008148:	4630      	mov	r0, r6
 800814a:	f7ff fd53 	bl	8007bf4 <_Balloc>
 800814e:	b930      	cbnz	r0, 800815e <__mdiff+0x2e>
 8008150:	4b3a      	ldr	r3, [pc, #232]	; (800823c <__mdiff+0x10c>)
 8008152:	4602      	mov	r2, r0
 8008154:	f240 2132 	movw	r1, #562	; 0x232
 8008158:	4839      	ldr	r0, [pc, #228]	; (8008240 <__mdiff+0x110>)
 800815a:	f001 f857 	bl	800920c <__assert_func>
 800815e:	2301      	movs	r3, #1
 8008160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008168:	bfa4      	itt	ge
 800816a:	4643      	movge	r3, r8
 800816c:	46a0      	movge	r8, r4
 800816e:	4630      	mov	r0, r6
 8008170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008174:	bfa6      	itte	ge
 8008176:	461c      	movge	r4, r3
 8008178:	2500      	movge	r5, #0
 800817a:	2501      	movlt	r5, #1
 800817c:	f7ff fd3a 	bl	8007bf4 <_Balloc>
 8008180:	b920      	cbnz	r0, 800818c <__mdiff+0x5c>
 8008182:	4b2e      	ldr	r3, [pc, #184]	; (800823c <__mdiff+0x10c>)
 8008184:	4602      	mov	r2, r0
 8008186:	f44f 7110 	mov.w	r1, #576	; 0x240
 800818a:	e7e5      	b.n	8008158 <__mdiff+0x28>
 800818c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008190:	6926      	ldr	r6, [r4, #16]
 8008192:	60c5      	str	r5, [r0, #12]
 8008194:	f104 0914 	add.w	r9, r4, #20
 8008198:	f108 0514 	add.w	r5, r8, #20
 800819c:	f100 0e14 	add.w	lr, r0, #20
 80081a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80081a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081a8:	f108 0210 	add.w	r2, r8, #16
 80081ac:	46f2      	mov	sl, lr
 80081ae:	2100      	movs	r1, #0
 80081b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80081b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80081b8:	fa1f f883 	uxth.w	r8, r3
 80081bc:	fa11 f18b 	uxtah	r1, r1, fp
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	eba1 0808 	sub.w	r8, r1, r8
 80081c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80081ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80081ce:	fa1f f888 	uxth.w	r8, r8
 80081d2:	1419      	asrs	r1, r3, #16
 80081d4:	454e      	cmp	r6, r9
 80081d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80081da:	f84a 3b04 	str.w	r3, [sl], #4
 80081de:	d8e7      	bhi.n	80081b0 <__mdiff+0x80>
 80081e0:	1b33      	subs	r3, r6, r4
 80081e2:	3b15      	subs	r3, #21
 80081e4:	f023 0303 	bic.w	r3, r3, #3
 80081e8:	3304      	adds	r3, #4
 80081ea:	3415      	adds	r4, #21
 80081ec:	42a6      	cmp	r6, r4
 80081ee:	bf38      	it	cc
 80081f0:	2304      	movcc	r3, #4
 80081f2:	441d      	add	r5, r3
 80081f4:	4473      	add	r3, lr
 80081f6:	469e      	mov	lr, r3
 80081f8:	462e      	mov	r6, r5
 80081fa:	4566      	cmp	r6, ip
 80081fc:	d30e      	bcc.n	800821c <__mdiff+0xec>
 80081fe:	f10c 0203 	add.w	r2, ip, #3
 8008202:	1b52      	subs	r2, r2, r5
 8008204:	f022 0203 	bic.w	r2, r2, #3
 8008208:	3d03      	subs	r5, #3
 800820a:	45ac      	cmp	ip, r5
 800820c:	bf38      	it	cc
 800820e:	2200      	movcc	r2, #0
 8008210:	441a      	add	r2, r3
 8008212:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008216:	b17b      	cbz	r3, 8008238 <__mdiff+0x108>
 8008218:	6107      	str	r7, [r0, #16]
 800821a:	e7a3      	b.n	8008164 <__mdiff+0x34>
 800821c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008220:	fa11 f288 	uxtah	r2, r1, r8
 8008224:	1414      	asrs	r4, r2, #16
 8008226:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800822a:	b292      	uxth	r2, r2
 800822c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008230:	f84e 2b04 	str.w	r2, [lr], #4
 8008234:	1421      	asrs	r1, r4, #16
 8008236:	e7e0      	b.n	80081fa <__mdiff+0xca>
 8008238:	3f01      	subs	r7, #1
 800823a:	e7ea      	b.n	8008212 <__mdiff+0xe2>
 800823c:	0800ccc7 	.word	0x0800ccc7
 8008240:	0800ccd8 	.word	0x0800ccd8

08008244 <__d2b>:
 8008244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008248:	4689      	mov	r9, r1
 800824a:	2101      	movs	r1, #1
 800824c:	ec57 6b10 	vmov	r6, r7, d0
 8008250:	4690      	mov	r8, r2
 8008252:	f7ff fccf 	bl	8007bf4 <_Balloc>
 8008256:	4604      	mov	r4, r0
 8008258:	b930      	cbnz	r0, 8008268 <__d2b+0x24>
 800825a:	4602      	mov	r2, r0
 800825c:	4b25      	ldr	r3, [pc, #148]	; (80082f4 <__d2b+0xb0>)
 800825e:	4826      	ldr	r0, [pc, #152]	; (80082f8 <__d2b+0xb4>)
 8008260:	f240 310a 	movw	r1, #778	; 0x30a
 8008264:	f000 ffd2 	bl	800920c <__assert_func>
 8008268:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800826c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008270:	bb35      	cbnz	r5, 80082c0 <__d2b+0x7c>
 8008272:	2e00      	cmp	r6, #0
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	d028      	beq.n	80082ca <__d2b+0x86>
 8008278:	4668      	mov	r0, sp
 800827a:	9600      	str	r6, [sp, #0]
 800827c:	f7ff fd82 	bl	8007d84 <__lo0bits>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	b300      	cbz	r0, 80082c6 <__d2b+0x82>
 8008284:	9a01      	ldr	r2, [sp, #4]
 8008286:	f1c0 0320 	rsb	r3, r0, #32
 800828a:	fa02 f303 	lsl.w	r3, r2, r3
 800828e:	430b      	orrs	r3, r1
 8008290:	40c2      	lsrs	r2, r0
 8008292:	6163      	str	r3, [r4, #20]
 8008294:	9201      	str	r2, [sp, #4]
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	61a3      	str	r3, [r4, #24]
 800829a:	2b00      	cmp	r3, #0
 800829c:	bf14      	ite	ne
 800829e:	2202      	movne	r2, #2
 80082a0:	2201      	moveq	r2, #1
 80082a2:	6122      	str	r2, [r4, #16]
 80082a4:	b1d5      	cbz	r5, 80082dc <__d2b+0x98>
 80082a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082aa:	4405      	add	r5, r0
 80082ac:	f8c9 5000 	str.w	r5, [r9]
 80082b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082b4:	f8c8 0000 	str.w	r0, [r8]
 80082b8:	4620      	mov	r0, r4
 80082ba:	b003      	add	sp, #12
 80082bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082c4:	e7d5      	b.n	8008272 <__d2b+0x2e>
 80082c6:	6161      	str	r1, [r4, #20]
 80082c8:	e7e5      	b.n	8008296 <__d2b+0x52>
 80082ca:	a801      	add	r0, sp, #4
 80082cc:	f7ff fd5a 	bl	8007d84 <__lo0bits>
 80082d0:	9b01      	ldr	r3, [sp, #4]
 80082d2:	6163      	str	r3, [r4, #20]
 80082d4:	2201      	movs	r2, #1
 80082d6:	6122      	str	r2, [r4, #16]
 80082d8:	3020      	adds	r0, #32
 80082da:	e7e3      	b.n	80082a4 <__d2b+0x60>
 80082dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80082e4:	f8c9 0000 	str.w	r0, [r9]
 80082e8:	6918      	ldr	r0, [r3, #16]
 80082ea:	f7ff fd2b 	bl	8007d44 <__hi0bits>
 80082ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082f2:	e7df      	b.n	80082b4 <__d2b+0x70>
 80082f4:	0800ccc7 	.word	0x0800ccc7
 80082f8:	0800ccd8 	.word	0x0800ccd8

080082fc <_calloc_r>:
 80082fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008302:	b94c      	cbnz	r4, 8008318 <_calloc_r+0x1c>
 8008304:	4611      	mov	r1, r2
 8008306:	9201      	str	r2, [sp, #4]
 8008308:	f7fd fff2 	bl	80062f0 <_malloc_r>
 800830c:	9a01      	ldr	r2, [sp, #4]
 800830e:	4605      	mov	r5, r0
 8008310:	b930      	cbnz	r0, 8008320 <_calloc_r+0x24>
 8008312:	4628      	mov	r0, r5
 8008314:	b003      	add	sp, #12
 8008316:	bd30      	pop	{r4, r5, pc}
 8008318:	220c      	movs	r2, #12
 800831a:	6002      	str	r2, [r0, #0]
 800831c:	2500      	movs	r5, #0
 800831e:	e7f8      	b.n	8008312 <_calloc_r+0x16>
 8008320:	4621      	mov	r1, r4
 8008322:	f7fd ff71 	bl	8006208 <memset>
 8008326:	e7f4      	b.n	8008312 <_calloc_r+0x16>

08008328 <__ssputs_r>:
 8008328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800832c:	688e      	ldr	r6, [r1, #8]
 800832e:	429e      	cmp	r6, r3
 8008330:	4682      	mov	sl, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4690      	mov	r8, r2
 8008336:	461f      	mov	r7, r3
 8008338:	d838      	bhi.n	80083ac <__ssputs_r+0x84>
 800833a:	898a      	ldrh	r2, [r1, #12]
 800833c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008340:	d032      	beq.n	80083a8 <__ssputs_r+0x80>
 8008342:	6825      	ldr	r5, [r4, #0]
 8008344:	6909      	ldr	r1, [r1, #16]
 8008346:	eba5 0901 	sub.w	r9, r5, r1
 800834a:	6965      	ldr	r5, [r4, #20]
 800834c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008354:	3301      	adds	r3, #1
 8008356:	444b      	add	r3, r9
 8008358:	106d      	asrs	r5, r5, #1
 800835a:	429d      	cmp	r5, r3
 800835c:	bf38      	it	cc
 800835e:	461d      	movcc	r5, r3
 8008360:	0553      	lsls	r3, r2, #21
 8008362:	d531      	bpl.n	80083c8 <__ssputs_r+0xa0>
 8008364:	4629      	mov	r1, r5
 8008366:	f7fd ffc3 	bl	80062f0 <_malloc_r>
 800836a:	4606      	mov	r6, r0
 800836c:	b950      	cbnz	r0, 8008384 <__ssputs_r+0x5c>
 800836e:	230c      	movs	r3, #12
 8008370:	f8ca 3000 	str.w	r3, [sl]
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008384:	6921      	ldr	r1, [r4, #16]
 8008386:	464a      	mov	r2, r9
 8008388:	f7fd ff30 	bl	80061ec <memcpy>
 800838c:	89a3      	ldrh	r3, [r4, #12]
 800838e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	6126      	str	r6, [r4, #16]
 800839a:	6165      	str	r5, [r4, #20]
 800839c:	444e      	add	r6, r9
 800839e:	eba5 0509 	sub.w	r5, r5, r9
 80083a2:	6026      	str	r6, [r4, #0]
 80083a4:	60a5      	str	r5, [r4, #8]
 80083a6:	463e      	mov	r6, r7
 80083a8:	42be      	cmp	r6, r7
 80083aa:	d900      	bls.n	80083ae <__ssputs_r+0x86>
 80083ac:	463e      	mov	r6, r7
 80083ae:	6820      	ldr	r0, [r4, #0]
 80083b0:	4632      	mov	r2, r6
 80083b2:	4641      	mov	r1, r8
 80083b4:	f000 ffb6 	bl	8009324 <memmove>
 80083b8:	68a3      	ldr	r3, [r4, #8]
 80083ba:	1b9b      	subs	r3, r3, r6
 80083bc:	60a3      	str	r3, [r4, #8]
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	4433      	add	r3, r6
 80083c2:	6023      	str	r3, [r4, #0]
 80083c4:	2000      	movs	r0, #0
 80083c6:	e7db      	b.n	8008380 <__ssputs_r+0x58>
 80083c8:	462a      	mov	r2, r5
 80083ca:	f000 ffc5 	bl	8009358 <_realloc_r>
 80083ce:	4606      	mov	r6, r0
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d1e1      	bne.n	8008398 <__ssputs_r+0x70>
 80083d4:	6921      	ldr	r1, [r4, #16]
 80083d6:	4650      	mov	r0, sl
 80083d8:	f7fd ff1e 	bl	8006218 <_free_r>
 80083dc:	e7c7      	b.n	800836e <__ssputs_r+0x46>
	...

080083e0 <_svfiprintf_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	4698      	mov	r8, r3
 80083e6:	898b      	ldrh	r3, [r1, #12]
 80083e8:	061b      	lsls	r3, r3, #24
 80083ea:	b09d      	sub	sp, #116	; 0x74
 80083ec:	4607      	mov	r7, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	4614      	mov	r4, r2
 80083f2:	d50e      	bpl.n	8008412 <_svfiprintf_r+0x32>
 80083f4:	690b      	ldr	r3, [r1, #16]
 80083f6:	b963      	cbnz	r3, 8008412 <_svfiprintf_r+0x32>
 80083f8:	2140      	movs	r1, #64	; 0x40
 80083fa:	f7fd ff79 	bl	80062f0 <_malloc_r>
 80083fe:	6028      	str	r0, [r5, #0]
 8008400:	6128      	str	r0, [r5, #16]
 8008402:	b920      	cbnz	r0, 800840e <_svfiprintf_r+0x2e>
 8008404:	230c      	movs	r3, #12
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	f04f 30ff 	mov.w	r0, #4294967295
 800840c:	e0d1      	b.n	80085b2 <_svfiprintf_r+0x1d2>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	616b      	str	r3, [r5, #20]
 8008412:	2300      	movs	r3, #0
 8008414:	9309      	str	r3, [sp, #36]	; 0x24
 8008416:	2320      	movs	r3, #32
 8008418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800841c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008420:	2330      	movs	r3, #48	; 0x30
 8008422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085cc <_svfiprintf_r+0x1ec>
 8008426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800842a:	f04f 0901 	mov.w	r9, #1
 800842e:	4623      	mov	r3, r4
 8008430:	469a      	mov	sl, r3
 8008432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008436:	b10a      	cbz	r2, 800843c <_svfiprintf_r+0x5c>
 8008438:	2a25      	cmp	r2, #37	; 0x25
 800843a:	d1f9      	bne.n	8008430 <_svfiprintf_r+0x50>
 800843c:	ebba 0b04 	subs.w	fp, sl, r4
 8008440:	d00b      	beq.n	800845a <_svfiprintf_r+0x7a>
 8008442:	465b      	mov	r3, fp
 8008444:	4622      	mov	r2, r4
 8008446:	4629      	mov	r1, r5
 8008448:	4638      	mov	r0, r7
 800844a:	f7ff ff6d 	bl	8008328 <__ssputs_r>
 800844e:	3001      	adds	r0, #1
 8008450:	f000 80aa 	beq.w	80085a8 <_svfiprintf_r+0x1c8>
 8008454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008456:	445a      	add	r2, fp
 8008458:	9209      	str	r2, [sp, #36]	; 0x24
 800845a:	f89a 3000 	ldrb.w	r3, [sl]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 80a2 	beq.w	80085a8 <_svfiprintf_r+0x1c8>
 8008464:	2300      	movs	r3, #0
 8008466:	f04f 32ff 	mov.w	r2, #4294967295
 800846a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800846e:	f10a 0a01 	add.w	sl, sl, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	9307      	str	r3, [sp, #28]
 8008476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800847a:	931a      	str	r3, [sp, #104]	; 0x68
 800847c:	4654      	mov	r4, sl
 800847e:	2205      	movs	r2, #5
 8008480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008484:	4851      	ldr	r0, [pc, #324]	; (80085cc <_svfiprintf_r+0x1ec>)
 8008486:	f7f7 feab 	bl	80001e0 <memchr>
 800848a:	9a04      	ldr	r2, [sp, #16]
 800848c:	b9d8      	cbnz	r0, 80084c6 <_svfiprintf_r+0xe6>
 800848e:	06d0      	lsls	r0, r2, #27
 8008490:	bf44      	itt	mi
 8008492:	2320      	movmi	r3, #32
 8008494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008498:	0711      	lsls	r1, r2, #28
 800849a:	bf44      	itt	mi
 800849c:	232b      	movmi	r3, #43	; 0x2b
 800849e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084a2:	f89a 3000 	ldrb.w	r3, [sl]
 80084a6:	2b2a      	cmp	r3, #42	; 0x2a
 80084a8:	d015      	beq.n	80084d6 <_svfiprintf_r+0xf6>
 80084aa:	9a07      	ldr	r2, [sp, #28]
 80084ac:	4654      	mov	r4, sl
 80084ae:	2000      	movs	r0, #0
 80084b0:	f04f 0c0a 	mov.w	ip, #10
 80084b4:	4621      	mov	r1, r4
 80084b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ba:	3b30      	subs	r3, #48	; 0x30
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d94e      	bls.n	800855e <_svfiprintf_r+0x17e>
 80084c0:	b1b0      	cbz	r0, 80084f0 <_svfiprintf_r+0x110>
 80084c2:	9207      	str	r2, [sp, #28]
 80084c4:	e014      	b.n	80084f0 <_svfiprintf_r+0x110>
 80084c6:	eba0 0308 	sub.w	r3, r0, r8
 80084ca:	fa09 f303 	lsl.w	r3, r9, r3
 80084ce:	4313      	orrs	r3, r2
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	46a2      	mov	sl, r4
 80084d4:	e7d2      	b.n	800847c <_svfiprintf_r+0x9c>
 80084d6:	9b03      	ldr	r3, [sp, #12]
 80084d8:	1d19      	adds	r1, r3, #4
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	9103      	str	r1, [sp, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfbb      	ittet	lt
 80084e2:	425b      	neglt	r3, r3
 80084e4:	f042 0202 	orrlt.w	r2, r2, #2
 80084e8:	9307      	strge	r3, [sp, #28]
 80084ea:	9307      	strlt	r3, [sp, #28]
 80084ec:	bfb8      	it	lt
 80084ee:	9204      	strlt	r2, [sp, #16]
 80084f0:	7823      	ldrb	r3, [r4, #0]
 80084f2:	2b2e      	cmp	r3, #46	; 0x2e
 80084f4:	d10c      	bne.n	8008510 <_svfiprintf_r+0x130>
 80084f6:	7863      	ldrb	r3, [r4, #1]
 80084f8:	2b2a      	cmp	r3, #42	; 0x2a
 80084fa:	d135      	bne.n	8008568 <_svfiprintf_r+0x188>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	9203      	str	r2, [sp, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	bfb8      	it	lt
 8008508:	f04f 33ff 	movlt.w	r3, #4294967295
 800850c:	3402      	adds	r4, #2
 800850e:	9305      	str	r3, [sp, #20]
 8008510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085dc <_svfiprintf_r+0x1fc>
 8008514:	7821      	ldrb	r1, [r4, #0]
 8008516:	2203      	movs	r2, #3
 8008518:	4650      	mov	r0, sl
 800851a:	f7f7 fe61 	bl	80001e0 <memchr>
 800851e:	b140      	cbz	r0, 8008532 <_svfiprintf_r+0x152>
 8008520:	2340      	movs	r3, #64	; 0x40
 8008522:	eba0 000a 	sub.w	r0, r0, sl
 8008526:	fa03 f000 	lsl.w	r0, r3, r0
 800852a:	9b04      	ldr	r3, [sp, #16]
 800852c:	4303      	orrs	r3, r0
 800852e:	3401      	adds	r4, #1
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008536:	4826      	ldr	r0, [pc, #152]	; (80085d0 <_svfiprintf_r+0x1f0>)
 8008538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800853c:	2206      	movs	r2, #6
 800853e:	f7f7 fe4f 	bl	80001e0 <memchr>
 8008542:	2800      	cmp	r0, #0
 8008544:	d038      	beq.n	80085b8 <_svfiprintf_r+0x1d8>
 8008546:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <_svfiprintf_r+0x1f4>)
 8008548:	bb1b      	cbnz	r3, 8008592 <_svfiprintf_r+0x1b2>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	3307      	adds	r3, #7
 800854e:	f023 0307 	bic.w	r3, r3, #7
 8008552:	3308      	adds	r3, #8
 8008554:	9303      	str	r3, [sp, #12]
 8008556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008558:	4433      	add	r3, r6
 800855a:	9309      	str	r3, [sp, #36]	; 0x24
 800855c:	e767      	b.n	800842e <_svfiprintf_r+0x4e>
 800855e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008562:	460c      	mov	r4, r1
 8008564:	2001      	movs	r0, #1
 8008566:	e7a5      	b.n	80084b4 <_svfiprintf_r+0xd4>
 8008568:	2300      	movs	r3, #0
 800856a:	3401      	adds	r4, #1
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	4619      	mov	r1, r3
 8008570:	f04f 0c0a 	mov.w	ip, #10
 8008574:	4620      	mov	r0, r4
 8008576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857a:	3a30      	subs	r2, #48	; 0x30
 800857c:	2a09      	cmp	r2, #9
 800857e:	d903      	bls.n	8008588 <_svfiprintf_r+0x1a8>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d0c5      	beq.n	8008510 <_svfiprintf_r+0x130>
 8008584:	9105      	str	r1, [sp, #20]
 8008586:	e7c3      	b.n	8008510 <_svfiprintf_r+0x130>
 8008588:	fb0c 2101 	mla	r1, ip, r1, r2
 800858c:	4604      	mov	r4, r0
 800858e:	2301      	movs	r3, #1
 8008590:	e7f0      	b.n	8008574 <_svfiprintf_r+0x194>
 8008592:	ab03      	add	r3, sp, #12
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	462a      	mov	r2, r5
 8008598:	4b0f      	ldr	r3, [pc, #60]	; (80085d8 <_svfiprintf_r+0x1f8>)
 800859a:	a904      	add	r1, sp, #16
 800859c:	4638      	mov	r0, r7
 800859e:	f7fd ffbb 	bl	8006518 <_printf_float>
 80085a2:	1c42      	adds	r2, r0, #1
 80085a4:	4606      	mov	r6, r0
 80085a6:	d1d6      	bne.n	8008556 <_svfiprintf_r+0x176>
 80085a8:	89ab      	ldrh	r3, [r5, #12]
 80085aa:	065b      	lsls	r3, r3, #25
 80085ac:	f53f af2c 	bmi.w	8008408 <_svfiprintf_r+0x28>
 80085b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085b2:	b01d      	add	sp, #116	; 0x74
 80085b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b8:	ab03      	add	r3, sp, #12
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	462a      	mov	r2, r5
 80085be:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <_svfiprintf_r+0x1f8>)
 80085c0:	a904      	add	r1, sp, #16
 80085c2:	4638      	mov	r0, r7
 80085c4:	f7fe fa4c 	bl	8006a60 <_printf_i>
 80085c8:	e7eb      	b.n	80085a2 <_svfiprintf_r+0x1c2>
 80085ca:	bf00      	nop
 80085cc:	0800ce34 	.word	0x0800ce34
 80085d0:	0800ce3e 	.word	0x0800ce3e
 80085d4:	08006519 	.word	0x08006519
 80085d8:	08008329 	.word	0x08008329
 80085dc:	0800ce3a 	.word	0x0800ce3a

080085e0 <_read_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4d07      	ldr	r5, [pc, #28]	; (8008600 <_read_r+0x20>)
 80085e4:	4604      	mov	r4, r0
 80085e6:	4608      	mov	r0, r1
 80085e8:	4611      	mov	r1, r2
 80085ea:	2200      	movs	r2, #0
 80085ec:	602a      	str	r2, [r5, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	f7f9 fa32 	bl	8001a58 <_read>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_read_r+0x1e>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_read_r+0x1e>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	2000a374 	.word	0x2000a374

08008604 <wcvt>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	b085      	sub	sp, #20
 800860a:	2b00      	cmp	r3, #0
 800860c:	461d      	mov	r5, r3
 800860e:	4614      	mov	r4, r2
 8008610:	bfbc      	itt	lt
 8008612:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008616:	4614      	movlt	r4, r2
 8008618:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800861a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800861c:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8008620:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8008624:	bfb6      	itet	lt
 8008626:	461d      	movlt	r5, r3
 8008628:	2300      	movge	r3, #0
 800862a:	232d      	movlt	r3, #45	; 0x2d
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008630:	f023 0820 	bic.w	r8, r3, #32
 8008634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008638:	d005      	beq.n	8008646 <wcvt+0x42>
 800863a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800863e:	d100      	bne.n	8008642 <wcvt+0x3e>
 8008640:	3601      	adds	r6, #1
 8008642:	2102      	movs	r1, #2
 8008644:	e000      	b.n	8008648 <wcvt+0x44>
 8008646:	2103      	movs	r1, #3
 8008648:	ab03      	add	r3, sp, #12
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	ab02      	add	r3, sp, #8
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	ec45 4b10 	vmov	d0, r4, r5
 8008654:	4653      	mov	r3, sl
 8008656:	4632      	mov	r2, r6
 8008658:	f7fe fc92 	bl	8006f80 <_dtoa_r>
 800865c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008660:	4607      	mov	r7, r0
 8008662:	d112      	bne.n	800868a <wcvt+0x86>
 8008664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008666:	07db      	lsls	r3, r3, #31
 8008668:	d40f      	bmi.n	800868a <wcvt+0x86>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	1bdb      	subs	r3, r3, r7
 800866e:	f8cb 3000 	str.w	r3, [fp]
 8008672:	2300      	movs	r3, #0
 8008674:	f8db 2000 	ldr.w	r2, [fp]
 8008678:	429a      	cmp	r2, r3
 800867a:	dd02      	ble.n	8008682 <wcvt+0x7e>
 800867c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800867e:	4293      	cmp	r3, r2
 8008680:	db2a      	blt.n	80086d8 <wcvt+0xd4>
 8008682:	9814      	ldr	r0, [sp, #80]	; 0x50
 8008684:	b005      	add	sp, #20
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800868e:	eb07 0906 	add.w	r9, r7, r6
 8008692:	d110      	bne.n	80086b6 <wcvt+0xb2>
 8008694:	783b      	ldrb	r3, [r7, #0]
 8008696:	2b30      	cmp	r3, #48	; 0x30
 8008698:	d10a      	bne.n	80086b0 <wcvt+0xac>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f8 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a6:	b918      	cbnz	r0, 80086b0 <wcvt+0xac>
 80086a8:	f1c6 0601 	rsb	r6, r6, #1
 80086ac:	f8ca 6000 	str.w	r6, [sl]
 80086b0:	f8da 3000 	ldr.w	r3, [sl]
 80086b4:	4499      	add	r9, r3
 80086b6:	2200      	movs	r2, #0
 80086b8:	2300      	movs	r3, #0
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f8 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 80086c2:	b108      	cbz	r0, 80086c8 <wcvt+0xc4>
 80086c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80086c8:	2230      	movs	r2, #48	; 0x30
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	454b      	cmp	r3, r9
 80086ce:	d2cc      	bcs.n	800866a <wcvt+0x66>
 80086d0:	1c59      	adds	r1, r3, #1
 80086d2:	9103      	str	r1, [sp, #12]
 80086d4:	701a      	strb	r2, [r3, #0]
 80086d6:	e7f8      	b.n	80086ca <wcvt+0xc6>
 80086d8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80086da:	5cfa      	ldrb	r2, [r7, r3]
 80086dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80086e0:	3301      	adds	r3, #1
 80086e2:	e7c7      	b.n	8008674 <wcvt+0x70>
 80086e4:	0000      	movs	r0, r0
	...

080086e8 <_svfwprintf_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ed2d 8b04 	vpush	{d8-d9}
 80086f0:	b0d3      	sub	sp, #332	; 0x14c
 80086f2:	461d      	mov	r5, r3
 80086f4:	2300      	movs	r3, #0
 80086f6:	4689      	mov	r9, r1
 80086f8:	9319      	str	r3, [sp, #100]	; 0x64
 80086fa:	4683      	mov	fp, r0
 80086fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80086fe:	f7ff fa4f 	bl	8007ba0 <_localeconv_r>
 8008702:	6803      	ldr	r3, [r0, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	9316      	str	r3, [sp, #88]	; 0x58
 8008708:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800870c:	061e      	lsls	r6, r3, #24
 800870e:	d51a      	bpl.n	8008746 <_svfwprintf_r+0x5e>
 8008710:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008714:	b9bb      	cbnz	r3, 8008746 <_svfwprintf_r+0x5e>
 8008716:	2140      	movs	r1, #64	; 0x40
 8008718:	4658      	mov	r0, fp
 800871a:	f7fd fde9 	bl	80062f0 <_malloc_r>
 800871e:	f8c9 0000 	str.w	r0, [r9]
 8008722:	f8c9 0010 	str.w	r0, [r9, #16]
 8008726:	b958      	cbnz	r0, 8008740 <_svfwprintf_r+0x58>
 8008728:	230c      	movs	r3, #12
 800872a:	f8cb 3000 	str.w	r3, [fp]
 800872e:	f04f 33ff 	mov.w	r3, #4294967295
 8008732:	930d      	str	r3, [sp, #52]	; 0x34
 8008734:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008736:	b053      	add	sp, #332	; 0x14c
 8008738:	ecbd 8b04 	vpop	{d8-d9}
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008740:	2340      	movs	r3, #64	; 0x40
 8008742:	f8c9 3014 	str.w	r3, [r9, #20]
 8008746:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 8008980 <_svfwprintf_r+0x298>
 800874a:	2300      	movs	r3, #0
 800874c:	930f      	str	r3, [sp, #60]	; 0x3c
 800874e:	9311      	str	r3, [sp, #68]	; 0x44
 8008750:	930d      	str	r3, [sp, #52]	; 0x34
 8008752:	eeb0 8a47 	vmov.f32	s16, s14
 8008756:	eef0 8a67 	vmov.f32	s17, s15
 800875a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800875c:	461c      	mov	r4, r3
 800875e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008762:	b10a      	cbz	r2, 8008768 <_svfwprintf_r+0x80>
 8008764:	2a25      	cmp	r2, #37	; 0x25
 8008766:	d1f9      	bne.n	800875c <_svfwprintf_r+0x74>
 8008768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876a:	42a3      	cmp	r3, r4
 800876c:	d00d      	beq.n	800878a <_svfwprintf_r+0xa2>
 800876e:	1ae6      	subs	r6, r4, r3
 8008770:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008772:	4633      	mov	r3, r6
 8008774:	4649      	mov	r1, r9
 8008776:	4658      	mov	r0, fp
 8008778:	f7ff fdd6 	bl	8008328 <__ssputs_r>
 800877c:	3001      	adds	r0, #1
 800877e:	f000 80e9 	beq.w	8008954 <_svfwprintf_r+0x26c>
 8008782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008784:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 8008788:	930d      	str	r3, [sp, #52]	; 0x34
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80e1 	beq.w	8008954 <_svfwprintf_r+0x26c>
 8008792:	2100      	movs	r1, #0
 8008794:	1d22      	adds	r2, r4, #4
 8008796:	9115      	str	r1, [sp, #84]	; 0x54
 8008798:	460e      	mov	r6, r1
 800879a:	f04f 34ff 	mov.w	r4, #4294967295
 800879e:	910c      	str	r1, [sp, #48]	; 0x30
 80087a0:	460f      	mov	r7, r1
 80087a2:	200a      	movs	r0, #10
 80087a4:	4613      	mov	r3, r2
 80087a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087aa:	9209      	str	r2, [sp, #36]	; 0x24
 80087ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80087ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b0:	2b39      	cmp	r3, #57	; 0x39
 80087b2:	d84c      	bhi.n	800884e <_svfwprintf_r+0x166>
 80087b4:	2b1f      	cmp	r3, #31
 80087b6:	d94f      	bls.n	8008858 <_svfwprintf_r+0x170>
 80087b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ba:	3b20      	subs	r3, #32
 80087bc:	2b19      	cmp	r3, #25
 80087be:	d84a      	bhi.n	8008856 <_svfwprintf_r+0x16e>
 80087c0:	e8df f003 	tbb	[pc, r3]
 80087c4:	7049496b 	.word	0x7049496b
 80087c8:	49494949 	.word	0x49494949
 80087cc:	6c734949 	.word	0x6c734949
 80087d0:	497d7a49 	.word	0x497d7a49
 80087d4:	9b9b9b98 	.word	0x9b9b9b98
 80087d8:	9b9b9b9b 	.word	0x9b9b9b9b
 80087dc:	9b9b      	.short	0x9b9b
 80087de:	2b33      	cmp	r3, #51	; 0x33
 80087e0:	d839      	bhi.n	8008856 <_svfwprintf_r+0x16e>
 80087e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80087e6:	00e5      	.short	0x00e5
 80087e8:	00e50038 	.word	0x00e50038
 80087ec:	00380038 	.word	0x00380038
 80087f0:	00380038 	.word	0x00380038
 80087f4:	0038009c 	.word	0x0038009c
 80087f8:	00380038 	.word	0x00380038
 80087fc:	00380038 	.word	0x00380038
 8008800:	00380038 	.word	0x00380038
 8008804:	00380038 	.word	0x00380038
 8008808:	00380038 	.word	0x00380038
 800880c:	0038031e 	.word	0x0038031e
 8008810:	00380038 	.word	0x00380038
 8008814:	00380038 	.word	0x00380038
 8008818:	00380038 	.word	0x00380038
 800881c:	00380038 	.word	0x00380038
 8008820:	00a50038 	.word	0x00a50038
 8008824:	00e500d3 	.word	0x00e500d3
 8008828:	00e500e5 	.word	0x00e500e5
 800882c:	00d3009f 	.word	0x00d3009f
 8008830:	00380038 	.word	0x00380038
 8008834:	003800a2 	.word	0x003800a2
 8008838:	02950284 	.word	0x02950284
 800883c:	00a202b3 	.word	0x00a202b3
 8008840:	02c20038 	.word	0x02c20038
 8008844:	03120038 	.word	0x03120038
 8008848:	00380038 	.word	0x00380038
 800884c:	0042      	.short	0x0042
 800884e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008850:	3b45      	subs	r3, #69	; 0x45
 8008852:	2b33      	cmp	r3, #51	; 0x33
 8008854:	d9c3      	bls.n	80087de <_svfwprintf_r+0xf6>
 8008856:	b111      	cbz	r1, 800885e <_svfwprintf_r+0x176>
 8008858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800885a:	2b00      	cmp	r3, #0
 800885c:	d07a      	beq.n	8008954 <_svfwprintf_r+0x26c>
 800885e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008860:	932a      	str	r3, [sp, #168]	; 0xa8
 8008862:	2000      	movs	r0, #0
 8008864:	9015      	str	r0, [sp, #84]	; 0x54
 8008866:	950a      	str	r5, [sp, #40]	; 0x28
 8008868:	e081      	b.n	800896e <_svfwprintf_r+0x286>
 800886a:	b101      	cbz	r1, 800886e <_svfwprintf_r+0x186>
 800886c:	9615      	str	r6, [sp, #84]	; 0x54
 800886e:	4b46      	ldr	r3, [pc, #280]	; (8008988 <_svfwprintf_r+0x2a0>)
 8008870:	930f      	str	r3, [sp, #60]	; 0x3c
 8008872:	462a      	mov	r2, r5
 8008874:	06f8      	lsls	r0, r7, #27
 8008876:	f852 3b04 	ldr.w	r3, [r2], #4
 800887a:	920a      	str	r2, [sp, #40]	; 0x28
 800887c:	d402      	bmi.n	8008884 <_svfwprintf_r+0x19c>
 800887e:	0679      	lsls	r1, r7, #25
 8008880:	bf48      	it	mi
 8008882:	b29b      	uxthmi	r3, r3
 8008884:	07fa      	lsls	r2, r7, #31
 8008886:	d506      	bpl.n	8008896 <_svfwprintf_r+0x1ae>
 8008888:	b12b      	cbz	r3, 8008896 <_svfwprintf_r+0x1ae>
 800888a:	2230      	movs	r2, #48	; 0x30
 800888c:	921a      	str	r2, [sp, #104]	; 0x68
 800888e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008890:	921b      	str	r2, [sp, #108]	; 0x6c
 8008892:	f047 0702 	orr.w	r7, r7, #2
 8008896:	2202      	movs	r2, #2
 8008898:	e242      	b.n	8008d20 <_svfwprintf_r+0x638>
 800889a:	b90e      	cbnz	r6, 80088a0 <_svfwprintf_r+0x1b8>
 800889c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800889e:	2101      	movs	r1, #1
 80088a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088a2:	e77f      	b.n	80087a4 <_svfwprintf_r+0xbc>
 80088a4:	f047 0701 	orr.w	r7, r7, #1
 80088a8:	e7fa      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 80088aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ae:	930c      	str	r3, [sp, #48]	; 0x30
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	daf5      	bge.n	80088a0 <_svfwprintf_r+0x1b8>
 80088b4:	425b      	negs	r3, r3
 80088b6:	930c      	str	r3, [sp, #48]	; 0x30
 80088b8:	f047 0704 	orr.w	r7, r7, #4
 80088bc:	e7f0      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 80088be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	2b2a      	cmp	r3, #42	; 0x2a
 80088c8:	d112      	bne.n	80088f0 <_svfwprintf_r+0x208>
 80088ca:	f855 4b04 	ldr.w	r4, [r5], #4
 80088ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80088d0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80088d4:	e7e4      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 80088d6:	fb00 3404 	mla	r4, r0, r4, r3
 80088da:	f852 3b04 	ldr.w	r3, [r2], #4
 80088de:	9309      	str	r3, [sp, #36]	; 0x24
 80088e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e2:	3b30      	subs	r3, #48	; 0x30
 80088e4:	2b09      	cmp	r3, #9
 80088e6:	d9f6      	bls.n	80088d6 <_svfwprintf_r+0x1ee>
 80088e8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 80088ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80088ee:	e75e      	b.n	80087ae <_svfwprintf_r+0xc6>
 80088f0:	2400      	movs	r4, #0
 80088f2:	e7f5      	b.n	80088e0 <_svfwprintf_r+0x1f8>
 80088f4:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 80088f8:	e7d2      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 80088fa:	2300      	movs	r3, #0
 80088fc:	930c      	str	r3, [sp, #48]	; 0x30
 80088fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	fb00 3302 	mla	r3, r0, r2, r3
 8008906:	3b30      	subs	r3, #48	; 0x30
 8008908:	930c      	str	r3, [sp, #48]	; 0x30
 800890a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800890c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008910:	930b      	str	r3, [sp, #44]	; 0x2c
 8008912:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008916:	2b09      	cmp	r3, #9
 8008918:	9209      	str	r2, [sp, #36]	; 0x24
 800891a:	d9f0      	bls.n	80088fe <_svfwprintf_r+0x216>
 800891c:	e747      	b.n	80087ae <_svfwprintf_r+0xc6>
 800891e:	f047 0708 	orr.w	r7, r7, #8
 8008922:	e7bd      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 8008924:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8008928:	e7ba      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 800892a:	f047 0710 	orr.w	r7, r7, #16
 800892e:	e7b7      	b.n	80088a0 <_svfwprintf_r+0x1b8>
 8008930:	b101      	cbz	r1, 8008934 <_svfwprintf_r+0x24c>
 8008932:	9615      	str	r6, [sp, #84]	; 0x54
 8008934:	462b      	mov	r3, r5
 8008936:	06fd      	lsls	r5, r7, #27
 8008938:	f853 0b04 	ldr.w	r0, [r3], #4
 800893c:	930a      	str	r3, [sp, #40]	; 0x28
 800893e:	d412      	bmi.n	8008966 <_svfwprintf_r+0x27e>
 8008940:	f000 fc82 	bl	8009248 <btowc>
 8008944:	1c44      	adds	r4, r0, #1
 8008946:	d10e      	bne.n	8008966 <_svfwprintf_r+0x27e>
 8008948:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800894c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008950:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008954:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008958:	f013 0f40 	tst.w	r3, #64	; 0x40
 800895c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800895e:	bf18      	it	ne
 8008960:	f04f 33ff 	movne.w	r3, #4294967295
 8008964:	e6e5      	b.n	8008732 <_svfwprintf_r+0x4a>
 8008966:	902a      	str	r0, [sp, #168]	; 0xa8
 8008968:	2000      	movs	r0, #0
 800896a:	902b      	str	r0, [sp, #172]	; 0xac
 800896c:	9015      	str	r0, [sp, #84]	; 0x54
 800896e:	4680      	mov	r8, r0
 8008970:	2401      	movs	r4, #1
 8008972:	4606      	mov	r6, r0
 8008974:	4605      	mov	r5, r0
 8008976:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 800897a:	e104      	b.n	8008b86 <_svfwprintf_r+0x49e>
 800897c:	f3af 8000 	nop.w
	...
 8008988:	0800cecc 	.word	0x0800cecc
 800898c:	b101      	cbz	r1, 8008990 <_svfwprintf_r+0x2a8>
 800898e:	9615      	str	r6, [sp, #84]	; 0x54
 8008990:	462a      	mov	r2, r5
 8008992:	06f9      	lsls	r1, r7, #27
 8008994:	f852 3b04 	ldr.w	r3, [r2], #4
 8008998:	920a      	str	r2, [sp, #40]	; 0x28
 800899a:	d402      	bmi.n	80089a2 <_svfwprintf_r+0x2ba>
 800899c:	067a      	lsls	r2, r7, #25
 800899e:	bf48      	it	mi
 80089a0:	b21b      	sxthmi	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	da02      	bge.n	80089ac <_svfwprintf_r+0x2c4>
 80089a6:	222d      	movs	r2, #45	; 0x2d
 80089a8:	425b      	negs	r3, r3
 80089aa:	9215      	str	r2, [sp, #84]	; 0x54
 80089ac:	2201      	movs	r2, #1
 80089ae:	e1b9      	b.n	8008d24 <_svfwprintf_r+0x63c>
 80089b0:	b101      	cbz	r1, 80089b4 <_svfwprintf_r+0x2cc>
 80089b2:	9615      	str	r6, [sp, #84]	; 0x54
 80089b4:	3507      	adds	r5, #7
 80089b6:	f025 0307 	bic.w	r3, r5, #7
 80089ba:	ecb3 7b02 	vldmia	r3!, {d7}
 80089be:	930a      	str	r3, [sp, #40]	; 0x28
 80089c0:	eeb0 8a47 	vmov.f32	s16, s14
 80089c4:	eef0 8a67 	vmov.f32	s17, s15
 80089c8:	ee18 3a90 	vmov	r3, s17
 80089cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d0:	ee09 3a90 	vmov	s19, r3
 80089d4:	eeb0 9a47 	vmov.f32	s18, s14
 80089d8:	4ba6      	ldr	r3, [pc, #664]	; (8008c74 <_svfwprintf_r+0x58c>)
 80089da:	ec51 0b19 	vmov	r0, r1, d9
 80089de:	f04f 32ff 	mov.w	r2, #4294967295
 80089e2:	f7f8 f8a3 	bl	8000b2c <__aeabi_dcmpun>
 80089e6:	b9f0      	cbnz	r0, 8008a26 <_svfwprintf_r+0x33e>
 80089e8:	4ba2      	ldr	r3, [pc, #648]	; (8008c74 <_svfwprintf_r+0x58c>)
 80089ea:	ec51 0b19 	vmov	r0, r1, d9
 80089ee:	f04f 32ff 	mov.w	r2, #4294967295
 80089f2:	f7f8 f87d 	bl	8000af0 <__aeabi_dcmple>
 80089f6:	b9b0      	cbnz	r0, 8008a26 <_svfwprintf_r+0x33e>
 80089f8:	ec51 0b18 	vmov	r0, r1, d8
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	f7f8 f86c 	bl	8000adc <__aeabi_dcmplt>
 8008a04:	b108      	cbz	r0, 8008a0a <_svfwprintf_r+0x322>
 8008a06:	232d      	movs	r3, #45	; 0x2d
 8008a08:	9315      	str	r3, [sp, #84]	; 0x54
 8008a0a:	4b9b      	ldr	r3, [pc, #620]	; (8008c78 <_svfwprintf_r+0x590>)
 8008a0c:	489b      	ldr	r0, [pc, #620]	; (8008c7c <_svfwprintf_r+0x594>)
 8008a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a10:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8008a14:	2a47      	cmp	r2, #71	; 0x47
 8008a16:	bf94      	ite	ls
 8008a18:	469a      	movls	sl, r3
 8008a1a:	4682      	movhi	sl, r0
 8008a1c:	f04f 0800 	mov.w	r8, #0
 8008a20:	2403      	movs	r4, #3
 8008a22:	4646      	mov	r6, r8
 8008a24:	e3d4      	b.n	80091d0 <_svfwprintf_r+0xae8>
 8008a26:	ec53 2b18 	vmov	r2, r3, d8
 8008a2a:	ec51 0b18 	vmov	r0, r1, d8
 8008a2e:	f7f8 f87d 	bl	8000b2c <__aeabi_dcmpun>
 8008a32:	b140      	cbz	r0, 8008a46 <_svfwprintf_r+0x35e>
 8008a34:	ee18 3a90 	vmov	r3, s17
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bfbc      	itt	lt
 8008a3c:	232d      	movlt	r3, #45	; 0x2d
 8008a3e:	9315      	strlt	r3, [sp, #84]	; 0x54
 8008a40:	488f      	ldr	r0, [pc, #572]	; (8008c80 <_svfwprintf_r+0x598>)
 8008a42:	4b90      	ldr	r3, [pc, #576]	; (8008c84 <_svfwprintf_r+0x59c>)
 8008a44:	e7e3      	b.n	8008a0e <_svfwprintf_r+0x326>
 8008a46:	1c63      	adds	r3, r4, #1
 8008a48:	f000 810f 	beq.w	8008c6a <_svfwprintf_r+0x582>
 8008a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4e:	f023 0320 	bic.w	r3, r3, #32
 8008a52:	2b47      	cmp	r3, #71	; 0x47
 8008a54:	d102      	bne.n	8008a5c <_svfwprintf_r+0x374>
 8008a56:	2c00      	cmp	r4, #0
 8008a58:	bf08      	it	eq
 8008a5a:	2401      	moveq	r4, #1
 8008a5c:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8008a60:	930e      	str	r3, [sp, #56]	; 0x38
 8008a62:	2328      	movs	r3, #40	; 0x28
 8008a64:	9307      	str	r3, [sp, #28]
 8008a66:	ab19      	add	r3, sp, #100	; 0x64
 8008a68:	9305      	str	r3, [sp, #20]
 8008a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a70:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8008a74:	ae18      	add	r6, sp, #96	; 0x60
 8008a76:	ad17      	add	r5, sp, #92	; 0x5c
 8008a78:	e9cd 4300 	strd	r4, r3, [sp]
 8008a7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a80:	ec53 2b18 	vmov	r2, r3, d8
 8008a84:	9603      	str	r6, [sp, #12]
 8008a86:	9502      	str	r5, [sp, #8]
 8008a88:	4658      	mov	r0, fp
 8008a8a:	f7ff fdbb 	bl	8008604 <wcvt>
 8008a8e:	4540      	cmp	r0, r8
 8008a90:	4682      	mov	sl, r0
 8008a92:	f040 80ec 	bne.w	8008c6e <_svfwprintf_r+0x586>
 8008a96:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008a98:	2928      	cmp	r1, #40	; 0x28
 8008a9a:	f340 80e8 	ble.w	8008c6e <_svfwprintf_r+0x586>
 8008a9e:	0089      	lsls	r1, r1, #2
 8008aa0:	4658      	mov	r0, fp
 8008aa2:	f7fd fc25 	bl	80062f0 <_malloc_r>
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f43f af4d 	beq.w	8008948 <_svfwprintf_r+0x260>
 8008aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ab0:	9502      	str	r5, [sp, #8]
 8008ab2:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8008ab6:	ab19      	add	r3, sp, #100	; 0x64
 8008ab8:	9305      	str	r3, [sp, #20]
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac2:	4658      	mov	r0, fp
 8008ac4:	e9cd 4300 	strd	r4, r3, [sp]
 8008ac8:	ec53 2b18 	vmov	r2, r3, d8
 8008acc:	f7ff fd9a 	bl	8008604 <wcvt>
 8008ad0:	4682      	mov	sl, r0
 8008ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008ad6:	f023 0320 	bic.w	r3, r3, #32
 8008ada:	2b47      	cmp	r3, #71	; 0x47
 8008adc:	f040 80d6 	bne.w	8008c8c <_svfwprintf_r+0x5a4>
 8008ae0:	1cee      	adds	r6, r5, #3
 8008ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ae4:	db02      	blt.n	8008aec <_svfwprintf_r+0x404>
 8008ae6:	42ac      	cmp	r4, r5
 8008ae8:	f280 80ec 	bge.w	8008cc4 <_svfwprintf_r+0x5dc>
 8008aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aee:	3b02      	subs	r3, #2
 8008af0:	9309      	str	r3, [sp, #36]	; 0x24
 8008af2:	1e6b      	subs	r3, r5, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af8:	9318      	str	r3, [sp, #96]	; 0x60
 8008afa:	bfb8      	it	lt
 8008afc:	f1c5 0301 	rsblt	r3, r5, #1
 8008b00:	921c      	str	r2, [sp, #112]	; 0x70
 8008b02:	bfb4      	ite	lt
 8008b04:	222d      	movlt	r2, #45	; 0x2d
 8008b06:	222b      	movge	r2, #43	; 0x2b
 8008b08:	2b09      	cmp	r3, #9
 8008b0a:	921d      	str	r2, [sp, #116]	; 0x74
 8008b0c:	f340 80d1 	ble.w	8008cb2 <_svfwprintf_r+0x5ca>
 8008b10:	a82a      	add	r0, sp, #168	; 0xa8
 8008b12:	250a      	movs	r5, #10
 8008b14:	4602      	mov	r2, r0
 8008b16:	fb93 f4f5 	sdiv	r4, r3, r5
 8008b1a:	fb05 3114 	mls	r1, r5, r4, r3
 8008b1e:	3130      	adds	r1, #48	; 0x30
 8008b20:	f842 1c04 	str.w	r1, [r2, #-4]
 8008b24:	4619      	mov	r1, r3
 8008b26:	2963      	cmp	r1, #99	; 0x63
 8008b28:	f1a0 0004 	sub.w	r0, r0, #4
 8008b2c:	4623      	mov	r3, r4
 8008b2e:	dcf1      	bgt.n	8008b14 <_svfwprintf_r+0x42c>
 8008b30:	3330      	adds	r3, #48	; 0x30
 8008b32:	f840 3c04 	str.w	r3, [r0, #-4]
 8008b36:	f1a2 0108 	sub.w	r1, r2, #8
 8008b3a:	a81e      	add	r0, sp, #120	; 0x78
 8008b3c:	ab2a      	add	r3, sp, #168	; 0xa8
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f0c0 80b2 	bcc.w	8008ca8 <_svfwprintf_r+0x5c0>
 8008b44:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 8008b48:	1aa4      	subs	r4, r4, r2
 8008b4a:	f024 0403 	bic.w	r4, r4, #3
 8008b4e:	3a0b      	subs	r2, #11
 8008b50:	4293      	cmp	r3, r2
 8008b52:	bf38      	it	cc
 8008b54:	2400      	movcc	r4, #0
 8008b56:	ab1e      	add	r3, sp, #120	; 0x78
 8008b58:	441c      	add	r4, r3
 8008b5a:	a81c      	add	r0, sp, #112	; 0x70
 8008b5c:	1a24      	subs	r4, r4, r0
 8008b5e:	10a3      	asrs	r3, r4, #2
 8008b60:	9311      	str	r3, [sp, #68]	; 0x44
 8008b62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8008b6a:	dc02      	bgt.n	8008b72 <_svfwprintf_r+0x48a>
 8008b6c:	f017 0501 	ands.w	r5, r7, #1
 8008b70:	d001      	beq.n	8008b76 <_svfwprintf_r+0x48e>
 8008b72:	3401      	adds	r4, #1
 8008b74:	2500      	movs	r5, #0
 8008b76:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008b78:	2e00      	cmp	r6, #0
 8008b7a:	f000 817e 	beq.w	8008e7a <_svfwprintf_r+0x792>
 8008b7e:	232d      	movs	r3, #45	; 0x2d
 8008b80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008b82:	9315      	str	r3, [sp, #84]	; 0x54
 8008b84:	2600      	movs	r6, #0
 8008b86:	42a6      	cmp	r6, r4
 8008b88:	4633      	mov	r3, r6
 8008b8a:	bfb8      	it	lt
 8008b8c:	4623      	movlt	r3, r4
 8008b8e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b92:	b113      	cbz	r3, 8008b9a <_svfwprintf_r+0x4b2>
 8008b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b96:	3301      	adds	r3, #1
 8008b98:	930e      	str	r3, [sp, #56]	; 0x38
 8008b9a:	f017 0302 	ands.w	r3, r7, #2
 8008b9e:	9312      	str	r3, [sp, #72]	; 0x48
 8008ba0:	bf1e      	ittt	ne
 8008ba2:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 8008ba4:	3302      	addne	r3, #2
 8008ba6:	930e      	strne	r3, [sp, #56]	; 0x38
 8008ba8:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8008bac:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bae:	f000 8166 	beq.w	8008e7e <_svfwprintf_r+0x796>
 8008bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bb4:	b143      	cbz	r3, 8008bc8 <_svfwprintf_r+0x4e0>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	aa15      	add	r2, sp, #84	; 0x54
 8008bba:	4649      	mov	r1, r9
 8008bbc:	4658      	mov	r0, fp
 8008bbe:	f7ff fbb3 	bl	8008328 <__ssputs_r>
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	f000 816e 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008bc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bca:	b143      	cbz	r3, 8008bde <_svfwprintf_r+0x4f6>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	aa1a      	add	r2, sp, #104	; 0x68
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	f7ff fba8 	bl	8008328 <__ssputs_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	f000 8163 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008bde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d113      	bne.n	8008c0c <_svfwprintf_r+0x524>
 8008be4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	9310      	str	r3, [sp, #64]	; 0x40
 8008bee:	dd0d      	ble.n	8008c0c <_svfwprintf_r+0x524>
 8008bf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bf2:	4a25      	ldr	r2, [pc, #148]	; (8008c88 <_svfwprintf_r+0x5a0>)
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	f300 816a 	bgt.w	8008ece <_svfwprintf_r+0x7e6>
 8008bfa:	4a23      	ldr	r2, [pc, #140]	; (8008c88 <_svfwprintf_r+0x5a0>)
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4658      	mov	r0, fp
 8008c02:	f7ff fb91 	bl	8008328 <__ssputs_r>
 8008c06:	3001      	adds	r0, #1
 8008c08:	f000 814c 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008c0c:	1b36      	subs	r6, r6, r4
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	dd0c      	ble.n	8008c2c <_svfwprintf_r+0x544>
 8008c12:	2e10      	cmp	r6, #16
 8008c14:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <_svfwprintf_r+0x5a0>)
 8008c16:	f300 8165 	bgt.w	8008ee4 <_svfwprintf_r+0x7fc>
 8008c1a:	4a1b      	ldr	r2, [pc, #108]	; (8008c88 <_svfwprintf_r+0x5a0>)
 8008c1c:	00b3      	lsls	r3, r6, #2
 8008c1e:	4649      	mov	r1, r9
 8008c20:	4658      	mov	r0, fp
 8008c22:	f7ff fb81 	bl	8008328 <__ssputs_r>
 8008c26:	3001      	adds	r0, #1
 8008c28:	f000 813c 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008c2c:	05f9      	lsls	r1, r7, #23
 8008c2e:	f100 8162 	bmi.w	8008ef6 <_svfwprintf_r+0x80e>
 8008c32:	00a3      	lsls	r3, r4, #2
 8008c34:	4652      	mov	r2, sl
 8008c36:	4649      	mov	r1, r9
 8008c38:	4658      	mov	r0, fp
 8008c3a:	f7ff fb75 	bl	8008328 <__ssputs_r>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	f000 8130 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008c44:	077a      	lsls	r2, r7, #29
 8008c46:	f100 8281 	bmi.w	800914c <_svfwprintf_r+0xa64>
 8008c4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c4e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008c50:	428a      	cmp	r2, r1
 8008c52:	bfac      	ite	ge
 8008c54:	189b      	addge	r3, r3, r2
 8008c56:	185b      	addlt	r3, r3, r1
 8008c58:	930d      	str	r3, [sp, #52]	; 0x34
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d055      	beq.n	8008d0c <_svfwprintf_r+0x624>
 8008c60:	4641      	mov	r1, r8
 8008c62:	4658      	mov	r0, fp
 8008c64:	f7fd fad8 	bl	8006218 <_free_r>
 8008c68:	e050      	b.n	8008d0c <_svfwprintf_r+0x624>
 8008c6a:	2406      	movs	r4, #6
 8008c6c:	e6f6      	b.n	8008a5c <_svfwprintf_r+0x374>
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	e72e      	b.n	8008ad2 <_svfwprintf_r+0x3ea>
 8008c74:	7fefffff 	.word	0x7fefffff
 8008c78:	0800ce48 	.word	0x0800ce48
 8008c7c:	0800ce58 	.word	0x0800ce58
 8008c80:	0800ce78 	.word	0x0800ce78
 8008c84:	0800ce68 	.word	0x0800ce68
 8008c88:	0800cf58 	.word	0x0800cf58
 8008c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c8e:	2b66      	cmp	r3, #102	; 0x66
 8008c90:	f47f af2f 	bne.w	8008af2 <_svfwprintf_r+0x40a>
 8008c94:	f007 0301 	and.w	r3, r7, #1
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	ea43 0304 	orr.w	r3, r3, r4
 8008c9e:	dd0e      	ble.n	8008cbe <_svfwprintf_r+0x5d6>
 8008ca0:	b1fb      	cbz	r3, 8008ce2 <_svfwprintf_r+0x5fa>
 8008ca2:	3401      	adds	r4, #1
 8008ca4:	442c      	add	r4, r5
 8008ca6:	e766      	b.n	8008b76 <_svfwprintf_r+0x48e>
 8008ca8:	f851 4b04 	ldr.w	r4, [r1], #4
 8008cac:	f840 4b04 	str.w	r4, [r0], #4
 8008cb0:	e745      	b.n	8008b3e <_svfwprintf_r+0x456>
 8008cb2:	2230      	movs	r2, #48	; 0x30
 8008cb4:	4413      	add	r3, r2
 8008cb6:	921e      	str	r2, [sp, #120]	; 0x78
 8008cb8:	931f      	str	r3, [sp, #124]	; 0x7c
 8008cba:	ac20      	add	r4, sp, #128	; 0x80
 8008cbc:	e74d      	b.n	8008b5a <_svfwprintf_r+0x472>
 8008cbe:	b193      	cbz	r3, 8008ce6 <_svfwprintf_r+0x5fe>
 8008cc0:	3402      	adds	r4, #2
 8008cc2:	e758      	b.n	8008b76 <_svfwprintf_r+0x48e>
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc05      	bgt.n	8008cd4 <_svfwprintf_r+0x5ec>
 8008cc8:	07fc      	lsls	r4, r7, #31
 8008cca:	d50e      	bpl.n	8008cea <_svfwprintf_r+0x602>
 8008ccc:	1c6c      	adds	r4, r5, #1
 8008cce:	2367      	movs	r3, #103	; 0x67
 8008cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd2:	e750      	b.n	8008b76 <_svfwprintf_r+0x48e>
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	bfd4      	ite	le
 8008cd8:	f1c5 0402 	rsble	r4, r5, #2
 8008cdc:	2401      	movgt	r4, #1
 8008cde:	441c      	add	r4, r3
 8008ce0:	e7f5      	b.n	8008cce <_svfwprintf_r+0x5e6>
 8008ce2:	462c      	mov	r4, r5
 8008ce4:	e747      	b.n	8008b76 <_svfwprintf_r+0x48e>
 8008ce6:	2401      	movs	r4, #1
 8008ce8:	e745      	b.n	8008b76 <_svfwprintf_r+0x48e>
 8008cea:	462c      	mov	r4, r5
 8008cec:	e7ef      	b.n	8008cce <_svfwprintf_r+0x5e6>
 8008cee:	b101      	cbz	r1, 8008cf2 <_svfwprintf_r+0x60a>
 8008cf0:	9615      	str	r6, [sp, #84]	; 0x54
 8008cf2:	1d2b      	adds	r3, r5, #4
 8008cf4:	06f8      	lsls	r0, r7, #27
 8008cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf8:	d503      	bpl.n	8008d02 <_svfwprintf_r+0x61a>
 8008cfa:	682b      	ldr	r3, [r5, #0]
 8008cfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e004      	b.n	8008d0c <_svfwprintf_r+0x624>
 8008d02:	0679      	lsls	r1, r7, #25
 8008d04:	d5f9      	bpl.n	8008cfa <_svfwprintf_r+0x612>
 8008d06:	682b      	ldr	r3, [r5, #0]
 8008d08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008d0e:	e524      	b.n	800875a <_svfwprintf_r+0x72>
 8008d10:	462a      	mov	r2, r5
 8008d12:	f017 0110 	ands.w	r1, r7, #16
 8008d16:	f852 3b04 	ldr.w	r3, [r2], #4
 8008d1a:	920a      	str	r2, [sp, #40]	; 0x28
 8008d1c:	d011      	beq.n	8008d42 <_svfwprintf_r+0x65a>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2100      	movs	r1, #0
 8008d22:	9115      	str	r1, [sp, #84]	; 0x54
 8008d24:	1c66      	adds	r6, r4, #1
 8008d26:	f000 822e 	beq.w	8009186 <_svfwprintf_r+0xa9e>
 8008d2a:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f040 822d 	bne.w	800918e <_svfwprintf_r+0xaa6>
 8008d34:	2c00      	cmp	r4, #0
 8008d36:	f000 8098 	beq.w	8008e6a <_svfwprintf_r+0x782>
 8008d3a:	2a01      	cmp	r2, #1
 8008d3c:	f040 822a 	bne.w	8009194 <_svfwprintf_r+0xaac>
 8008d40:	e075      	b.n	8008e2e <_svfwprintf_r+0x746>
 8008d42:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8008d46:	d0eb      	beq.n	8008d20 <_svfwprintf_r+0x638>
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	e7e8      	b.n	8008d1e <_svfwprintf_r+0x636>
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	2178      	movs	r1, #120	; 0x78
 8008d50:	f852 3b04 	ldr.w	r3, [r2], #4
 8008d54:	920a      	str	r2, [sp, #40]	; 0x28
 8008d56:	2230      	movs	r2, #48	; 0x30
 8008d58:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 8008d5c:	4a9e      	ldr	r2, [pc, #632]	; (8008fd8 <_svfwprintf_r+0x8f0>)
 8008d5e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d60:	f047 0702 	orr.w	r7, r7, #2
 8008d64:	2202      	movs	r2, #2
 8008d66:	9109      	str	r1, [sp, #36]	; 0x24
 8008d68:	e7da      	b.n	8008d20 <_svfwprintf_r+0x638>
 8008d6a:	462b      	mov	r3, r5
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	f853 ab04 	ldr.w	sl, [r3], #4
 8008d72:	930a      	str	r3, [sp, #40]	; 0x28
 8008d74:	f017 0510 	ands.w	r5, r7, #16
 8008d78:	9615      	str	r6, [sp, #84]	; 0x54
 8008d7a:	d12d      	bne.n	8008dd8 <_svfwprintf_r+0x6f0>
 8008d7c:	1c62      	adds	r2, r4, #1
 8008d7e:	d014      	beq.n	8008daa <_svfwprintf_r+0x6c2>
 8008d80:	4622      	mov	r2, r4
 8008d82:	4629      	mov	r1, r5
 8008d84:	4650      	mov	r0, sl
 8008d86:	4626      	mov	r6, r4
 8008d88:	f7f7 fa2a 	bl	80001e0 <memchr>
 8008d8c:	b108      	cbz	r0, 8008d92 <_svfwprintf_r+0x6aa>
 8008d8e:	eba0 060a 	sub.w	r6, r0, sl
 8008d92:	2e27      	cmp	r6, #39	; 0x27
 8008d94:	d90e      	bls.n	8008db4 <_svfwprintf_r+0x6cc>
 8008d96:	1c71      	adds	r1, r6, #1
 8008d98:	0089      	lsls	r1, r1, #2
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f7fd faa8 	bl	80062f0 <_malloc_r>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	f43f add1 	beq.w	8008948 <_svfwprintf_r+0x260>
 8008da6:	4680      	mov	r8, r0
 8008da8:	e007      	b.n	8008dba <_svfwprintf_r+0x6d2>
 8008daa:	4650      	mov	r0, sl
 8008dac:	f7f7 fa10 	bl	80001d0 <strlen>
 8008db0:	4606      	mov	r6, r0
 8008db2:	e7ee      	b.n	8008d92 <_svfwprintf_r+0x6aa>
 8008db4:	f04f 0800 	mov.w	r8, #0
 8008db8:	a82a      	add	r0, sp, #168	; 0xa8
 8008dba:	4634      	mov	r4, r6
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	42b3      	cmp	r3, r6
 8008dc0:	d104      	bne.n	8008dcc <_svfwprintf_r+0x6e4>
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8008dc8:	4682      	mov	sl, r0
 8008dca:	e6dc      	b.n	8008b86 <_svfwprintf_r+0x49e>
 8008dcc:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8008dd0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	e7f2      	b.n	8008dbe <_svfwprintf_r+0x6d6>
 8008dd8:	1c63      	adds	r3, r4, #1
 8008dda:	d011      	beq.n	8008e00 <_svfwprintf_r+0x718>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	4631      	mov	r1, r6
 8008de0:	4650      	mov	r0, sl
 8008de2:	f000 fa04 	bl	80091ee <wmemchr>
 8008de6:	4680      	mov	r8, r0
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f43f ae1a 	beq.w	8008a22 <_svfwprintf_r+0x33a>
 8008dee:	eba0 080a 	sub.w	r8, r0, sl
 8008df2:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8008df6:	4544      	cmp	r4, r8
 8008df8:	bfa8      	it	ge
 8008dfa:	4644      	movge	r4, r8
 8008dfc:	46b0      	mov	r8, r6
 8008dfe:	e610      	b.n	8008a22 <_svfwprintf_r+0x33a>
 8008e00:	4650      	mov	r0, sl
 8008e02:	f000 f9eb 	bl	80091dc <wcslen>
 8008e06:	4604      	mov	r4, r0
 8008e08:	e7f8      	b.n	8008dfc <_svfwprintf_r+0x714>
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	06fe      	lsls	r6, r7, #27
 8008e0e:	f852 3b04 	ldr.w	r3, [r2], #4
 8008e12:	920a      	str	r2, [sp, #40]	; 0x28
 8008e14:	d501      	bpl.n	8008e1a <_svfwprintf_r+0x732>
 8008e16:	2201      	movs	r2, #1
 8008e18:	e782      	b.n	8008d20 <_svfwprintf_r+0x638>
 8008e1a:	067d      	lsls	r5, r7, #25
 8008e1c:	bf48      	it	mi
 8008e1e:	b29b      	uxthmi	r3, r3
 8008e20:	e7f9      	b.n	8008e16 <_svfwprintf_r+0x72e>
 8008e22:	b101      	cbz	r1, 8008e26 <_svfwprintf_r+0x73e>
 8008e24:	9615      	str	r6, [sp, #84]	; 0x54
 8008e26:	4b6d      	ldr	r3, [pc, #436]	; (8008fdc <_svfwprintf_r+0x8f4>)
 8008e28:	e522      	b.n	8008870 <_svfwprintf_r+0x188>
 8008e2a:	2b09      	cmp	r3, #9
 8008e2c:	d804      	bhi.n	8008e38 <_svfwprintf_r+0x750>
 8008e2e:	3330      	adds	r3, #48	; 0x30
 8008e30:	9351      	str	r3, [sp, #324]	; 0x144
 8008e32:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 8008e36:	e1c3      	b.n	80091c0 <_svfwprintf_r+0xad8>
 8008e38:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8008e3c:	250a      	movs	r5, #10
 8008e3e:	fbb3 f0f5 	udiv	r0, r3, r5
 8008e42:	fb05 3210 	mls	r2, r5, r0, r3
 8008e46:	3230      	adds	r2, #48	; 0x30
 8008e48:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	2a09      	cmp	r2, #9
 8008e50:	4603      	mov	r3, r0
 8008e52:	d8f4      	bhi.n	8008e3e <_svfwprintf_r+0x756>
 8008e54:	e1b4      	b.n	80091c0 <_svfwprintf_r+0xad8>
 8008e56:	f003 020f 	and.w	r2, r3, #15
 8008e5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008e5c:	091b      	lsrs	r3, r3, #4
 8008e5e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8008e62:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8008e66:	d1f6      	bne.n	8008e56 <_svfwprintf_r+0x76e>
 8008e68:	e1aa      	b.n	80091c0 <_svfwprintf_r+0xad8>
 8008e6a:	b91a      	cbnz	r2, 8008e74 <_svfwprintf_r+0x78c>
 8008e6c:	07f8      	lsls	r0, r7, #31
 8008e6e:	d501      	bpl.n	8008e74 <_svfwprintf_r+0x78c>
 8008e70:	2330      	movs	r3, #48	; 0x30
 8008e72:	e7dd      	b.n	8008e30 <_svfwprintf_r+0x748>
 8008e74:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8008e78:	e1a2      	b.n	80091c0 <_svfwprintf_r+0xad8>
 8008e7a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008e7c:	e683      	b.n	8008b86 <_svfwprintf_r+0x49e>
 8008e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e82:	1a9b      	subs	r3, r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	9310      	str	r3, [sp, #64]	; 0x40
 8008e88:	f77f ae93 	ble.w	8008bb2 <_svfwprintf_r+0x4ca>
 8008e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	dc11      	bgt.n	8008eb6 <_svfwprintf_r+0x7ce>
 8008e92:	4a53      	ldr	r2, [pc, #332]	; (8008fe0 <_svfwprintf_r+0x8f8>)
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4649      	mov	r1, r9
 8008e98:	4658      	mov	r0, fp
 8008e9a:	f7ff fa45 	bl	8008328 <__ssputs_r>
 8008e9e:	3001      	adds	r0, #1
 8008ea0:	f47f ae87 	bne.w	8008bb2 <_svfwprintf_r+0x4ca>
 8008ea4:	f1b8 0f00 	cmp.w	r8, #0
 8008ea8:	f43f ad54 	beq.w	8008954 <_svfwprintf_r+0x26c>
 8008eac:	4641      	mov	r1, r8
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f7fd f9b2 	bl	8006218 <_free_r>
 8008eb4:	e54e      	b.n	8008954 <_svfwprintf_r+0x26c>
 8008eb6:	4a4a      	ldr	r2, [pc, #296]	; (8008fe0 <_svfwprintf_r+0x8f8>)
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	4649      	mov	r1, r9
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	f7ff fa33 	bl	8008328 <__ssputs_r>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d0ee      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008ec6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ec8:	3b10      	subs	r3, #16
 8008eca:	9310      	str	r3, [sp, #64]	; 0x40
 8008ecc:	e7de      	b.n	8008e8c <_svfwprintf_r+0x7a4>
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4658      	mov	r0, fp
 8008ed4:	f7ff fa28 	bl	8008328 <__ssputs_r>
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d0e3      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008edc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ede:	3b10      	subs	r3, #16
 8008ee0:	9310      	str	r3, [sp, #64]	; 0x40
 8008ee2:	e685      	b.n	8008bf0 <_svfwprintf_r+0x508>
 8008ee4:	2340      	movs	r3, #64	; 0x40
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	4658      	mov	r0, fp
 8008eea:	f7ff fa1d 	bl	8008328 <__ssputs_r>
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d0d8      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008ef2:	3e10      	subs	r6, #16
 8008ef4:	e68d      	b.n	8008c12 <_svfwprintf_r+0x52a>
 8008ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef8:	2b65      	cmp	r3, #101	; 0x65
 8008efa:	f240 80e5 	bls.w	80090c8 <_svfwprintf_r+0x9e0>
 8008efe:	ec51 0b18 	vmov	r0, r1, d8
 8008f02:	2200      	movs	r2, #0
 8008f04:	2300      	movs	r3, #0
 8008f06:	f7f7 fddf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f0a:	b358      	cbz	r0, 8008f64 <_svfwprintf_r+0x87c>
 8008f0c:	4a35      	ldr	r2, [pc, #212]	; (8008fe4 <_svfwprintf_r+0x8fc>)
 8008f0e:	2304      	movs	r3, #4
 8008f10:	4649      	mov	r1, r9
 8008f12:	4658      	mov	r0, fp
 8008f14:	f7ff fa08 	bl	8008328 <__ssputs_r>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d0c3      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008f1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008f20:	429a      	cmp	r2, r3
 8008f22:	db02      	blt.n	8008f2a <_svfwprintf_r+0x842>
 8008f24:	07fb      	lsls	r3, r7, #31
 8008f26:	f57f ae8d 	bpl.w	8008c44 <_svfwprintf_r+0x55c>
 8008f2a:	2304      	movs	r3, #4
 8008f2c:	aa16      	add	r2, sp, #88	; 0x58
 8008f2e:	4649      	mov	r1, r9
 8008f30:	4658      	mov	r0, fp
 8008f32:	f7ff f9f9 	bl	8008328 <__ssputs_r>
 8008f36:	3001      	adds	r0, #1
 8008f38:	d0b4      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008f3a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008f3c:	3c01      	subs	r4, #1
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	f77f ae80 	ble.w	8008c44 <_svfwprintf_r+0x55c>
 8008f44:	4d28      	ldr	r5, [pc, #160]	; (8008fe8 <_svfwprintf_r+0x900>)
 8008f46:	2c10      	cmp	r4, #16
 8008f48:	dc02      	bgt.n	8008f50 <_svfwprintf_r+0x868>
 8008f4a:	00a3      	lsls	r3, r4, #2
 8008f4c:	4a26      	ldr	r2, [pc, #152]	; (8008fe8 <_svfwprintf_r+0x900>)
 8008f4e:	e672      	b.n	8008c36 <_svfwprintf_r+0x54e>
 8008f50:	2340      	movs	r3, #64	; 0x40
 8008f52:	462a      	mov	r2, r5
 8008f54:	4649      	mov	r1, r9
 8008f56:	4658      	mov	r0, fp
 8008f58:	f7ff f9e6 	bl	8008328 <__ssputs_r>
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d0a1      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008f60:	3c10      	subs	r4, #16
 8008f62:	e7f0      	b.n	8008f46 <_svfwprintf_r+0x85e>
 8008f64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	dc40      	bgt.n	8008fec <_svfwprintf_r+0x904>
 8008f6a:	4a1e      	ldr	r2, [pc, #120]	; (8008fe4 <_svfwprintf_r+0x8fc>)
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	4649      	mov	r1, r9
 8008f70:	4658      	mov	r0, fp
 8008f72:	f7ff f9d9 	bl	8008328 <__ssputs_r>
 8008f76:	3001      	adds	r0, #1
 8008f78:	d094      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008f7a:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f007 0201 	and.w	r2, r7, #1
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f43f ae5d 	beq.w	8008c44 <_svfwprintf_r+0x55c>
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	aa16      	add	r2, sp, #88	; 0x58
 8008f8e:	4649      	mov	r1, r9
 8008f90:	4658      	mov	r0, fp
 8008f92:	f7ff f9c9 	bl	8008328 <__ssputs_r>
 8008f96:	3001      	adds	r0, #1
 8008f98:	d084      	beq.n	8008ea4 <_svfwprintf_r+0x7bc>
 8008f9a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	da0c      	bge.n	8008fba <_svfwprintf_r+0x8d2>
 8008fa0:	4d11      	ldr	r5, [pc, #68]	; (8008fe8 <_svfwprintf_r+0x900>)
 8008fa2:	4264      	negs	r4, r4
 8008fa4:	2c10      	cmp	r4, #16
 8008fa6:	dc0b      	bgt.n	8008fc0 <_svfwprintf_r+0x8d8>
 8008fa8:	4a0f      	ldr	r2, [pc, #60]	; (8008fe8 <_svfwprintf_r+0x900>)
 8008faa:	00a3      	lsls	r3, r4, #2
 8008fac:	4649      	mov	r1, r9
 8008fae:	4658      	mov	r0, fp
 8008fb0:	f7ff f9ba 	bl	8008328 <__ssputs_r>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f43f af75 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008fba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	e639      	b.n	8008c34 <_svfwprintf_r+0x54c>
 8008fc0:	2340      	movs	r3, #64	; 0x40
 8008fc2:	462a      	mov	r2, r5
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	4658      	mov	r0, fp
 8008fc8:	f7ff f9ae 	bl	8008328 <__ssputs_r>
 8008fcc:	3001      	adds	r0, #1
 8008fce:	f43f af69 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8008fd2:	3c10      	subs	r4, #16
 8008fd4:	e7e6      	b.n	8008fa4 <_svfwprintf_r+0x8bc>
 8008fd6:	bf00      	nop
 8008fd8:	0800cecc 	.word	0x0800cecc
 8008fdc:	0800ce88 	.word	0x0800ce88
 8008fe0:	0800cf18 	.word	0x0800cf18
 8008fe4:	0800cf10 	.word	0x0800cf10
 8008fe8:	0800cf58 	.word	0x0800cf58
 8008fec:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008fee:	f344 041d 	sbfx	r4, r4, #0, #30
 8008ff2:	42ac      	cmp	r4, r5
 8008ff4:	bfa8      	it	ge
 8008ff6:	462c      	movge	r4, r5
 8008ff8:	2c00      	cmp	r4, #0
 8008ffa:	dc20      	bgt.n	800903e <_svfwprintf_r+0x956>
 8008ffc:	2c00      	cmp	r4, #0
 8008ffe:	bfac      	ite	ge
 8009000:	1b2e      	subge	r6, r5, r4
 8009002:	462e      	movlt	r6, r5
 8009004:	2e00      	cmp	r6, #0
 8009006:	dd0b      	ble.n	8009020 <_svfwprintf_r+0x938>
 8009008:	4c72      	ldr	r4, [pc, #456]	; (80091d4 <_svfwprintf_r+0xaec>)
 800900a:	2e10      	cmp	r6, #16
 800900c:	dc20      	bgt.n	8009050 <_svfwprintf_r+0x968>
 800900e:	4a71      	ldr	r2, [pc, #452]	; (80091d4 <_svfwprintf_r+0xaec>)
 8009010:	00b3      	lsls	r3, r6, #2
 8009012:	4649      	mov	r1, r9
 8009014:	4658      	mov	r0, fp
 8009016:	f7ff f987 	bl	8008328 <__ssputs_r>
 800901a:	3001      	adds	r0, #1
 800901c:	f43f af42 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8009020:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009024:	429a      	cmp	r2, r3
 8009026:	ea4f 0585 	mov.w	r5, r5, lsl #2
 800902a:	da1c      	bge.n	8009066 <_svfwprintf_r+0x97e>
 800902c:	2304      	movs	r3, #4
 800902e:	aa16      	add	r2, sp, #88	; 0x58
 8009030:	4649      	mov	r1, r9
 8009032:	4658      	mov	r0, fp
 8009034:	f7ff f978 	bl	8008328 <__ssputs_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d116      	bne.n	800906a <_svfwprintf_r+0x982>
 800903c:	e732      	b.n	8008ea4 <_svfwprintf_r+0x7bc>
 800903e:	00a3      	lsls	r3, r4, #2
 8009040:	4652      	mov	r2, sl
 8009042:	4649      	mov	r1, r9
 8009044:	4658      	mov	r0, fp
 8009046:	f7ff f96f 	bl	8008328 <__ssputs_r>
 800904a:	3001      	adds	r0, #1
 800904c:	d1d6      	bne.n	8008ffc <_svfwprintf_r+0x914>
 800904e:	e729      	b.n	8008ea4 <_svfwprintf_r+0x7bc>
 8009050:	2340      	movs	r3, #64	; 0x40
 8009052:	4622      	mov	r2, r4
 8009054:	4649      	mov	r1, r9
 8009056:	4658      	mov	r0, fp
 8009058:	f7ff f966 	bl	8008328 <__ssputs_r>
 800905c:	3001      	adds	r0, #1
 800905e:	f43f af21 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8009062:	3e10      	subs	r6, #16
 8009064:	e7d1      	b.n	800900a <_svfwprintf_r+0x922>
 8009066:	07fe      	lsls	r6, r7, #31
 8009068:	d4e0      	bmi.n	800902c <_svfwprintf_r+0x944>
 800906a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800906c:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 8009070:	10a2      	asrs	r2, r4, #2
 8009072:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009074:	1b1c      	subs	r4, r3, r4
 8009076:	4294      	cmp	r4, r2
 8009078:	bfa8      	it	ge
 800907a:	4614      	movge	r4, r2
 800907c:	2c00      	cmp	r4, #0
 800907e:	dd09      	ble.n	8009094 <_svfwprintf_r+0x9ac>
 8009080:	00a3      	lsls	r3, r4, #2
 8009082:	eb0a 0205 	add.w	r2, sl, r5
 8009086:	4649      	mov	r1, r9
 8009088:	4658      	mov	r0, fp
 800908a:	f7ff f94d 	bl	8008328 <__ssputs_r>
 800908e:	3001      	adds	r0, #1
 8009090:	f43f af08 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8009094:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 8009098:	2c00      	cmp	r4, #0
 800909a:	eba5 0503 	sub.w	r5, r5, r3
 800909e:	bfa8      	it	ge
 80090a0:	1b2d      	subge	r5, r5, r4
 80090a2:	2d00      	cmp	r5, #0
 80090a4:	f77f adce 	ble.w	8008c44 <_svfwprintf_r+0x55c>
 80090a8:	4c4a      	ldr	r4, [pc, #296]	; (80091d4 <_svfwprintf_r+0xaec>)
 80090aa:	2d10      	cmp	r5, #16
 80090ac:	dc01      	bgt.n	80090b2 <_svfwprintf_r+0x9ca>
 80090ae:	00ab      	lsls	r3, r5, #2
 80090b0:	e74c      	b.n	8008f4c <_svfwprintf_r+0x864>
 80090b2:	2340      	movs	r3, #64	; 0x40
 80090b4:	4622      	mov	r2, r4
 80090b6:	4649      	mov	r1, r9
 80090b8:	4658      	mov	r0, fp
 80090ba:	f7ff f935 	bl	8008328 <__ssputs_r>
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f aef0 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 80090c4:	3d10      	subs	r5, #16
 80090c6:	e7f0      	b.n	80090aa <_svfwprintf_r+0x9c2>
 80090c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	4652      	mov	r2, sl
 80090ce:	f04f 0304 	mov.w	r3, #4
 80090d2:	4649      	mov	r1, r9
 80090d4:	4658      	mov	r0, fp
 80090d6:	dc01      	bgt.n	80090dc <_svfwprintf_r+0x9f4>
 80090d8:	07fc      	lsls	r4, r7, #31
 80090da:	d51b      	bpl.n	8009114 <_svfwprintf_r+0xa2c>
 80090dc:	f7ff f924 	bl	8008328 <__ssputs_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	f43f aedf 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 80090e6:	2304      	movs	r3, #4
 80090e8:	aa16      	add	r2, sp, #88	; 0x58
 80090ea:	4649      	mov	r1, r9
 80090ec:	4658      	mov	r0, fp
 80090ee:	f7ff f91b 	bl	8008328 <__ssputs_r>
 80090f2:	3001      	adds	r0, #1
 80090f4:	f43f aed6 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 80090f8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80090fa:	ec51 0b18 	vmov	r0, r1, d8
 80090fe:	2200      	movs	r2, #0
 8009100:	2300      	movs	r3, #0
 8009102:	3c01      	subs	r4, #1
 8009104:	f7f7 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009108:	b968      	cbnz	r0, 8009126 <_svfwprintf_r+0xa3e>
 800910a:	00a3      	lsls	r3, r4, #2
 800910c:	f10a 0204 	add.w	r2, sl, #4
 8009110:	4649      	mov	r1, r9
 8009112:	4658      	mov	r0, fp
 8009114:	f7ff f908 	bl	8008328 <__ssputs_r>
 8009118:	3001      	adds	r0, #1
 800911a:	f43f aec3 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 800911e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009120:	aa1c      	add	r2, sp, #112	; 0x70
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	e587      	b.n	8008c36 <_svfwprintf_r+0x54e>
 8009126:	2c00      	cmp	r4, #0
 8009128:	ddf9      	ble.n	800911e <_svfwprintf_r+0xa36>
 800912a:	4d2a      	ldr	r5, [pc, #168]	; (80091d4 <_svfwprintf_r+0xaec>)
 800912c:	2c10      	cmp	r4, #16
 800912e:	dc02      	bgt.n	8009136 <_svfwprintf_r+0xa4e>
 8009130:	4a28      	ldr	r2, [pc, #160]	; (80091d4 <_svfwprintf_r+0xaec>)
 8009132:	00a3      	lsls	r3, r4, #2
 8009134:	e7ec      	b.n	8009110 <_svfwprintf_r+0xa28>
 8009136:	2340      	movs	r3, #64	; 0x40
 8009138:	462a      	mov	r2, r5
 800913a:	4649      	mov	r1, r9
 800913c:	4658      	mov	r0, fp
 800913e:	f7ff f8f3 	bl	8008328 <__ssputs_r>
 8009142:	3001      	adds	r0, #1
 8009144:	f43f aeae 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8009148:	3c10      	subs	r4, #16
 800914a:	e7ef      	b.n	800912c <_svfwprintf_r+0xa44>
 800914c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800914e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009150:	1a9c      	subs	r4, r3, r2
 8009152:	2c00      	cmp	r4, #0
 8009154:	f77f ad79 	ble.w	8008c4a <_svfwprintf_r+0x562>
 8009158:	2c10      	cmp	r4, #16
 800915a:	dc09      	bgt.n	8009170 <_svfwprintf_r+0xa88>
 800915c:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <_svfwprintf_r+0xaf0>)
 800915e:	00a3      	lsls	r3, r4, #2
 8009160:	4649      	mov	r1, r9
 8009162:	4658      	mov	r0, fp
 8009164:	f7ff f8e0 	bl	8008328 <__ssputs_r>
 8009168:	3001      	adds	r0, #1
 800916a:	f47f ad6e 	bne.w	8008c4a <_svfwprintf_r+0x562>
 800916e:	e699      	b.n	8008ea4 <_svfwprintf_r+0x7bc>
 8009170:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <_svfwprintf_r+0xaf0>)
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	4649      	mov	r1, r9
 8009176:	4658      	mov	r0, fp
 8009178:	f7ff f8d6 	bl	8008328 <__ssputs_r>
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae91 	beq.w	8008ea4 <_svfwprintf_r+0x7bc>
 8009182:	3c10      	subs	r4, #16
 8009184:	e7e8      	b.n	8009158 <_svfwprintf_r+0xa70>
 8009186:	4639      	mov	r1, r7
 8009188:	2b00      	cmp	r3, #0
 800918a:	f43f add6 	beq.w	8008d3a <_svfwprintf_r+0x652>
 800918e:	2a01      	cmp	r2, #1
 8009190:	f43f ae4b 	beq.w	8008e2a <_svfwprintf_r+0x742>
 8009194:	2a02      	cmp	r2, #2
 8009196:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 800919a:	f43f ae5c 	beq.w	8008e56 <_svfwprintf_r+0x76e>
 800919e:	f003 0207 	and.w	r2, r3, #7
 80091a2:	3230      	adds	r2, #48	; 0x30
 80091a4:	08db      	lsrs	r3, r3, #3
 80091a6:	4650      	mov	r0, sl
 80091a8:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80091ac:	d1f7      	bne.n	800919e <_svfwprintf_r+0xab6>
 80091ae:	07cd      	lsls	r5, r1, #31
 80091b0:	d506      	bpl.n	80091c0 <_svfwprintf_r+0xad8>
 80091b2:	2a30      	cmp	r2, #48	; 0x30
 80091b4:	d004      	beq.n	80091c0 <_svfwprintf_r+0xad8>
 80091b6:	2330      	movs	r3, #48	; 0x30
 80091b8:	f84a 3c04 	str.w	r3, [sl, #-4]
 80091bc:	f1a0 0a08 	sub.w	sl, r0, #8
 80091c0:	ab52      	add	r3, sp, #328	; 0x148
 80091c2:	4626      	mov	r6, r4
 80091c4:	eba3 040a 	sub.w	r4, r3, sl
 80091c8:	10a4      	asrs	r4, r4, #2
 80091ca:	460f      	mov	r7, r1
 80091cc:	f04f 0800 	mov.w	r8, #0
 80091d0:	4645      	mov	r5, r8
 80091d2:	e4d8      	b.n	8008b86 <_svfwprintf_r+0x49e>
 80091d4:	0800cf58 	.word	0x0800cf58
 80091d8:	0800cf18 	.word	0x0800cf18

080091dc <wcslen>:
 80091dc:	4602      	mov	r2, r0
 80091de:	4613      	mov	r3, r2
 80091e0:	3204      	adds	r2, #4
 80091e2:	6819      	ldr	r1, [r3, #0]
 80091e4:	2900      	cmp	r1, #0
 80091e6:	d1fa      	bne.n	80091de <wcslen+0x2>
 80091e8:	1a18      	subs	r0, r3, r0
 80091ea:	1080      	asrs	r0, r0, #2
 80091ec:	4770      	bx	lr

080091ee <wmemchr>:
 80091ee:	b530      	push	{r4, r5, lr}
 80091f0:	2400      	movs	r4, #0
 80091f2:	4294      	cmp	r4, r2
 80091f4:	4603      	mov	r3, r0
 80091f6:	d102      	bne.n	80091fe <wmemchr+0x10>
 80091f8:	2300      	movs	r3, #0
 80091fa:	4618      	mov	r0, r3
 80091fc:	bd30      	pop	{r4, r5, pc}
 80091fe:	681d      	ldr	r5, [r3, #0]
 8009200:	428d      	cmp	r5, r1
 8009202:	f100 0004 	add.w	r0, r0, #4
 8009206:	d0f8      	beq.n	80091fa <wmemchr+0xc>
 8009208:	3401      	adds	r4, #1
 800920a:	e7f2      	b.n	80091f2 <wmemchr+0x4>

0800920c <__assert_func>:
 800920c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800920e:	4614      	mov	r4, r2
 8009210:	461a      	mov	r2, r3
 8009212:	4b09      	ldr	r3, [pc, #36]	; (8009238 <__assert_func+0x2c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4605      	mov	r5, r0
 8009218:	68d8      	ldr	r0, [r3, #12]
 800921a:	b14c      	cbz	r4, 8009230 <__assert_func+0x24>
 800921c:	4b07      	ldr	r3, [pc, #28]	; (800923c <__assert_func+0x30>)
 800921e:	9100      	str	r1, [sp, #0]
 8009220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009224:	4906      	ldr	r1, [pc, #24]	; (8009240 <__assert_func+0x34>)
 8009226:	462b      	mov	r3, r5
 8009228:	f000 f858 	bl	80092dc <fiprintf>
 800922c:	f000 faea 	bl	8009804 <abort>
 8009230:	4b04      	ldr	r3, [pc, #16]	; (8009244 <__assert_func+0x38>)
 8009232:	461c      	mov	r4, r3
 8009234:	e7f3      	b.n	800921e <__assert_func+0x12>
 8009236:	bf00      	nop
 8009238:	20000014 	.word	0x20000014
 800923c:	0800cf98 	.word	0x0800cf98
 8009240:	0800cfa5 	.word	0x0800cfa5
 8009244:	0800cfd3 	.word	0x0800cfd3

08009248 <btowc>:
 8009248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	b087      	sub	sp, #28
 800924e:	d103      	bne.n	8009258 <btowc+0x10>
 8009250:	f04f 30ff 	mov.w	r0, #4294967295
 8009254:	b007      	add	sp, #28
 8009256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009258:	4d1c      	ldr	r5, [pc, #112]	; (80092cc <btowc+0x84>)
 800925a:	f88d 000b 	strb.w	r0, [sp, #11]
 800925e:	ae04      	add	r6, sp, #16
 8009260:	2208      	movs	r2, #8
 8009262:	2100      	movs	r1, #0
 8009264:	4630      	mov	r0, r6
 8009266:	f7fc ffcf 	bl	8006208 <memset>
 800926a:	682f      	ldr	r7, [r5, #0]
 800926c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800926e:	b9fc      	cbnz	r4, 80092b0 <btowc+0x68>
 8009270:	2050      	movs	r0, #80	; 0x50
 8009272:	f7fe fcab 	bl	8007bcc <malloc>
 8009276:	4602      	mov	r2, r0
 8009278:	65b8      	str	r0, [r7, #88]	; 0x58
 800927a:	b920      	cbnz	r0, 8009286 <btowc+0x3e>
 800927c:	4b14      	ldr	r3, [pc, #80]	; (80092d0 <btowc+0x88>)
 800927e:	4815      	ldr	r0, [pc, #84]	; (80092d4 <btowc+0x8c>)
 8009280:	2118      	movs	r1, #24
 8009282:	f7ff ffc3 	bl	800920c <__assert_func>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800928a:	e9c3 4400 	strd	r4, r4, [r3]
 800928e:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8009292:	e9c3 4404 	strd	r4, r4, [r3, #16]
 8009296:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 800929a:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 800929e:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 80092a2:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 80092a6:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 80092aa:	619c      	str	r4, [r3, #24]
 80092ac:	771c      	strb	r4, [r3, #28]
 80092ae:	625c      	str	r4, [r3, #36]	; 0x24
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <btowc+0x90>)
 80092b2:	9600      	str	r6, [sp, #0]
 80092b4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80092b8:	6828      	ldr	r0, [r5, #0]
 80092ba:	2301      	movs	r3, #1
 80092bc:	f10d 020b 	add.w	r2, sp, #11
 80092c0:	a903      	add	r1, sp, #12
 80092c2:	47a0      	blx	r4
 80092c4:	2801      	cmp	r0, #1
 80092c6:	d8c3      	bhi.n	8009250 <btowc+0x8>
 80092c8:	9803      	ldr	r0, [sp, #12]
 80092ca:	e7c3      	b.n	8009254 <btowc+0xc>
 80092cc:	20000014 	.word	0x20000014
 80092d0:	0800cc55 	.word	0x0800cc55
 80092d4:	0800cfd4 	.word	0x0800cfd4
 80092d8:	20000078 	.word	0x20000078

080092dc <fiprintf>:
 80092dc:	b40e      	push	{r1, r2, r3}
 80092de:	b503      	push	{r0, r1, lr}
 80092e0:	4601      	mov	r1, r0
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	4805      	ldr	r0, [pc, #20]	; (80092fc <fiprintf+0x20>)
 80092e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	f000 f88b 	bl	8009408 <_vfiprintf_r>
 80092f2:	b002      	add	sp, #8
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000014 	.word	0x20000014

08009300 <__ascii_mbtowc>:
 8009300:	b082      	sub	sp, #8
 8009302:	b901      	cbnz	r1, 8009306 <__ascii_mbtowc+0x6>
 8009304:	a901      	add	r1, sp, #4
 8009306:	b142      	cbz	r2, 800931a <__ascii_mbtowc+0x1a>
 8009308:	b14b      	cbz	r3, 800931e <__ascii_mbtowc+0x1e>
 800930a:	7813      	ldrb	r3, [r2, #0]
 800930c:	600b      	str	r3, [r1, #0]
 800930e:	7812      	ldrb	r2, [r2, #0]
 8009310:	1e10      	subs	r0, r2, #0
 8009312:	bf18      	it	ne
 8009314:	2001      	movne	r0, #1
 8009316:	b002      	add	sp, #8
 8009318:	4770      	bx	lr
 800931a:	4610      	mov	r0, r2
 800931c:	e7fb      	b.n	8009316 <__ascii_mbtowc+0x16>
 800931e:	f06f 0001 	mvn.w	r0, #1
 8009322:	e7f8      	b.n	8009316 <__ascii_mbtowc+0x16>

08009324 <memmove>:
 8009324:	4288      	cmp	r0, r1
 8009326:	b510      	push	{r4, lr}
 8009328:	eb01 0402 	add.w	r4, r1, r2
 800932c:	d902      	bls.n	8009334 <memmove+0x10>
 800932e:	4284      	cmp	r4, r0
 8009330:	4623      	mov	r3, r4
 8009332:	d807      	bhi.n	8009344 <memmove+0x20>
 8009334:	1e43      	subs	r3, r0, #1
 8009336:	42a1      	cmp	r1, r4
 8009338:	d008      	beq.n	800934c <memmove+0x28>
 800933a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800933e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009342:	e7f8      	b.n	8009336 <memmove+0x12>
 8009344:	4402      	add	r2, r0
 8009346:	4601      	mov	r1, r0
 8009348:	428a      	cmp	r2, r1
 800934a:	d100      	bne.n	800934e <memmove+0x2a>
 800934c:	bd10      	pop	{r4, pc}
 800934e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009356:	e7f7      	b.n	8009348 <memmove+0x24>

08009358 <_realloc_r>:
 8009358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935c:	4680      	mov	r8, r0
 800935e:	4614      	mov	r4, r2
 8009360:	460e      	mov	r6, r1
 8009362:	b921      	cbnz	r1, 800936e <_realloc_r+0x16>
 8009364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009368:	4611      	mov	r1, r2
 800936a:	f7fc bfc1 	b.w	80062f0 <_malloc_r>
 800936e:	b92a      	cbnz	r2, 800937c <_realloc_r+0x24>
 8009370:	f7fc ff52 	bl	8006218 <_free_r>
 8009374:	4625      	mov	r5, r4
 8009376:	4628      	mov	r0, r5
 8009378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800937c:	f000 fa49 	bl	8009812 <_malloc_usable_size_r>
 8009380:	4284      	cmp	r4, r0
 8009382:	4607      	mov	r7, r0
 8009384:	d802      	bhi.n	800938c <_realloc_r+0x34>
 8009386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800938a:	d812      	bhi.n	80093b2 <_realloc_r+0x5a>
 800938c:	4621      	mov	r1, r4
 800938e:	4640      	mov	r0, r8
 8009390:	f7fc ffae 	bl	80062f0 <_malloc_r>
 8009394:	4605      	mov	r5, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d0ed      	beq.n	8009376 <_realloc_r+0x1e>
 800939a:	42bc      	cmp	r4, r7
 800939c:	4622      	mov	r2, r4
 800939e:	4631      	mov	r1, r6
 80093a0:	bf28      	it	cs
 80093a2:	463a      	movcs	r2, r7
 80093a4:	f7fc ff22 	bl	80061ec <memcpy>
 80093a8:	4631      	mov	r1, r6
 80093aa:	4640      	mov	r0, r8
 80093ac:	f7fc ff34 	bl	8006218 <_free_r>
 80093b0:	e7e1      	b.n	8009376 <_realloc_r+0x1e>
 80093b2:	4635      	mov	r5, r6
 80093b4:	e7df      	b.n	8009376 <_realloc_r+0x1e>

080093b6 <__sfputc_r>:
 80093b6:	6893      	ldr	r3, [r2, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	b410      	push	{r4}
 80093be:	6093      	str	r3, [r2, #8]
 80093c0:	da08      	bge.n	80093d4 <__sfputc_r+0x1e>
 80093c2:	6994      	ldr	r4, [r2, #24]
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	db01      	blt.n	80093cc <__sfputc_r+0x16>
 80093c8:	290a      	cmp	r1, #10
 80093ca:	d103      	bne.n	80093d4 <__sfputc_r+0x1e>
 80093cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093d0:	f000 b94a 	b.w	8009668 <__swbuf_r>
 80093d4:	6813      	ldr	r3, [r2, #0]
 80093d6:	1c58      	adds	r0, r3, #1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	7019      	strb	r1, [r3, #0]
 80093dc:	4608      	mov	r0, r1
 80093de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <__sfputs_r>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	4606      	mov	r6, r0
 80093e8:	460f      	mov	r7, r1
 80093ea:	4614      	mov	r4, r2
 80093ec:	18d5      	adds	r5, r2, r3
 80093ee:	42ac      	cmp	r4, r5
 80093f0:	d101      	bne.n	80093f6 <__sfputs_r+0x12>
 80093f2:	2000      	movs	r0, #0
 80093f4:	e007      	b.n	8009406 <__sfputs_r+0x22>
 80093f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fa:	463a      	mov	r2, r7
 80093fc:	4630      	mov	r0, r6
 80093fe:	f7ff ffda 	bl	80093b6 <__sfputc_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	d1f3      	bne.n	80093ee <__sfputs_r+0xa>
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009408 <_vfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	460d      	mov	r5, r1
 800940e:	b09d      	sub	sp, #116	; 0x74
 8009410:	4614      	mov	r4, r2
 8009412:	4698      	mov	r8, r3
 8009414:	4606      	mov	r6, r0
 8009416:	b118      	cbz	r0, 8009420 <_vfiprintf_r+0x18>
 8009418:	6983      	ldr	r3, [r0, #24]
 800941a:	b90b      	cbnz	r3, 8009420 <_vfiprintf_r+0x18>
 800941c:	f7fc fdbc 	bl	8005f98 <__sinit>
 8009420:	4b89      	ldr	r3, [pc, #548]	; (8009648 <_vfiprintf_r+0x240>)
 8009422:	429d      	cmp	r5, r3
 8009424:	d11b      	bne.n	800945e <_vfiprintf_r+0x56>
 8009426:	6875      	ldr	r5, [r6, #4]
 8009428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942a:	07d9      	lsls	r1, r3, #31
 800942c:	d405      	bmi.n	800943a <_vfiprintf_r+0x32>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	059a      	lsls	r2, r3, #22
 8009432:	d402      	bmi.n	800943a <_vfiprintf_r+0x32>
 8009434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009436:	f7fc fe72 	bl	800611e <__retarget_lock_acquire_recursive>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	071b      	lsls	r3, r3, #28
 800943e:	d501      	bpl.n	8009444 <_vfiprintf_r+0x3c>
 8009440:	692b      	ldr	r3, [r5, #16]
 8009442:	b9eb      	cbnz	r3, 8009480 <_vfiprintf_r+0x78>
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f96e 	bl	8009728 <__swsetup_r>
 800944c:	b1c0      	cbz	r0, 8009480 <_vfiprintf_r+0x78>
 800944e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009450:	07dc      	lsls	r4, r3, #31
 8009452:	d50e      	bpl.n	8009472 <_vfiprintf_r+0x6a>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b01d      	add	sp, #116	; 0x74
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	4b7b      	ldr	r3, [pc, #492]	; (800964c <_vfiprintf_r+0x244>)
 8009460:	429d      	cmp	r5, r3
 8009462:	d101      	bne.n	8009468 <_vfiprintf_r+0x60>
 8009464:	68b5      	ldr	r5, [r6, #8]
 8009466:	e7df      	b.n	8009428 <_vfiprintf_r+0x20>
 8009468:	4b79      	ldr	r3, [pc, #484]	; (8009650 <_vfiprintf_r+0x248>)
 800946a:	429d      	cmp	r5, r3
 800946c:	bf08      	it	eq
 800946e:	68f5      	ldreq	r5, [r6, #12]
 8009470:	e7da      	b.n	8009428 <_vfiprintf_r+0x20>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	0598      	lsls	r0, r3, #22
 8009476:	d4ed      	bmi.n	8009454 <_vfiprintf_r+0x4c>
 8009478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947a:	f7fc fe51 	bl	8006120 <__retarget_lock_release_recursive>
 800947e:	e7e9      	b.n	8009454 <_vfiprintf_r+0x4c>
 8009480:	2300      	movs	r3, #0
 8009482:	9309      	str	r3, [sp, #36]	; 0x24
 8009484:	2320      	movs	r3, #32
 8009486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948a:	f8cd 800c 	str.w	r8, [sp, #12]
 800948e:	2330      	movs	r3, #48	; 0x30
 8009490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009654 <_vfiprintf_r+0x24c>
 8009494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009498:	f04f 0901 	mov.w	r9, #1
 800949c:	4623      	mov	r3, r4
 800949e:	469a      	mov	sl, r3
 80094a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a4:	b10a      	cbz	r2, 80094aa <_vfiprintf_r+0xa2>
 80094a6:	2a25      	cmp	r2, #37	; 0x25
 80094a8:	d1f9      	bne.n	800949e <_vfiprintf_r+0x96>
 80094aa:	ebba 0b04 	subs.w	fp, sl, r4
 80094ae:	d00b      	beq.n	80094c8 <_vfiprintf_r+0xc0>
 80094b0:	465b      	mov	r3, fp
 80094b2:	4622      	mov	r2, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ff94 	bl	80093e4 <__sfputs_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	f000 80aa 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c4:	445a      	add	r2, fp
 80094c6:	9209      	str	r2, [sp, #36]	; 0x24
 80094c8:	f89a 3000 	ldrb.w	r3, [sl]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80a2 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094dc:	f10a 0a01 	add.w	sl, sl, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	9307      	str	r3, [sp, #28]
 80094e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ea:	4654      	mov	r4, sl
 80094ec:	2205      	movs	r2, #5
 80094ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f2:	4858      	ldr	r0, [pc, #352]	; (8009654 <_vfiprintf_r+0x24c>)
 80094f4:	f7f6 fe74 	bl	80001e0 <memchr>
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	b9d8      	cbnz	r0, 8009534 <_vfiprintf_r+0x12c>
 80094fc:	06d1      	lsls	r1, r2, #27
 80094fe:	bf44      	itt	mi
 8009500:	2320      	movmi	r3, #32
 8009502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009506:	0713      	lsls	r3, r2, #28
 8009508:	bf44      	itt	mi
 800950a:	232b      	movmi	r3, #43	; 0x2b
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	f89a 3000 	ldrb.w	r3, [sl]
 8009514:	2b2a      	cmp	r3, #42	; 0x2a
 8009516:	d015      	beq.n	8009544 <_vfiprintf_r+0x13c>
 8009518:	9a07      	ldr	r2, [sp, #28]
 800951a:	4654      	mov	r4, sl
 800951c:	2000      	movs	r0, #0
 800951e:	f04f 0c0a 	mov.w	ip, #10
 8009522:	4621      	mov	r1, r4
 8009524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009528:	3b30      	subs	r3, #48	; 0x30
 800952a:	2b09      	cmp	r3, #9
 800952c:	d94e      	bls.n	80095cc <_vfiprintf_r+0x1c4>
 800952e:	b1b0      	cbz	r0, 800955e <_vfiprintf_r+0x156>
 8009530:	9207      	str	r2, [sp, #28]
 8009532:	e014      	b.n	800955e <_vfiprintf_r+0x156>
 8009534:	eba0 0308 	sub.w	r3, r0, r8
 8009538:	fa09 f303 	lsl.w	r3, r9, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	46a2      	mov	sl, r4
 8009542:	e7d2      	b.n	80094ea <_vfiprintf_r+0xe2>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	1d19      	adds	r1, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9103      	str	r1, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfbb      	ittet	lt
 8009550:	425b      	neglt	r3, r3
 8009552:	f042 0202 	orrlt.w	r2, r2, #2
 8009556:	9307      	strge	r3, [sp, #28]
 8009558:	9307      	strlt	r3, [sp, #28]
 800955a:	bfb8      	it	lt
 800955c:	9204      	strlt	r2, [sp, #16]
 800955e:	7823      	ldrb	r3, [r4, #0]
 8009560:	2b2e      	cmp	r3, #46	; 0x2e
 8009562:	d10c      	bne.n	800957e <_vfiprintf_r+0x176>
 8009564:	7863      	ldrb	r3, [r4, #1]
 8009566:	2b2a      	cmp	r3, #42	; 0x2a
 8009568:	d135      	bne.n	80095d6 <_vfiprintf_r+0x1ce>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	1d1a      	adds	r2, r3, #4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	9203      	str	r2, [sp, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfb8      	it	lt
 8009576:	f04f 33ff 	movlt.w	r3, #4294967295
 800957a:	3402      	adds	r4, #2
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009664 <_vfiprintf_r+0x25c>
 8009582:	7821      	ldrb	r1, [r4, #0]
 8009584:	2203      	movs	r2, #3
 8009586:	4650      	mov	r0, sl
 8009588:	f7f6 fe2a 	bl	80001e0 <memchr>
 800958c:	b140      	cbz	r0, 80095a0 <_vfiprintf_r+0x198>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	eba0 000a 	sub.w	r0, r0, sl
 8009594:	fa03 f000 	lsl.w	r0, r3, r0
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	4303      	orrs	r3, r0
 800959c:	3401      	adds	r4, #1
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a4:	482c      	ldr	r0, [pc, #176]	; (8009658 <_vfiprintf_r+0x250>)
 80095a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095aa:	2206      	movs	r2, #6
 80095ac:	f7f6 fe18 	bl	80001e0 <memchr>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d03f      	beq.n	8009634 <_vfiprintf_r+0x22c>
 80095b4:	4b29      	ldr	r3, [pc, #164]	; (800965c <_vfiprintf_r+0x254>)
 80095b6:	bb1b      	cbnz	r3, 8009600 <_vfiprintf_r+0x1f8>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	3307      	adds	r3, #7
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	9303      	str	r3, [sp, #12]
 80095c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c6:	443b      	add	r3, r7
 80095c8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ca:	e767      	b.n	800949c <_vfiprintf_r+0x94>
 80095cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d0:	460c      	mov	r4, r1
 80095d2:	2001      	movs	r0, #1
 80095d4:	e7a5      	b.n	8009522 <_vfiprintf_r+0x11a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	3401      	adds	r4, #1
 80095da:	9305      	str	r3, [sp, #20]
 80095dc:	4619      	mov	r1, r3
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4620      	mov	r0, r4
 80095e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e8:	3a30      	subs	r2, #48	; 0x30
 80095ea:	2a09      	cmp	r2, #9
 80095ec:	d903      	bls.n	80095f6 <_vfiprintf_r+0x1ee>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c5      	beq.n	800957e <_vfiprintf_r+0x176>
 80095f2:	9105      	str	r1, [sp, #20]
 80095f4:	e7c3      	b.n	800957e <_vfiprintf_r+0x176>
 80095f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fa:	4604      	mov	r4, r0
 80095fc:	2301      	movs	r3, #1
 80095fe:	e7f0      	b.n	80095e2 <_vfiprintf_r+0x1da>
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	462a      	mov	r2, r5
 8009606:	4b16      	ldr	r3, [pc, #88]	; (8009660 <_vfiprintf_r+0x258>)
 8009608:	a904      	add	r1, sp, #16
 800960a:	4630      	mov	r0, r6
 800960c:	f7fc ff84 	bl	8006518 <_printf_float>
 8009610:	4607      	mov	r7, r0
 8009612:	1c78      	adds	r0, r7, #1
 8009614:	d1d6      	bne.n	80095c4 <_vfiprintf_r+0x1bc>
 8009616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	d405      	bmi.n	8009628 <_vfiprintf_r+0x220>
 800961c:	89ab      	ldrh	r3, [r5, #12]
 800961e:	059a      	lsls	r2, r3, #22
 8009620:	d402      	bmi.n	8009628 <_vfiprintf_r+0x220>
 8009622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009624:	f7fc fd7c 	bl	8006120 <__retarget_lock_release_recursive>
 8009628:	89ab      	ldrh	r3, [r5, #12]
 800962a:	065b      	lsls	r3, r3, #25
 800962c:	f53f af12 	bmi.w	8009454 <_vfiprintf_r+0x4c>
 8009630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009632:	e711      	b.n	8009458 <_vfiprintf_r+0x50>
 8009634:	ab03      	add	r3, sp, #12
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	462a      	mov	r2, r5
 800963a:	4b09      	ldr	r3, [pc, #36]	; (8009660 <_vfiprintf_r+0x258>)
 800963c:	a904      	add	r1, sp, #16
 800963e:	4630      	mov	r0, r6
 8009640:	f7fd fa0e 	bl	8006a60 <_printf_i>
 8009644:	e7e4      	b.n	8009610 <_vfiprintf_r+0x208>
 8009646:	bf00      	nop
 8009648:	0800cbd0 	.word	0x0800cbd0
 800964c:	0800cbf0 	.word	0x0800cbf0
 8009650:	0800cbb0 	.word	0x0800cbb0
 8009654:	0800ce34 	.word	0x0800ce34
 8009658:	0800ce3e 	.word	0x0800ce3e
 800965c:	08006519 	.word	0x08006519
 8009660:	080093e5 	.word	0x080093e5
 8009664:	0800ce3a 	.word	0x0800ce3a

08009668 <__swbuf_r>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	460e      	mov	r6, r1
 800966c:	4614      	mov	r4, r2
 800966e:	4605      	mov	r5, r0
 8009670:	b118      	cbz	r0, 800967a <__swbuf_r+0x12>
 8009672:	6983      	ldr	r3, [r0, #24]
 8009674:	b90b      	cbnz	r3, 800967a <__swbuf_r+0x12>
 8009676:	f7fc fc8f 	bl	8005f98 <__sinit>
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <__swbuf_r+0x98>)
 800967c:	429c      	cmp	r4, r3
 800967e:	d12b      	bne.n	80096d8 <__swbuf_r+0x70>
 8009680:	686c      	ldr	r4, [r5, #4]
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	d52f      	bpl.n	80096ec <__swbuf_r+0x84>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b36b      	cbz	r3, 80096ec <__swbuf_r+0x84>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	1ac0      	subs	r0, r0, r3
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	b2f6      	uxtb	r6, r6
 800969a:	4283      	cmp	r3, r0
 800969c:	4637      	mov	r7, r6
 800969e:	dc04      	bgt.n	80096aa <__swbuf_r+0x42>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f7fc fbe4 	bl	8005e70 <_fflush_r>
 80096a8:	bb30      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	701e      	strb	r6, [r3, #0]
 80096b8:	6963      	ldr	r3, [r4, #20]
 80096ba:	3001      	adds	r0, #1
 80096bc:	4283      	cmp	r3, r0
 80096be:	d004      	beq.n	80096ca <__swbuf_r+0x62>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	07db      	lsls	r3, r3, #31
 80096c4:	d506      	bpl.n	80096d4 <__swbuf_r+0x6c>
 80096c6:	2e0a      	cmp	r6, #10
 80096c8:	d104      	bne.n	80096d4 <__swbuf_r+0x6c>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f7fc fbcf 	bl	8005e70 <_fflush_r>
 80096d2:	b988      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096d4:	4638      	mov	r0, r7
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <__swbuf_r+0x9c>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <__swbuf_r+0x7a>
 80096de:	68ac      	ldr	r4, [r5, #8]
 80096e0:	e7cf      	b.n	8009682 <__swbuf_r+0x1a>
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <__swbuf_r+0xa0>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68ec      	ldreq	r4, [r5, #12]
 80096ea:	e7ca      	b.n	8009682 <__swbuf_r+0x1a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f81a 	bl	8009728 <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0cb      	beq.n	8009690 <__swbuf_r+0x28>
 80096f8:	f04f 37ff 	mov.w	r7, #4294967295
 80096fc:	e7ea      	b.n	80096d4 <__swbuf_r+0x6c>
 80096fe:	bf00      	nop
 8009700:	0800cbd0 	.word	0x0800cbd0
 8009704:	0800cbf0 	.word	0x0800cbf0
 8009708:	0800cbb0 	.word	0x0800cbb0

0800970c <__ascii_wctomb>:
 800970c:	b149      	cbz	r1, 8009722 <__ascii_wctomb+0x16>
 800970e:	2aff      	cmp	r2, #255	; 0xff
 8009710:	bf85      	ittet	hi
 8009712:	238a      	movhi	r3, #138	; 0x8a
 8009714:	6003      	strhi	r3, [r0, #0]
 8009716:	700a      	strbls	r2, [r1, #0]
 8009718:	f04f 30ff 	movhi.w	r0, #4294967295
 800971c:	bf98      	it	ls
 800971e:	2001      	movls	r0, #1
 8009720:	4770      	bx	lr
 8009722:	4608      	mov	r0, r1
 8009724:	4770      	bx	lr
	...

08009728 <__swsetup_r>:
 8009728:	4b32      	ldr	r3, [pc, #200]	; (80097f4 <__swsetup_r+0xcc>)
 800972a:	b570      	push	{r4, r5, r6, lr}
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	b125      	cbz	r5, 800973e <__swsetup_r+0x16>
 8009734:	69ab      	ldr	r3, [r5, #24]
 8009736:	b913      	cbnz	r3, 800973e <__swsetup_r+0x16>
 8009738:	4628      	mov	r0, r5
 800973a:	f7fc fc2d 	bl	8005f98 <__sinit>
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <__swsetup_r+0xd0>)
 8009740:	429c      	cmp	r4, r3
 8009742:	d10f      	bne.n	8009764 <__swsetup_r+0x3c>
 8009744:	686c      	ldr	r4, [r5, #4]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800974c:	0719      	lsls	r1, r3, #28
 800974e:	d42c      	bmi.n	80097aa <__swsetup_r+0x82>
 8009750:	06dd      	lsls	r5, r3, #27
 8009752:	d411      	bmi.n	8009778 <__swsetup_r+0x50>
 8009754:	2309      	movs	r3, #9
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	e03e      	b.n	80097e2 <__swsetup_r+0xba>
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <__swsetup_r+0xd4>)
 8009766:	429c      	cmp	r4, r3
 8009768:	d101      	bne.n	800976e <__swsetup_r+0x46>
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	e7eb      	b.n	8009746 <__swsetup_r+0x1e>
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <__swsetup_r+0xd8>)
 8009770:	429c      	cmp	r4, r3
 8009772:	bf08      	it	eq
 8009774:	68ec      	ldreq	r4, [r5, #12]
 8009776:	e7e6      	b.n	8009746 <__swsetup_r+0x1e>
 8009778:	0758      	lsls	r0, r3, #29
 800977a:	d512      	bpl.n	80097a2 <__swsetup_r+0x7a>
 800977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977e:	b141      	cbz	r1, 8009792 <__swsetup_r+0x6a>
 8009780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009784:	4299      	cmp	r1, r3
 8009786:	d002      	beq.n	800978e <__swsetup_r+0x66>
 8009788:	4630      	mov	r0, r6
 800978a:	f7fc fd45 	bl	8006218 <_free_r>
 800978e:	2300      	movs	r3, #0
 8009790:	6363      	str	r3, [r4, #52]	; 0x34
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	2300      	movs	r3, #0
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f043 0308 	orr.w	r3, r3, #8
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b94b      	cbnz	r3, 80097c2 <__swsetup_r+0x9a>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b8:	d003      	beq.n	80097c2 <__swsetup_r+0x9a>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f7fc fcd5 	bl	800616c <__smakebuf_r>
 80097c2:	89a0      	ldrh	r0, [r4, #12]
 80097c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c8:	f010 0301 	ands.w	r3, r0, #1
 80097cc:	d00a      	beq.n	80097e4 <__swsetup_r+0xbc>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	425b      	negs	r3, r3
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b943      	cbnz	r3, 80097ee <__swsetup_r+0xc6>
 80097dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e0:	d1ba      	bne.n	8009758 <__swsetup_r+0x30>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	0781      	lsls	r1, r0, #30
 80097e6:	bf58      	it	pl
 80097e8:	6963      	ldrpl	r3, [r4, #20]
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	e7f4      	b.n	80097d8 <__swsetup_r+0xb0>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e7f7      	b.n	80097e2 <__swsetup_r+0xba>
 80097f2:	bf00      	nop
 80097f4:	20000014 	.word	0x20000014
 80097f8:	0800cbd0 	.word	0x0800cbd0
 80097fc:	0800cbf0 	.word	0x0800cbf0
 8009800:	0800cbb0 	.word	0x0800cbb0

08009804 <abort>:
 8009804:	b508      	push	{r3, lr}
 8009806:	2006      	movs	r0, #6
 8009808:	f000 f834 	bl	8009874 <raise>
 800980c:	2001      	movs	r0, #1
 800980e:	f7f8 f919 	bl	8001a44 <_exit>

08009812 <_malloc_usable_size_r>:
 8009812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009816:	1f18      	subs	r0, r3, #4
 8009818:	2b00      	cmp	r3, #0
 800981a:	bfbc      	itt	lt
 800981c:	580b      	ldrlt	r3, [r1, r0]
 800981e:	18c0      	addlt	r0, r0, r3
 8009820:	4770      	bx	lr

08009822 <_raise_r>:
 8009822:	291f      	cmp	r1, #31
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	d904      	bls.n	8009836 <_raise_r+0x14>
 800982c:	2316      	movs	r3, #22
 800982e:	6003      	str	r3, [r0, #0]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	bd38      	pop	{r3, r4, r5, pc}
 8009836:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009838:	b112      	cbz	r2, 8009840 <_raise_r+0x1e>
 800983a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800983e:	b94b      	cbnz	r3, 8009854 <_raise_r+0x32>
 8009840:	4620      	mov	r0, r4
 8009842:	f000 f831 	bl	80098a8 <_getpid_r>
 8009846:	462a      	mov	r2, r5
 8009848:	4601      	mov	r1, r0
 800984a:	4620      	mov	r0, r4
 800984c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009850:	f000 b818 	b.w	8009884 <_kill_r>
 8009854:	2b01      	cmp	r3, #1
 8009856:	d00a      	beq.n	800986e <_raise_r+0x4c>
 8009858:	1c59      	adds	r1, r3, #1
 800985a:	d103      	bne.n	8009864 <_raise_r+0x42>
 800985c:	2316      	movs	r3, #22
 800985e:	6003      	str	r3, [r0, #0]
 8009860:	2001      	movs	r0, #1
 8009862:	e7e7      	b.n	8009834 <_raise_r+0x12>
 8009864:	2400      	movs	r4, #0
 8009866:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800986a:	4628      	mov	r0, r5
 800986c:	4798      	blx	r3
 800986e:	2000      	movs	r0, #0
 8009870:	e7e0      	b.n	8009834 <_raise_r+0x12>
	...

08009874 <raise>:
 8009874:	4b02      	ldr	r3, [pc, #8]	; (8009880 <raise+0xc>)
 8009876:	4601      	mov	r1, r0
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f7ff bfd2 	b.w	8009822 <_raise_r>
 800987e:	bf00      	nop
 8009880:	20000014 	.word	0x20000014

08009884 <_kill_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d07      	ldr	r5, [pc, #28]	; (80098a4 <_kill_r+0x20>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	4611      	mov	r1, r2
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	f7f8 f8c7 	bl	8001a24 <_kill>
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	d102      	bne.n	80098a0 <_kill_r+0x1c>
 800989a:	682b      	ldr	r3, [r5, #0]
 800989c:	b103      	cbz	r3, 80098a0 <_kill_r+0x1c>
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	bd38      	pop	{r3, r4, r5, pc}
 80098a2:	bf00      	nop
 80098a4:	2000a374 	.word	0x2000a374

080098a8 <_getpid_r>:
 80098a8:	f7f8 b8b4 	b.w	8001a14 <_getpid>

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
