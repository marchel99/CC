
CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003834  08008148  08008148  00018148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b97c  0800b97c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b97c  0800b97c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b97c  0800b97c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b97c  0800b97c  0001b97c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b980  0800b980  0001b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a110  200001e4  0800bb68  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a2f4  0800bb68  0002a2f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a63  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00031c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00034a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291a6  00000000  00000000  000367d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014584  00000000  00000000  0005f976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1114  00000000  00000000  00073efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016500e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000500c  00000000  00000000  00165060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008130 	.word	0x08008130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008130 	.word	0x08008130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_GPIO_Init+0x90>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f641 0104 	movw	r1, #6148	; 0x1804
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <MX_GPIO_Init+0x94>)
 8000cae:	f001 f937 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000cb2:	f641 0304 	movw	r3, #6148	; 0x1804
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x94>)
 8000ccc:	f000 ff7e 	bl	8001bcc <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <MX_I2C1_Init+0x78>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cec:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <MX_I2C1_Init+0x7c>)
 8000cee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1a:	480e      	ldr	r0, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d1c:	f001 f918 	bl	8001f50 <HAL_I2C_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d26:	f000 faeb 	bl	8001300 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4809      	ldr	r0, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d2e:	f001 fd0b 	bl	8002748 <HAL_I2CEx_ConfigAnalogFilter>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d38:	f000 fae2 	bl	8001300 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C1_Init+0x74>)
 8000d40:	f001 fd4d 	bl	80027de <HAL_I2CEx_ConfigDigitalFilter>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d4a:	f000 fad9 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000200 	.word	0x20000200
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	10909cec 	.word	0x10909cec

08000d60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ac      	sub	sp, #176	; 0xb0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2288      	movs	r2, #136	; 0x88
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f004 fa91 	bl	80052a8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_I2C_MspInit+0xb0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d13a      	bne.n	8000e06 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d90:	2340      	movs	r3, #64	; 0x40
 8000d92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fb97 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f000 faaa 	bl	8001300 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db0:	4a18      	ldr	r2, [pc, #96]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	23c0      	movs	r3, #192	; 0xc0
 8000dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dca:	2312      	movs	r3, #18
 8000dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <HAL_I2C_MspInit+0xb8>)
 8000dea:	f000 feef 	bl	8001bcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000df8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_I2C_MspInit+0xb4>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e06:	bf00      	nop
 8000e08:	37b0      	adds	r7, #176	; 0xb0
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005400 	.word	0x40005400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	48000400 	.word	0x48000400

08000e1c <lcd_cmd>:
#define ST7735S_VMCTR1			0xc5
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

static void lcd_cmd(uint8_t cmd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e2c:	480c      	ldr	r0, [pc, #48]	; (8000e60 <lcd_cmd+0x44>)
 8000e2e:	f001 f877 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <lcd_cmd+0x44>)
 8000e3a:	f001 f871 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000e3e:	1df9      	adds	r1, r7, #7
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2201      	movs	r2, #1
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <lcd_cmd+0x48>)
 8000e48:	f003 fa77 	bl	800433a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <lcd_cmd+0x44>)
 8000e54:	f001 f864 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	48000400 	.word	0x48000400
 8000e64:	2000a278 	.word	0x2000a278

08000e68 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <lcd_data+0x44>)
 8000e7a:	f001 f851 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <lcd_data+0x44>)
 8000e86:	f001 f84b 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000e8a:	1df9      	adds	r1, r7, #7
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	2201      	movs	r2, #1
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <lcd_data+0x48>)
 8000e94:	f003 fa51 	bl	800433a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e9e:	4803      	ldr	r0, [pc, #12]	; (8000eac <lcd_data+0x44>)
 8000ea0:	f001 f83e 	bl	8001f20 <HAL_GPIO_WritePin>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	48000400 	.word	0x48000400
 8000eb0:	2000a278 	.word	0x2000a278

08000eb4 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(
  uint16_t value)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <lcd_send+0x20>
		lcd_cmd(value);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffa5 	bl	8000e1c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000ed2:	e004      	b.n	8000ede <lcd_send+0x2a>
		lcd_data(value);
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffc5 	bl	8000e68 <lcd_data>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	4817      	ldr	r0, [pc, #92]	; (8000f50 <lcd_init+0x68>)
 8000ef4:	f001 f814 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f000 fd5d 	bl	80019b8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	4813      	ldr	r0, [pc, #76]	; (8000f50 <lcd_init+0x68>)
 8000f04:	f001 f80c 	bl	8001f20 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000f08:	2064      	movs	r0, #100	; 0x64
 8000f0a:	f000 fd55 	bl	80019b8 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	e009      	b.n	8000f28 <lcd_init+0x40>
    lcd_send(init_table[i]);
 8000f14:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <lcd_init+0x6c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ffc9 	bl	8000eb4 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3301      	adds	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b4b      	cmp	r3, #75	; 0x4b
 8000f2c:	d9f2      	bls.n	8000f14 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f000 fd42 	bl	80019b8 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8000f34:	2011      	movs	r0, #17
 8000f36:	f7ff ff71 	bl	8000e1c <lcd_cmd>
  HAL_Delay(120);
 8000f3a:	2078      	movs	r0, #120	; 0x78
 8000f3c:	f000 fd3c 	bl	80019b8 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000f40:	2029      	movs	r0, #41	; 0x29
 8000f42:	f7ff ff6b 	bl	8000e1c <lcd_cmd>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48000400 	.word	0x48000400
 8000f54:	08008378 	.word	0x08008378

08000f58 <lcd_data16>:




static void lcd_data16(uint16_t value)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff7c 	bl	8000e68 <lcd_data>
	lcd_data(value);
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff77 	bl	8000e68 <lcd_data>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <lcd_set_window>:
#define LCD_OFFSET_Y  2
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 8000f90:	202a      	movs	r0, #42	; 0x2a
 8000f92:	f7ff ff43 	bl	8000e1c <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ffda 	bl	8000f58 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ffd1 	bl	8000f58 <lcd_data16>
 
  lcd_cmd(ST7735S_RASET);
 8000fb6:	202b      	movs	r0, #43	; 0x2b
 8000fb8:	f7ff ff30 	bl	8000e1c <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ffc7 	bl	8000f58 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffbc 	bl	8000f58 <lcd_data16>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <lcd_put_pixel>:
		lcd_data16(color);
}


void lcd_put_pixel(int x, int y, uint16_t color)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4413      	add	r3, r2
 8000ffe:	015b      	lsls	r3, r3, #5
 8001000:	461a      	mov	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	4905      	ldr	r1, [pc, #20]	; (800101c <lcd_put_pixel+0x34>)
 8001008:	88fa      	ldrh	r2, [r7, #6]
 800100a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000254 	.word	0x20000254

08001020 <lcd_copy>:
//bufor
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


void lcd_copy(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	22a0      	movs	r2, #160	; 0xa0
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff ffa9 	bl	8000f82 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8001030:	202c      	movs	r0, #44	; 0x2c
 8001032:	f7ff fef3 	bl	8000e1c <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800103c:	480c      	ldr	r0, [pc, #48]	; (8001070 <lcd_copy+0x50>)
 800103e:	f000 ff6f 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <lcd_copy+0x50>)
 800104a:	f000 ff69 	bl	8001f20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001056:	4907      	ldr	r1, [pc, #28]	; (8001074 <lcd_copy+0x54>)
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <lcd_copy+0x58>)
 800105a:	f003 f96e 	bl	800433a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <lcd_copy+0x50>)
 8001066:	f000 ff5b 	bl	8001f20 <HAL_GPIO_WritePin>
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	48000400 	.word	0x48000400
 8001074:	20000254 	.word	0x20000254
 8001078:	2000a278 	.word	0x2000a278

0800107c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 8001082:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fc23 	bl	80018ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f8e6 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f7ff fddc 	bl	8000c48 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001090:	f000 fa2e 	bl	80014f0 <MX_SPI2_Init>
  MX_RTC_Init();
 8001094:	f000 f9d2 	bl	800143c <MX_RTC_Init>
  MX_I2C1_Init();
 8001098:	f7ff fe22 	bl	8000ce0 <MX_I2C1_Init>
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);

   */

  lcd_init();
 800109c:	f7ff ff24 	bl	8000ee8 <lcd_init>
    hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
  }

   */

  float your_variable = 1.000; // Przykładowa zmienna int
 80010a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010a4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
  // hagl_put_text(L"Godzina: ", 15, 20, WHITE, font6x9);
  //-l_+p , -g|+d


  // Teraz możesz wywołać funkcję hagl_put_text z tym buforem
  hagl_put_text(buffer, 15, 40, WHITE, font6x9);
 80010a8:	f507 7006 	add.w	r0, r7, #536	; 0x218
 80010ac:	4b60      	ldr	r3, [pc, #384]	; (8001230 <main+0x1b4>)
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b4:	2228      	movs	r2, #40	; 0x28
 80010b6:	210f      	movs	r1, #15
 80010b8:	f003 fe16 	bl	8004ce8 <hagl_put_text>
  while (1)
  {
//while
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80010bc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	485b      	ldr	r0, [pc, #364]	; (8001234 <main+0x1b8>)
 80010c6:	f002 ff3a 	bl	8003f3e <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN); // Funkcja musi być wywołana po GetTime
 80010ca:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4858      	ldr	r0, [pc, #352]	; (8001234 <main+0x1b8>)
 80010d4:	f002 ff8f 	bl	8003ff6 <HAL_RTC_GetDate>
    swprintf(time_buffer, sizeof(time_buffer), L"Czas: %02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80010d8:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4619      	mov	r1, r3
 80010e4:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010e8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 80010f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010f8:	789b      	ldrb	r3, [r3, #2]
 80010fa:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	460b      	mov	r3, r1
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <main+0x1bc>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	f004 fa0a 	bl	8005520 <swprintf>

    hagl_put_text(time_buffer, 15, 20, WHITE, font6x9);
 800110c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001110:	4b47      	ldr	r3, [pc, #284]	; (8001230 <main+0x1b4>)
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	2214      	movs	r2, #20
 800111a:	210f      	movs	r1, #15
 800111c:	f003 fde4 	bl	8004ce8 <hagl_put_text>



        float battery_voltage = read_voltage(&hi2c1);
 8001120:	4846      	ldr	r0, [pc, #280]	; (800123c <main+0x1c0>)
 8001122:	f000 f8f5 	bl	8001310 <read_voltage>
 8001126:	ed87 0aa8 	vstr	s0, [r7, #672]	; 0x2a0
        wchar_t voltage_buffer[32]; // Bufor na napięcie baterii

        if (battery_voltage > 0)
 800112a:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 800112e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	dd16      	ble.n	8001166 <main+0xea>
            {
              // Formatowanie i wyświetlanie napięcia baterii
              swprintf(voltage_buffer, sizeof(voltage_buffer), L"Napięcie: %.4fV", battery_voltage);
 8001138:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 800113c:	f7ff fa04 	bl	8000548 <__aeabi_f2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4638      	mov	r0, r7
 8001146:	e9cd 2300 	strd	r2, r3, [sp]
 800114a:	4a3d      	ldr	r2, [pc, #244]	; (8001240 <main+0x1c4>)
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	f004 f9e7 	bl	8005520 <swprintf>
              hagl_put_text(voltage_buffer, 15, 40, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 8001152:	4638      	mov	r0, r7
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <main+0x1b4>)
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	2228      	movs	r2, #40	; 0x28
 800115e:	210f      	movs	r1, #15
 8001160:	f003 fdc2 	bl	8004ce8 <hagl_put_text>
 8001164:	e008      	b.n	8001178 <main+0xfc>
            }
        else
            {
              // Wyświetlanie informacji o błędzie
              hagl_put_text(L"Błąd odczytu napięcia!", 15, 40, WHITE, font6x9);
 8001166:	4b32      	ldr	r3, [pc, #200]	; (8001230 <main+0x1b4>)
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800116e:	2228      	movs	r2, #40	; 0x28
 8001170:	210f      	movs	r1, #15
 8001172:	4834      	ldr	r0, [pc, #208]	; (8001244 <main+0x1c8>)
 8001174:	f003 fdb8 	bl	8004ce8 <hagl_put_text>
            }




        float battery_soc = read_soc(&hi2c1);
 8001178:	4830      	ldr	r0, [pc, #192]	; (800123c <main+0x1c0>)
 800117a:	f000 f90b 	bl	8001394 <read_soc>
 800117e:	ed87 0aa7 	vstr	s0, [r7, #668]	; 0x29c
        wchar_t soc_buffer[32]; // Bufor na procent naładowania baterii

        if (battery_soc >= 0)
 8001182:	edd7 7aa7 	vldr	s15, [r7, #668]	; 0x29c
 8001186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	db18      	blt.n	80011c2 <main+0x146>
            {
              // Formatowanie i wyświetlanie stanu naładowania baterii
              swprintf(soc_buffer, sizeof(soc_buffer), L"Naładowanie: %.2f%%", battery_soc);
 8001190:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8001194:	f7ff f9d8 	bl	8000548 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80011a0:	e9cd 2300 	strd	r2, r3, [sp]
 80011a4:	4a28      	ldr	r2, [pc, #160]	; (8001248 <main+0x1cc>)
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	f004 f9ba 	bl	8005520 <swprintf>
              hagl_put_text(soc_buffer, 15, 50, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 80011ac:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <main+0x1b4>)
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2232      	movs	r2, #50	; 0x32
 80011ba:	210f      	movs	r1, #15
 80011bc:	f003 fd94 	bl	8004ce8 <hagl_put_text>
 80011c0:	e008      	b.n	80011d4 <main+0x158>
            }
        else
            {
              // Wyświetlanie informacji o błędzie
              hagl_put_text(L"Błąd odczytu SoC!", 15, 50, WHITE, font6x9);
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <main+0x1b4>)
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ca:	2232      	movs	r2, #50	; 0x32
 80011cc:	210f      	movs	r1, #15
 80011ce:	481f      	ldr	r0, [pc, #124]	; (800124c <main+0x1d0>)
 80011d0:	f003 fd8a 	bl	8004ce8 <hagl_put_text>
            }




        uint8_t ic_version = read_ic_version(&hi2c1);
 80011d4:	4819      	ldr	r0, [pc, #100]	; (800123c <main+0x1c0>)
 80011d6:	f000 f90f 	bl	80013f8 <read_ic_version>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
        wchar_t version_buffer[32]; // Bufor na wersję układu IC

        if (ic_version != 0xFF) {
 80011e0:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80011e4:	2bff      	cmp	r3, #255	; 0xff
 80011e6:	d012      	beq.n	800120e <main+0x192>
            // Formatowanie i wyświetlanie wersji układu IC
            swprintf(version_buffer, sizeof(version_buffer), L"Wersja IC: 0x%02X", ic_version);
 80011e8:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80011ec:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <main+0x1d4>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	f004 f994 	bl	8005520 <swprintf>
            hagl_put_text(version_buffer, 15, 60, WHITE, font6x9); // Zmienić położenie tekstu w razie potrzeby
 80011f8:	f507 7080 	add.w	r0, r7, #256	; 0x100
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <main+0x1b4>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001204:	223c      	movs	r2, #60	; 0x3c
 8001206:	210f      	movs	r1, #15
 8001208:	f003 fd6e 	bl	8004ce8 <hagl_put_text>
 800120c:	e008      	b.n	8001220 <main+0x1a4>
        } else {
            // Wyświetlanie informacji o błędzie
            hagl_put_text(L"Błąd odczytu wersji IC!", 15, 60, WHITE, font6x9);
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <main+0x1b4>)
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001216:	223c      	movs	r2, #60	; 0x3c
 8001218:	210f      	movs	r1, #15
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <main+0x1d8>)
 800121c:	f003 fd64 	bl	8004ce8 <hagl_put_text>





    lcd_copy();
 8001220:	f7ff fefe 	bl	8001020 <lcd_copy>
    HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f000 fbc6 	bl	80019b8 <HAL_Delay>
  {
 800122c:	e746      	b.n	80010bc <main+0x40>
 800122e:	bf00      	nop
 8001230:	08008410 	.word	0x08008410
 8001234:	2000a254 	.word	0x2000a254
 8001238:	08008148 	.word	0x08008148
 800123c:	20000200 	.word	0x20000200
 8001240:	0800819c 	.word	0x0800819c
 8001244:	080081dc 	.word	0x080081dc
 8001248:	08008238 	.word	0x08008238
 800124c:	08008288 	.word	0x08008288
 8001250:	080082d0 	.word	0x080082d0
 8001254:	08008318 	.word	0x08008318

08001258 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b096      	sub	sp, #88	; 0x58
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	2244      	movs	r2, #68	; 0x44
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 f81e 	bl	80052a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	463b      	mov	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800127a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800127e:	f001 fb09 	bl	8002894 <HAL_PWREx_ControlVoltageScaling>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001288:	f000 f83a 	bl	8001300 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 800128c:	2318      	movs	r3, #24
 800128e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800129c:	2360      	movs	r3, #96	; 0x60
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012a4:	2301      	movs	r3, #1
 80012a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012ac:	2328      	movs	r3, #40	; 0x28
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012b0:	2307      	movs	r3, #7
 80012b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4618      	mov	r0, r3
 80012c2:	f001 fb3d 	bl	8002940 <HAL_RCC_OscConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80012cc:	f000 f818 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012d0:	230f      	movs	r3, #15
 80012d2:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d4:	2303      	movs	r3, #3
 80012d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	2104      	movs	r1, #4
 80012e8:	4618      	mov	r0, r3
 80012ea:	f001 ff05 	bl	80030f8 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012f4:	f000 f804 	bl	8001300 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
 800130a:	0000      	movs	r0, r0
 800130c:	0000      	movs	r0, r0
	...

08001310 <read_voltage>:
#include "max.h"
#include "i2c.h"

float read_voltage(I2C_HandleTypeDef *hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    uint16_t raw_voltage;
    float voltage;

   
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, REGISTER_VCELL, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY);
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2302      	movs	r3, #2
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2202      	movs	r2, #2
 800132c:	216c      	movs	r1, #108	; 0x6c
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fe9e 	bl	8002070 <HAL_I2C_Mem_Read>
 8001334:	4603      	mov	r3, r0
 8001336:	75fb      	strb	r3, [r7, #23]

    if (status != HAL_OK)
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <read_voltage+0x32>
    {
        return -1.0f; // Indicate error
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <read_voltage+0x80>)
 8001340:	e019      	b.n	8001376 <read_voltage+0x66>
    }

    
    raw_voltage = (data[0] << 8) | data[1];
 8001342:	7b3b      	ldrb	r3, [r7, #12]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	b21a      	sxth	r2, r3
 8001348:	7b7b      	ldrb	r3, [r7, #13]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21b      	sxth	r3, r3
 8001350:	82bb      	strh	r3, [r7, #20]


    voltage = raw_voltage * 78.125e-6; // 78.125 µV per LSB
 8001352:	8abb      	ldrh	r3, [r7, #20]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8e5 	bl	8000524 <__aeabi_i2d>
 800135a:	a30b      	add	r3, pc, #44	; (adr r3, 8001388 <read_voltage+0x78>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7ff f94a 	bl	80005f8 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fc1c 	bl	8000ba8 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	613b      	str	r3, [r7, #16]

    return voltage;
 8001374:	693b      	ldr	r3, [r7, #16]
}
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	f3af 8000 	nop.w
 8001388:	47ae147b 	.word	0x47ae147b
 800138c:	3f147ae1 	.word	0x3f147ae1
 8001390:	bf800000 	.word	0xbf800000

08001394 <read_soc>:

float read_soc(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af04      	add	r7, sp, #16
 800139a:	6078      	str	r0, [r7, #4]
    uint8_t data[2];
    float soc;

    // Odczyt 2 bajtów z rejestru SOC
    if (HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, REGISTER_SOC, I2C_MEMADD_SIZE_8BIT, data, sizeof(data), HAL_MAX_DELAY) == HAL_OK)
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	2204      	movs	r2, #4
 80013b0:	216c      	movs	r1, #108	; 0x6c
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fe5c 	bl	8002070 <HAL_I2C_Mem_Read>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10e      	bne.n	80013dc <read_soc+0x48>
    {
        // Wartość SoC jest przechowywana jako 16-bitowa liczba, gdzie każdy bit odpowiada 1/256%
        soc = ((data[0] << 8) | data[1]) / 256.0f;
 80013be:	7a3b      	ldrb	r3, [r7, #8]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	7a7a      	ldrb	r2, [r7, #9]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ce:	eddf 6a08 	vldr	s13, [pc, #32]	; 80013f0 <read_soc+0x5c>
 80013d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d6:	edc7 7a03 	vstr	s15, [r7, #12]
 80013da:	e001      	b.n	80013e0 <read_soc+0x4c>
    }
    else
    {
        // W przypadku błędu zwróć -1.0f
        soc = -1.0f;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <read_soc+0x60>)
 80013de:	60fb      	str	r3, [r7, #12]
    }

    return soc;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ee07 3a90 	vmov	s15, r3
}
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	43800000 	.word	0x43800000
 80013f4:	bf800000 	.word	0xbf800000

080013f8 <read_ic_version>:


uint8_t read_ic_version(I2C_HandleTypeDef *hi2c) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	6078      	str	r0, [r7, #4]
    uint8_t version;
    uint8_t reg = REGISTER_VERSION; // Adres rejestru VERSION to 0x08
 8001400:	2308      	movs	r3, #8
 8001402:	73fb      	strb	r3, [r7, #15]

    // Odczyt 1 bajtu z rejestru VERSION
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, I2C_DEFAULT_ADDRESS << 1, reg, I2C_MEMADD_SIZE_8BIT, &version, sizeof(version), HAL_MAX_DELAY);
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	b29a      	uxth	r2, r3
 8001408:	f04f 33ff 	mov.w	r3, #4294967295
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	f107 030d 	add.w	r3, r7, #13
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2301      	movs	r3, #1
 800141a:	216c      	movs	r1, #108	; 0x6c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 fe27 	bl	8002070 <HAL_I2C_Mem_Read>
 8001422:	4603      	mov	r3, r0
 8001424:	73bb      	strb	r3, [r7, #14]
    
    if (status != HAL_OK) {
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <read_ic_version+0x38>
        // W przypadku błędu zwróć 0xFF
        return 0xFF;
 800142c:	23ff      	movs	r3, #255	; 0xff
 800142e:	e000      	b.n	8001432 <read_ic_version+0x3a>
    }
    
    return version;
 8001430:	7b7b      	ldrb	r3, [r7, #13]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_RTC_Init+0x48>)
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <MX_RTC_Init+0x4c>)
 8001444:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <MX_RTC_Init+0x48>)
 8001448:	2200      	movs	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <MX_RTC_Init+0x48>)
 800144e:	227f      	movs	r2, #127	; 0x7f
 8001450:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <MX_RTC_Init+0x48>)
 8001454:	22ff      	movs	r2, #255	; 0xff
 8001456:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <MX_RTC_Init+0x48>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <MX_RTC_Init+0x48>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001464:	4b07      	ldr	r3, [pc, #28]	; (8001484 <MX_RTC_Init+0x48>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MX_RTC_Init+0x48>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001470:	4804      	ldr	r0, [pc, #16]	; (8001484 <MX_RTC_Init+0x48>)
 8001472:	f002 fce9 	bl	8003e48 <HAL_RTC_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800147c:	f7ff ff40 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000a254 	.word	0x2000a254
 8001488:	40002800 	.word	0x40002800

0800148c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0a4      	sub	sp, #144	; 0x90
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	2288      	movs	r2, #136	; 0x88
 800149a:	2100      	movs	r1, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f003 ff03 	bl	80052a8 <memset>
  if(rtcHandle->Instance==RTC)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_RTC_MspInit+0x5c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d118      	bne.n	80014de <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 f806 	bl	80034d0 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014ca:	f7ff ff19 	bl	8001300 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_RTC_MspInit+0x60>)
 80014d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_RTC_MspInit+0x60>)
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3790      	adds	r7, #144	; 0x90
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40002800 	.word	0x40002800
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_SPI2_Init+0x74>)
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <MX_SPI2_Init+0x78>)
 80014f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <MX_SPI2_Init+0x74>)
 80014fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001500:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_SPI2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_SPI2_Init+0x74>)
 800150a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800150e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_SPI2_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_SPI2_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_SPI2_Init+0x74>)
 800151e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001522:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_SPI2_Init+0x74>)
 8001526:	2210      	movs	r2, #16
 8001528:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_SPI2_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_SPI2_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_SPI2_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_SPI2_Init+0x74>)
 800153e:	2207      	movs	r2, #7
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_SPI2_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_SPI2_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_SPI2_Init+0x74>)
 8001550:	f002 fe50 	bl	80041f4 <HAL_SPI_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800155a:	f7ff fed1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	2000a278 	.word	0x2000a278
 8001568:	40003800 	.word	0x40003800

0800156c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a25      	ldr	r2, [pc, #148]	; (8001620 <HAL_SPI_MspInit+0xb4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d144      	bne.n	8001618 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a1e      	ldr	r2, [pc, #120]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_SPI_MspInit+0xb8>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d6:	2308      	movs	r3, #8
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e6:	2305      	movs	r3, #5
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <HAL_SPI_MspInit+0xbc>)
 80015f2:	f000 faeb 	bl	8001bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001608:	2305      	movs	r3, #5
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	; (800162c <HAL_SPI_MspInit+0xc0>)
 8001614:	f000 fada 	bl	8001bcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40003800 	.word	0x40003800
 8001624:	40021000 	.word	0x40021000
 8001628:	48000800 	.word	0x48000800
 800162c:	48000400 	.word	0x48000400

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_MspInit+0x44>)
 8001638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <HAL_MspInit+0x44>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6613      	str	r3, [r2, #96]	; 0x60
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_MspInit+0x44>)
 8001644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_MspInit+0x44>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a08      	ldr	r2, [pc, #32]	; (8001674 <HAL_MspInit+0x44>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_MspInit+0x44>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f958 	bl	8001978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016e6:	f003 fb87 	bl	8004df8 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
  return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
  }

  return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
  }
  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
  return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f003 faec 	bl	8004df8 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20018000 	.word	0x20018000
 800184c:	00000400 	.word	0x00000400
 8001850:	2000a2dc 	.word	0x2000a2dc
 8001854:	2000a2f8 	.word	0x2000a2f8

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001880:	f7ff ffea 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f003 fc63 	bl	8005174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ae:	f7ff fbe5 	bl	800107c <main>

080018b2 <LoopForever>:

LoopForever:
    b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80018c0:	0800b984 	.word	0x0800b984
  ldr r2, =_sbss
 80018c4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80018c8:	2000a2f4 	.word	0x2000a2f4

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>

080018ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f000 f943 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018de:	200f      	movs	r0, #15
 80018e0:	f000 f80e 	bl	8001900 <HAL_InitTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	71fb      	strb	r3, [r7, #7]
 80018ee:	e001      	b.n	80018f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018f0:	f7ff fe9e 	bl	8001630 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018f4:	79fb      	ldrb	r3, [r7, #7]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_InitTick+0x6c>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_InitTick+0x70>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_InitTick+0x6c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f941 	bl	8001bb2 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10f      	bne.n	8001956 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d809      	bhi.n	8001950 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f919 	bl	8001b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_InitTick+0x74>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e007      	b.n	8001960 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
 8001954:	e004      	b.n	8001960 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e001      	b.n	8001960 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001960:	7bfb      	ldrb	r3, [r7, #15]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000008 	.word	0x20000008
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	2000a2e0 	.word	0x2000a2e0

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	2000a2e0 	.word	0x2000a2e0

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff47 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff5c 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffb0 	bl	8001b20 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bda:	e17f      	b.n	8001edc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2101      	movs	r1, #1
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8171 	beq.w	8001ed6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d005      	beq.n	8001c0c <HAL_GPIO_Init+0x40>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d130      	bne.n	8001c6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c42:	2201      	movs	r2, #1
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	091b      	lsrs	r3, r3, #4
 8001c58:	f003 0201 	and.w	r2, r3, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d118      	bne.n	8001cac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	6939      	ldr	r1, [r7, #16]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80ac 	beq.w	8001ed6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <HAL_GPIO_Init+0x330>)
 8001d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d82:	4a5e      	ldr	r2, [pc, #376]	; (8001efc <HAL_GPIO_Init+0x330>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6613      	str	r3, [r2, #96]	; 0x60
 8001d8a:	4b5c      	ldr	r3, [pc, #368]	; (8001efc <HAL_GPIO_Init+0x330>)
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d96:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <HAL_GPIO_Init+0x334>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	220f      	movs	r2, #15
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x242>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_GPIO_Init+0x338>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x23e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_GPIO_Init+0x33c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x23a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4d      	ldr	r2, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x340>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x236>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4c      	ldr	r2, [pc, #304]	; (8001f10 <HAL_GPIO_Init+0x344>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x232>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_GPIO_Init+0x348>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x22e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4a      	ldr	r2, [pc, #296]	; (8001f18 <HAL_GPIO_Init+0x34c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x22a>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00c      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001df6:	2307      	movs	r3, #7
 8001df8:	e00a      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001dfe:	2304      	movs	r3, #4
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x244>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e20:	4937      	ldr	r1, [pc, #220]	; (8001f00 <HAL_GPIO_Init+0x334>)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e52:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e82:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ed0:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <HAL_GPIO_Init+0x350>)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f47f ae78 	bne.w	8001bdc <HAL_GPIO_Init+0x10>
  }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	48000400 	.word	0x48000400
 8001f08:	48000800 	.word	0x48000800
 8001f0c:	48000c00 	.word	0x48000c00
 8001f10:	48001000 	.word	0x48001000
 8001f14:	48001400 	.word	0x48001400
 8001f18:	48001800 	.word	0x48001800
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e081      	b.n	8002066 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fef2 	bl	8000d60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d104      	bne.n	8001fea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800200c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69d9      	ldr	r1, [r3, #28]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	4608      	mov	r0, r1
 800207a:	4611      	mov	r1, r2
 800207c:	461a      	mov	r2, r3
 800207e:	4603      	mov	r3, r0
 8002080:	817b      	strh	r3, [r7, #10]
 8002082:	460b      	mov	r3, r1
 8002084:	813b      	strh	r3, [r7, #8]
 8002086:	4613      	mov	r3, r2
 8002088:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	f040 80fd 	bne.w	8002292 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_I2C_Mem_Read+0x34>
 800209e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e0f1      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Mem_Read+0x4e>
 80020ba:	2302      	movs	r3, #2
 80020bc:	e0ea      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020c6:	f7ff fc6b 	bl	80019a0 <HAL_GetTick>
 80020ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2319      	movs	r3, #25
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f95b 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e0d5      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2222      	movs	r2, #34	; 0x22
 80020ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2240      	movs	r2, #64	; 0x40
 80020f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002110:	88f8      	ldrh	r0, [r7, #6]
 8002112:	893a      	ldrh	r2, [r7, #8]
 8002114:	8979      	ldrh	r1, [r7, #10]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4603      	mov	r3, r0
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f8bf 	bl	80022a4 <I2C_RequestMemoryRead>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0ad      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	2bff      	cmp	r3, #255	; 0xff
 8002140:	d90e      	bls.n	8002160 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	22ff      	movs	r2, #255	; 0xff
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	8979      	ldrh	r1, [r7, #10]
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_I2C_Mem_Read+0x22c>)
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f000 fac3 	bl	80026e4 <I2C_TransferConfig>
 800215e:	e00f      	b.n	8002180 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	b2da      	uxtb	r2, r3
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_I2C_Mem_Read+0x22c>)
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fab2 	bl	80026e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	2104      	movs	r1, #4
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f902 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e07c      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d034      	beq.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d130      	bne.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	2200      	movs	r2, #0
 80021e6:	2180      	movs	r1, #128	; 0x80
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f8d3 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e04d      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d90e      	bls.n	8002220 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	22ff      	movs	r2, #255	; 0xff
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	b2da      	uxtb	r2, r3
 800220e:	8979      	ldrh	r1, [r7, #10]
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fa63 	bl	80026e4 <I2C_TransferConfig>
 800221e:	e00f      	b.n	8002240 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fa52 	bl	80026e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d19a      	bne.n	8002180 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f000 f920 	bl	8002494 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e01a      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2220      	movs	r2, #32
 8002264:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_I2C_Mem_Read+0x230>)
 8002272:	400b      	ands	r3, r1
 8002274:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002292:	2302      	movs	r3, #2
  }
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	80002400 	.word	0x80002400
 80022a0:	fe00e800 	.word	0xfe00e800

080022a4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	4608      	mov	r0, r1
 80022ae:	4611      	mov	r1, r2
 80022b0:	461a      	mov	r2, r3
 80022b2:	4603      	mov	r3, r0
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	460b      	mov	r3, r1
 80022b8:	813b      	strh	r3, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	8979      	ldrh	r1, [r7, #10]
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <I2C_RequestMemoryRead+0xa4>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa0a 	bl	80026e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 f89d 	bl	8002414 <I2C_WaitOnTXISFlagUntilTimeout>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e02c      	b.n	800233e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ea:	893b      	ldrh	r3, [r7, #8]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	629a      	str	r2, [r3, #40]	; 0x28
 80022f4:	e015      	b.n	8002322 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022f6:	893b      	ldrh	r3, [r7, #8]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f883 	bl	8002414 <I2C_WaitOnTXISFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e012      	b.n	800233e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002318:	893b      	ldrh	r3, [r7, #8]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2200      	movs	r2, #0
 800232a:	2140      	movs	r1, #64	; 0x40
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f831 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	80002000 	.word	0x80002000

0800234c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d103      	bne.n	800236a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b01      	cmp	r3, #1
 8002376:	d007      	beq.n	8002388 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	619a      	str	r2, [r3, #24]
  }
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	e022      	b.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d01e      	beq.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7ff faf7 	bl	80019a0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d113      	bne.n	80023ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e00f      	b.n	800240c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699a      	ldr	r2, [r3, #24]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	429a      	cmp	r2, r3
 8002408:	d0cd      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002420:	e02c      	b.n	800247c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 f870 	bl	800250c <I2C_IsErrorOccurred>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e02a      	b.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d01e      	beq.n	800247c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243e:	f7ff faaf 	bl	80019a0 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	429a      	cmp	r2, r3
 800244c:	d302      	bcc.n	8002454 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d113      	bne.n	800247c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002458:	f043 0220 	orr.w	r2, r3, #32
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b02      	cmp	r3, #2
 8002488:	d1cb      	bne.n	8002422 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a0:	e028      	b.n	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f830 	bl	800250c <I2C_IsErrorOccurred>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e026      	b.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7ff fa73 	bl	80019a0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d113      	bne.n	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0320 	and.w	r3, r3, #32
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d1cf      	bne.n	80024a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	; 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	f003 0310 	and.w	r3, r3, #16
 8002534:	2b00      	cmp	r3, #0
 8002536:	d075      	beq.n	8002624 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2210      	movs	r2, #16
 800253e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002540:	e056      	b.n	80025f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d052      	beq.n	80025f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff fa29 	bl	80019a0 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_IsErrorOccurred+0x54>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d147      	bne.n	80025f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002572:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002582:	d12e      	bne.n	80025e2 <I2C_IsErrorOccurred+0xd6>
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800258a:	d02a      	beq.n	80025e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	2b20      	cmp	r3, #32
 8002590:	d027      	beq.n	80025e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025a2:	f7ff f9fd 	bl	80019a0 <HAL_GetTick>
 80025a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a8:	e01b      	b.n	80025e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025aa:	f7ff f9f9 	bl	80019a0 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b19      	cmp	r3, #25
 80025b6:	d914      	bls.n	80025e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d1dc      	bne.n	80025aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b20      	cmp	r3, #32
 80025fc:	d003      	beq.n	8002606 <I2C_IsErrorOccurred+0xfa>
 80025fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002602:	2b00      	cmp	r3, #0
 8002604:	d09d      	beq.n	8002542 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2220      	movs	r2, #32
 8002614:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00b      	beq.n	800264e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002646:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f043 0308 	orr.w	r3, r3, #8
 800265e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002668:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002696:	2b00      	cmp	r3, #0
 8002698:	d01c      	beq.n	80026d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff fe56 	bl	800234c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <I2C_IsErrorOccurred+0x1d4>)
 80026ac:	400b      	ands	r3, r1
 80026ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3728      	adds	r7, #40	; 0x28
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	fe00e800 	.word	0xfe00e800

080026e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	460b      	mov	r3, r1
 80026f0:	817b      	strh	r3, [r7, #10]
 80026f2:	4613      	mov	r3, r2
 80026f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026f6:	897b      	ldrh	r3, [r7, #10]
 80026f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026fc:	7a7b      	ldrb	r3, [r7, #9]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002704:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	4313      	orrs	r3, r2
 800270e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002712:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	0d5b      	lsrs	r3, r3, #21
 800271e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <I2C_TransferConfig+0x60>)
 8002724:	430b      	orrs	r3, r1
 8002726:	43db      	mvns	r3, r3
 8002728:	ea02 0103 	and.w	r1, r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	03ff63ff 	.word	0x03ff63ff

08002748 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b20      	cmp	r3, #32
 800275c:	d138      	bne.n	80027d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002768:	2302      	movs	r3, #2
 800276a:	e032      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800279a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6819      	ldr	r1, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b20      	cmp	r3, #32
 80027f2:	d139      	bne.n	8002868 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027fe:	2302      	movs	r3, #2
 8002800:	e033      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2224      	movs	r2, #36	; 0x24
 800280e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0201 	bic.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002830:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	e000      	b.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
  }
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_PWREx_GetVoltageRange+0x18>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	40007000 	.word	0x40007000

08002894 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a2:	d130      	bne.n	8002906 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028a4:	4b23      	ldr	r3, [pc, #140]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b0:	d038      	beq.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028c2:	4b1d      	ldr	r3, [pc, #116]	; (8002938 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2232      	movs	r2, #50	; 0x32
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	0c9b      	lsrs	r3, r3, #18
 80028d4:	3301      	adds	r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d8:	e002      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	3b01      	subs	r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e0:	4b14      	ldr	r3, [pc, #80]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ec:	d102      	bne.n	80028f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f2      	bne.n	80028da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002900:	d110      	bne.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e00f      	b.n	8002926 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800290e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002912:	d007      	beq.n	8002924 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800291c:	4a05      	ldr	r2, [pc, #20]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002922:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40007000 	.word	0x40007000
 8002938:	20000000 	.word	0x20000000
 800293c:	431bde83 	.word	0x431bde83

08002940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e3ca      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002952:	4b97      	ldr	r3, [pc, #604]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295c:	4b94      	ldr	r3, [pc, #592]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80e4 	beq.w	8002b3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_RCC_OscConfig+0x4a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	f040 808b 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 8087 	bne.w	8002a98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800298a:	4b89      	ldr	r3, [pc, #548]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_RCC_OscConfig+0x62>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e3a2      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1a      	ldr	r2, [r3, #32]
 80029a6:	4b82      	ldr	r3, [pc, #520]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <HAL_RCC_OscConfig+0x7c>
 80029b2:	4b7f      	ldr	r3, [pc, #508]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ba:	e005      	b.n	80029c8 <HAL_RCC_OscConfig+0x88>
 80029bc:	4b7c      	ldr	r3, [pc, #496]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d223      	bcs.n	8002a14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f000 fd1d 	bl	8003410 <RCC_SetFlashLatencyFromMSIRange>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e383      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029e0:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a72      	ldr	r2, [pc, #456]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f043 0308 	orr.w	r3, r3, #8
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b70      	ldr	r3, [pc, #448]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	496d      	ldr	r1, [pc, #436]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029fe:	4b6c      	ldr	r3, [pc, #432]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	4968      	ldr	r1, [pc, #416]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
 8002a12:	e025      	b.n	8002a60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a14:	4b66      	ldr	r3, [pc, #408]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a65      	ldr	r2, [pc, #404]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	f043 0308 	orr.w	r3, r3, #8
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	4960      	ldr	r1, [pc, #384]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	021b      	lsls	r3, r3, #8
 8002a40:	495b      	ldr	r1, [pc, #364]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fcdd 	bl	8003410 <RCC_SetFlashLatencyFromMSIRange>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e343      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a60:	f000 fc4a 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	4950      	ldr	r1, [pc, #320]	; (8002bb4 <HAL_RCC_OscConfig+0x274>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7c:	4a4e      	ldr	r2, [pc, #312]	; (8002bb8 <HAL_RCC_OscConfig+0x278>)
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a80:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_OscConfig+0x27c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe ff3b 	bl	8001900 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d052      	beq.n	8002b3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	e327      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d032      	beq.n	8002b06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a42      	ldr	r2, [pc, #264]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff78 	bl	80019a0 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ab4:	f7fe ff74 	bl	80019a0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e310      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac6:	4b3a      	ldr	r3, [pc, #232]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a36      	ldr	r2, [pc, #216]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	f043 0308 	orr.w	r3, r3, #8
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4931      	ldr	r1, [pc, #196]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002af0:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	492c      	ldr	r1, [pc, #176]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
 8002b04:	e01a      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b12:	f7fe ff45 	bl	80019a0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b1a:	f7fe ff41 	bl	80019a0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e2dd      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x1da>
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d074      	beq.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d005      	beq.n	8002b5a <HAL_RCC_OscConfig+0x21a>
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	2b0c      	cmp	r3, #12
 8002b52:	d10e      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d10b      	bne.n	8002b72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d064      	beq.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d160      	bne.n	8002c30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e2ba      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x24a>
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	e026      	b.n	8002bd8 <HAL_RCC_OscConfig+0x298>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b92:	d115      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x280>
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b9e:	6013      	str	r3, [r2, #0]
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a02      	ldr	r2, [pc, #8]	; (8002bb0 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e014      	b.n	8002bd8 <HAL_RCC_OscConfig+0x298>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	0800b3c8 	.word	0x0800b3c8
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	4ba0      	ldr	r3, [pc, #640]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9f      	ldr	r2, [pc, #636]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bca:	6013      	str	r3, [r2, #0]
 8002bcc:	4b9d      	ldr	r3, [pc, #628]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a9c      	ldr	r2, [pc, #624]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d013      	beq.n	8002c08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fede 	bl	80019a0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe feda 	bl	80019a0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e276      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bfa:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2a8>
 8002c06:	e014      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe feca 	bl	80019a0 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c10:	f7fe fec6 	bl	80019a0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b64      	cmp	r3, #100	; 0x64
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e262      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2d0>
 8002c2e:	e000      	b.n	8002c32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d060      	beq.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x310>
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d119      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d116      	bne.n	8002c7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c50:	4b7c      	ldr	r3, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_OscConfig+0x328>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e23f      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c68:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	4973      	ldr	r1, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c7c:	e040      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c86:	4b6f      	ldr	r3, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fe fe85 	bl	80019a0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c9a:	f7fe fe81 	bl	80019a0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e21d      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cac:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb8:	4b62      	ldr	r3, [pc, #392]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	495f      	ldr	r1, [pc, #380]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	604b      	str	r3, [r1, #4]
 8002ccc:	e018      	b.n	8002d00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cce:	4b5d      	ldr	r3, [pc, #372]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5c      	ldr	r2, [pc, #368]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cda:	f7fe fe61 	bl	80019a0 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fe5d 	bl	80019a0 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1f9      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf4:	4b53      	ldr	r3, [pc, #332]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d03c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01c      	beq.n	8002d4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fe3c 	bl	80019a0 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fe38 	bl	80019a0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1d4      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0ef      	beq.n	8002d2c <HAL_RCC_OscConfig+0x3ec>
 8002d4c:	e01b      	b.n	8002d86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4e:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d56:	f023 0301 	bic.w	r3, r3, #1
 8002d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5e:	f7fe fe1f 	bl	80019a0 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d66:	f7fe fe1b 	bl	80019a0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e1b7      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1ef      	bne.n	8002d66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80a6 	beq.w	8002ee0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d98:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6593      	str	r3, [r2, #88]	; 0x58
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dc0:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d118      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dcc:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd8:	f7fe fde2 	bl	80019a0 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de0:	f7fe fdde 	bl	80019a0 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e17a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002df2:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_RCC_OscConfig+0x508>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4d8>
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e16:	e029      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b05      	cmp	r3, #5
 8002e1e:	d115      	bne.n	8002e4c <HAL_RCC_OscConfig+0x50c>
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a03      	ldr	r2, [pc, #12]	; (8002e44 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x52c>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	4b9c      	ldr	r3, [pc, #624]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	4a9b      	ldr	r2, [pc, #620]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e54:	f023 0301 	bic.w	r3, r3, #1
 8002e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e5c:	4b98      	ldr	r3, [pc, #608]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a97      	ldr	r2, [pc, #604]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d016      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe fd94 	bl	80019a0 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fd90 	bl	80019a0 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e12a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e92:	4b8b      	ldr	r3, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0ed      	beq.n	8002e7c <HAL_RCC_OscConfig+0x53c>
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea2:	f7fe fd7d 	bl	80019a0 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ea8:	e00a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eaa:	f7fe fd79 	bl	80019a0 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e113      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec0:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1ed      	bne.n	8002eaa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b7a      	ldr	r3, [pc, #488]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a79      	ldr	r2, [pc, #484]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 80fe 	beq.w	80030e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	f040 80d0 	bne.w	8003094 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ef4:	4b72      	ldr	r3, [pc, #456]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d130      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d127      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11f      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	2a07      	cmp	r2, #7
 8002f36:	bf14      	ite	ne
 8002f38:	2201      	movne	r2, #1
 8002f3a:	2200      	moveq	r2, #0
 8002f3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d113      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	085b      	lsrs	r3, r3, #1
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d109      	bne.n	8002f6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	3b01      	subs	r3, #1
 8002f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d06e      	beq.n	8003048 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d069      	beq.n	8003044 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f70:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f7c:	4b50      	ldr	r3, [pc, #320]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0ad      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b4c      	ldr	r3, [pc, #304]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a4b      	ldr	r2, [pc, #300]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f98:	f7fe fd02 	bl	80019a0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fe fcfe 	bl	80019a0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e09a      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb2:	4b43      	ldr	r3, [pc, #268]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <HAL_RCC_OscConfig+0x784>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	4311      	orrs	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd8:	0212      	lsls	r2, r2, #8
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fe0:	0852      	lsrs	r2, r2, #1
 8002fe2:	3a01      	subs	r2, #1
 8002fe4:	0552      	lsls	r2, r2, #21
 8002fe6:	4311      	orrs	r1, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fec:	0852      	lsrs	r2, r2, #1
 8002fee:	3a01      	subs	r2, #1
 8002ff0:	0652      	lsls	r2, r2, #25
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff8:	0912      	lsrs	r2, r2, #4
 8002ffa:	0452      	lsls	r2, r2, #17
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	4930      	ldr	r1, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003000:	4313      	orrs	r3, r2
 8003002:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003004:	4b2e      	ldr	r3, [pc, #184]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2d      	ldr	r2, [pc, #180]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800301c:	f7fe fcc0 	bl	80019a0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fcbc 	bl	80019a0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e058      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003042:	e050      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e04f      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003048:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d148      	bne.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a19      	ldr	r2, [pc, #100]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800306c:	f7fe fc98 	bl	80019a0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe fc94 	bl	80019a0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e030      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x734>
 8003092:	e028      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b0c      	cmp	r3, #12
 8003098:	d023      	beq.n	80030e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_RCC_OscConfig+0x780>)
 80030a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a6:	f7fe fc7b 	bl	80019a0 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ac:	e00c      	b.n	80030c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fc77 	bl	80019a0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d905      	bls.n	80030c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e013      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
 80030c0:	40021000 	.word	0x40021000
 80030c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ec      	bne.n	80030ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030d4:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	4905      	ldr	r1, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x7b0>)
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_OscConfig+0x7b4>)
 80030dc:	4013      	ands	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e001      	b.n	80030e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3720      	adds	r7, #32
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	feeefffc 	.word	0xfeeefffc

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0e7      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b75      	ldr	r3, [pc, #468]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b72      	ldr	r3, [pc, #456]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	4970      	ldr	r1, [pc, #448]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b6e      	ldr	r3, [pc, #440]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0cf      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d010      	beq.n	800316a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003154:	429a      	cmp	r2, r3
 8003156:	d908      	bls.n	800316a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003158:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4960      	ldr	r1, [pc, #384]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04c      	beq.n	8003210 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	4b5a      	ldr	r3, [pc, #360]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d121      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0a6      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e09a      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ae:	4b4e      	ldr	r3, [pc, #312]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e08e      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031be:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e086      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4943      	ldr	r1, [pc, #268]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e0:	f7fe fbde 	bl	80019a0 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fbda 	bl	80019a0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e06e      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b3a      	ldr	r3, [pc, #232]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	4b31      	ldr	r3, [pc, #196]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003228:	429a      	cmp	r2, r3
 800322a:	d208      	bcs.n	800323e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	492b      	ldr	r1, [pc, #172]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323e:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d210      	bcs.n	800326e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 0207 	bic.w	r2, r3, #7
 8003254:	4923      	ldr	r1, [pc, #140]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCC_ClockConfig+0x1ec>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e036      	b.n	80032dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4918      	ldr	r1, [pc, #96]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d009      	beq.n	80032ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003298:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ac:	f000 f824 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	490b      	ldr	r1, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x1f4>)
 80032be:	5ccb      	ldrb	r3, [r1, r3]
 80032c0:	f003 031f 	and.w	r3, r3, #31
 80032c4:	fa22 f303 	lsr.w	r3, r2, r3
 80032c8:	4a09      	ldr	r2, [pc, #36]	; (80032f0 <HAL_RCC_ClockConfig+0x1f8>)
 80032ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1fc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fb15 	bl	8001900 <HAL_InitTick>
 80032d6:	4603      	mov	r3, r0
 80032d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80032da:	7afb      	ldrb	r3, [r7, #11]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	0800b3c8 	.word	0x0800b3c8
 80032f0:	20000000 	.word	0x20000000
 80032f4:	20000004 	.word	0x20000004

080032f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61fb      	str	r3, [r7, #28]
 8003302:	2300      	movs	r3, #0
 8003304:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_GetSysClockFreq+0x34>
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d121      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d11e      	bne.n	800336a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003338:	4b31      	ldr	r3, [pc, #196]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e005      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003348:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b04      	cmp	r3, #4
 800336e:	d102      	bne.n	8003376 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 8003372:	61bb      	str	r3, [r7, #24]
 8003374:	e004      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d101      	bne.n	8003380 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 800337e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b0c      	cmp	r3, #12
 8003384:	d134      	bne.n	80033f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0xa6>
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b03      	cmp	r3, #3
 800339a:	d003      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xac>
 800339c:	e005      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800339e:	4b1a      	ldr	r3, [pc, #104]	; (8003408 <HAL_RCC_GetSysClockFreq+0x110>)
 80033a0:	617b      	str	r3, [r7, #20]
      break;
 80033a2:	e005      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_GetSysClockFreq+0x114>)
 80033a6:	617b      	str	r3, [r7, #20]
      break;
 80033a8:	e002      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	617b      	str	r3, [r7, #20]
      break;
 80033ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	3301      	adds	r3, #1
 80033bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_GetSysClockFreq+0x108>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	0e5b      	lsrs	r3, r3, #25
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	3301      	adds	r3, #1
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033f0:	69bb      	ldr	r3, [r7, #24]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3724      	adds	r7, #36	; 0x24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
 8003404:	0800b3d8 	.word	0x0800b3d8
 8003408:	00f42400 	.word	0x00f42400
 800340c:	007a1200 	.word	0x007a1200

08003410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003428:	f7ff fa26 	bl	8002878 <HAL_PWREx_GetVoltageRange>
 800342c:	6178      	str	r0, [r7, #20]
 800342e:	e014      	b.n	800345a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	4a24      	ldr	r2, [pc, #144]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	; 0x58
 800343c:	4b22      	ldr	r3, [pc, #136]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003448:	f7ff fa16 	bl	8002878 <HAL_PWREx_GetVoltageRange>
 800344c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d10b      	bne.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b80      	cmp	r3, #128	; 0x80
 8003466:	d919      	bls.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2ba0      	cmp	r3, #160	; 0xa0
 800346c:	d902      	bls.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800346e:	2302      	movs	r3, #2
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e013      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e010      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d902      	bls.n	8003486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003480:	2303      	movs	r3, #3
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	e00a      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b80      	cmp	r3, #128	; 0x80
 800348a:	d102      	bne.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800348c:	2302      	movs	r3, #2
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e004      	b.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b70      	cmp	r3, #112	; 0x70
 8003496:	d101      	bne.n	800349c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003498:	2301      	movs	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 0207 	bic.w	r2, r3, #7
 80034a4:	4909      	ldr	r1, [pc, #36]	; (80034cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d001      	beq.n	80034be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000
 80034cc:	40022000 	.word	0x40022000

080034d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034d8:	2300      	movs	r3, #0
 80034da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034dc:	2300      	movs	r3, #0
 80034de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d041      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034f4:	d02a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034fa:	d824      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003500:	d008      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003506:	d81e      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800350c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003510:	d010      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003512:	e018      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003514:	4b86      	ldr	r3, [pc, #536]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a85      	ldr	r2, [pc, #532]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003520:	e015      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3304      	adds	r3, #4
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fabb 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003532:	e00c      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3320      	adds	r3, #32
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fba6 	bl	8003c8c <RCCEx_PLLSAI2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	74fb      	strb	r3, [r7, #19]
      break;
 800354a:	e000      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800354c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003554:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003562:	4973      	ldr	r1, [pc, #460]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800356a:	e001      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d041      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003580:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003584:	d02a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003586:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800358a:	d824      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800358c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003590:	d008      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003592:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003596:	d81e      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d010      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035a2:	e018      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035a4:	4b62      	ldr	r3, [pc, #392]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a61      	ldr	r2, [pc, #388]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035b0:	e015      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fa73 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c2:	e00c      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3320      	adds	r3, #32
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fb5e 	bl	8003c8c <RCCEx_PLLSAI2_Config>
 80035d0:	4603      	mov	r3, r0
 80035d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	74fb      	strb	r3, [r7, #19]
      break;
 80035da:	e000      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035de:	7cfb      	ldrb	r3, [r7, #19]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035e4:	4b52      	ldr	r3, [pc, #328]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035f2:	494f      	ldr	r1, [pc, #316]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035fa:	e001      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80a0 	beq.w	800374e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003622:	2300      	movs	r3, #0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00d      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003628:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362c:	4a40      	ldr	r2, [pc, #256]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	6593      	str	r3, [r2, #88]	; 0x58
 8003634:	4b3e      	ldr	r3, [pc, #248]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003640:	2301      	movs	r3, #1
 8003642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003644:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3a      	ldr	r2, [pc, #232]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003650:	f7fe f9a6 	bl	80019a0 <HAL_GetTick>
 8003654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003656:	e009      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003658:	f7fe f9a2 	bl	80019a0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d902      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	74fb      	strb	r3, [r7, #19]
        break;
 800366a:	e005      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366c:	4b31      	ldr	r3, [pc, #196]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ef      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d15c      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800367e:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d019      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800369c:	4b24      	ldr	r3, [pc, #144]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a8:	4b21      	ldr	r3, [pc, #132]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a20      	ldr	r2, [pc, #128]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b8:	4b1d      	ldr	r3, [pc, #116]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	4a1c      	ldr	r2, [pc, #112]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036c8:	4a19      	ldr	r2, [pc, #100]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe f961 	bl	80019a0 <HAL_GetTick>
 80036de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e0:	e00b      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe f95d 	bl	80019a0 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d902      	bls.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	74fb      	strb	r3, [r7, #19]
            break;
 80036f8:	e006      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ec      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800370e:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003726:	e009      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
 800372c:	e006      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800373c:	7c7b      	ldrb	r3, [r7, #17]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d105      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003742:	4b9e      	ldr	r3, [pc, #632]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	4a9d      	ldr	r2, [pc, #628]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800375a:	4b98      	ldr	r3, [pc, #608]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f023 0203 	bic.w	r2, r3, #3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	4994      	ldr	r1, [pc, #592]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800377c:	4b8f      	ldr	r3, [pc, #572]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003782:	f023 020c 	bic.w	r2, r3, #12
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	498c      	ldr	r1, [pc, #560]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800379e:	4b87      	ldr	r3, [pc, #540]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	4983      	ldr	r1, [pc, #524]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037c0:	4b7e      	ldr	r3, [pc, #504]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	497b      	ldr	r1, [pc, #492]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0310 	and.w	r3, r3, #16
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037e2:	4b76      	ldr	r3, [pc, #472]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f0:	4972      	ldr	r1, [pc, #456]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003804:	4b6d      	ldr	r3, [pc, #436]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003812:	496a      	ldr	r1, [pc, #424]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003826:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	4961      	ldr	r1, [pc, #388]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003848:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	4959      	ldr	r1, [pc, #356]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	4313      	orrs	r3, r2
 800385a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00a      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386a:	4b54      	ldr	r3, [pc, #336]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003878:	4950      	ldr	r1, [pc, #320]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387a:	4313      	orrs	r3, r2
 800387c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800388c:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389a:	4948      	ldr	r1, [pc, #288]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00a      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	493f      	ldr	r1, [pc, #252]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d028      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038de:	4937      	ldr	r1, [pc, #220]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ee:	d106      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	4a31      	ldr	r2, [pc, #196]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fa:	60d3      	str	r3, [r2, #12]
 80038fc:	e011      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003906:	d10c      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f000 f8c8 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800391e:	7cfb      	ldrb	r3, [r7, #19]
 8003920:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d028      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800392e:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	491f      	ldr	r1, [pc, #124]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394c:	d106      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800394e:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	4a1a      	ldr	r2, [pc, #104]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003958:	60d3      	str	r3, [r2, #12]
 800395a:	e011      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003964:	d10c      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 f899 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02b      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039aa:	d109      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a02      	ldr	r2, [pc, #8]	; (80039bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039b6:	60d3      	str	r3, [r2, #12]
 80039b8:	e014      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039c8:	d10c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f867 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039da:	7cfb      	ldrb	r3, [r7, #19]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02f      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fe:	4928      	ldr	r1, [pc, #160]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a0e:	d10d      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3304      	adds	r3, #4
 8003a14:	2102      	movs	r1, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f844 	bl	8003aa4 <RCCEx_PLLSAI1_Config>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d014      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a26:	7cfb      	ldrb	r3, [r7, #19]
 8003a28:	74bb      	strb	r3, [r7, #18]
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3320      	adds	r3, #32
 8003a3a:	2102      	movs	r1, #2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f925 	bl	8003c8c <RCCEx_PLLSAI2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a46:	7cfb      	ldrb	r3, [r7, #19]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a4c:	7cfb      	ldrb	r3, [r7, #19]
 8003a4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a5c:	4b10      	ldr	r3, [pc, #64]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a6a:	490d      	ldr	r1, [pc, #52]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00b      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8e:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a96:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40021000 	.word	0x40021000

08003aa4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ab2:	4b75      	ldr	r3, [pc, #468]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d018      	beq.n	8003af0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003abe:	4b72      	ldr	r3, [pc, #456]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0203 	and.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d10d      	bne.n	8003aea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ad6:	4b6c      	ldr	r3, [pc, #432]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d047      	beq.n	8003b7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	e044      	b.n	8003b7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d018      	beq.n	8003b2a <RCCEx_PLLSAI1_Config+0x86>
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d825      	bhi.n	8003b48 <RCCEx_PLLSAI1_Config+0xa4>
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d002      	beq.n	8003b06 <RCCEx_PLLSAI1_Config+0x62>
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d009      	beq.n	8003b18 <RCCEx_PLLSAI1_Config+0x74>
 8003b04:	e020      	b.n	8003b48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b06:	4b60      	ldr	r3, [pc, #384]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d11d      	bne.n	8003b4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b16:	e01a      	b.n	8003b4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b18:	4b5b      	ldr	r3, [pc, #364]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d116      	bne.n	8003b52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e013      	b.n	8003b52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b2a:	4b57      	ldr	r3, [pc, #348]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10f      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b36:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b46:	e006      	b.n	8003b56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b4c:	e004      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10d      	bne.n	8003b7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b5e:	4b4a      	ldr	r3, [pc, #296]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	430b      	orrs	r3, r1
 8003b74:	4944      	ldr	r1, [pc, #272]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d17d      	bne.n	8003c7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b80:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a40      	ldr	r2, [pc, #256]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b8c:	f7fd ff08 	bl	80019a0 <HAL_GetTick>
 8003b90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b92:	e009      	b.n	8003ba8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b94:	f7fd ff04 	bl	80019a0 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d902      	bls.n	8003ba8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	73fb      	strb	r3, [r7, #15]
        break;
 8003ba6:	e005      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ba8:	4b37      	ldr	r3, [pc, #220]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1ef      	bne.n	8003b94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d160      	bne.n	8003c7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bc0:	4b31      	ldr	r3, [pc, #196]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6892      	ldr	r2, [r2, #8]
 8003bd0:	0211      	lsls	r1, r2, #8
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68d2      	ldr	r2, [r2, #12]
 8003bd6:	0912      	lsrs	r2, r2, #4
 8003bd8:	0452      	lsls	r2, r2, #17
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	492a      	ldr	r1, [pc, #168]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]
 8003be2:	e027      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d112      	bne.n	8003c10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bea:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bf2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6892      	ldr	r2, [r2, #8]
 8003bfa:	0211      	lsls	r1, r2, #8
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6912      	ldr	r2, [r2, #16]
 8003c00:	0852      	lsrs	r2, r2, #1
 8003c02:	3a01      	subs	r2, #1
 8003c04:	0552      	lsls	r2, r2, #21
 8003c06:	430a      	orrs	r2, r1
 8003c08:	491f      	ldr	r1, [pc, #124]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	610b      	str	r3, [r1, #16]
 8003c0e:	e011      	b.n	8003c34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c10:	4b1d      	ldr	r3, [pc, #116]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6892      	ldr	r2, [r2, #8]
 8003c20:	0211      	lsls	r1, r2, #8
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6952      	ldr	r2, [r2, #20]
 8003c26:	0852      	lsrs	r2, r2, #1
 8003c28:	3a01      	subs	r2, #1
 8003c2a:	0652      	lsls	r2, r2, #25
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	4916      	ldr	r1, [pc, #88]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c40:	f7fd feae 	bl	80019a0 <HAL_GetTick>
 8003c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c46:	e009      	b.n	8003c5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c48:	f7fd feaa 	bl	80019a0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d902      	bls.n	8003c5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	73fb      	strb	r3, [r7, #15]
          break;
 8003c5a:	e005      	b.n	8003c68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ef      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	691a      	ldr	r2, [r3, #16]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	4904      	ldr	r1, [pc, #16]	; (8003c88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c9a:	4b6a      	ldr	r3, [pc, #424]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003cbe:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d047      	beq.n	8003d62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e044      	b.n	8003d62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d018      	beq.n	8003d12 <RCCEx_PLLSAI2_Config+0x86>
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d825      	bhi.n	8003d30 <RCCEx_PLLSAI2_Config+0xa4>
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d002      	beq.n	8003cee <RCCEx_PLLSAI2_Config+0x62>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d009      	beq.n	8003d00 <RCCEx_PLLSAI2_Config+0x74>
 8003cec:	e020      	b.n	8003d30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cee:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfe:	e01a      	b.n	8003d36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e013      	b.n	8003d3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d12:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2e:	e006      	b.n	8003d3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e004      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d46:	4b3f      	ldr	r3, [pc, #252]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	4939      	ldr	r1, [pc, #228]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d167      	bne.n	8003e38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a35      	ldr	r2, [pc, #212]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fe14 	bl	80019a0 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d7c:	f7fd fe10 	bl	80019a0 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d90:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ef      	bne.n	8003d7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d14a      	bne.n	8003e38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	0912      	lsrs	r2, r2, #4
 8003dc0:	0452      	lsls	r2, r2, #17
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	491f      	ldr	r1, [pc, #124]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	614b      	str	r3, [r1, #20]
 8003dca:	e011      	b.n	8003df0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dd4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6892      	ldr	r2, [r2, #8]
 8003ddc:	0211      	lsls	r1, r2, #8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6912      	ldr	r2, [r2, #16]
 8003de2:	0852      	lsrs	r2, r2, #1
 8003de4:	3a01      	subs	r2, #1
 8003de6:	0652      	lsls	r2, r2, #25
 8003de8:	430a      	orrs	r2, r1
 8003dea:	4916      	ldr	r1, [pc, #88]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003df0:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fdd0 	bl	80019a0 <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e02:	e009      	b.n	8003e18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e04:	f7fd fdcc 	bl	80019a0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d902      	bls.n	8003e18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	73fb      	strb	r3, [r7, #15]
          break;
 8003e16:	e005      	b.n	8003e24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e18:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0ef      	beq.n	8003e04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	4904      	ldr	r1, [pc, #16]	; (8003e44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06c      	beq.n	8003f34 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fb0c 	bl	800148c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	22ca      	movs	r2, #202	; 0xca
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2253      	movs	r2, #83	; 0x53
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f000 f925 	bl	80040dc <RTC_EnterInitMode>
 8003e92:	4603      	mov	r3, r0
 8003e94:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d14b      	bne.n	8003f34 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eae:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6899      	ldr	r1, [r3, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68d2      	ldr	r2, [r2, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6919      	ldr	r1, [r3, #16]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	041a      	lsls	r2, r3, #16
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f929 	bl	8004144 <RTC_ExitInitMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d11b      	bne.n	8003f34 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0203 	bic.w	r2, r2, #3
 8003f0a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69da      	ldr	r2, [r3, #28]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	60f8      	str	r0, [r7, #12]
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003f6c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	0a1b      	lsrs	r3, r3, #8
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	0d9b      	lsrs	r3, r3, #22
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d11a      	bne.n	8003fec <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 f900 	bl	80041c0 <RTC_Bcd2ToByte>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f8f7 	bl	80041c0 <RTC_Bcd2ToByte>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	789b      	ldrb	r3, [r3, #2]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f8ee 	bl	80041c0 <RTC_Bcd2ToByte>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800400c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004010:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	0b5b      	lsrs	r3, r3, #13
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	b2da      	uxtb	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d11a      	bne.n	8004086 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	78db      	ldrb	r3, [r3, #3]
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f8b3 	bl	80041c0 <RTC_Bcd2ToByte>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	785b      	ldrb	r3, [r3, #1]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f8aa 	bl	80041c0 <RTC_Bcd2ToByte>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	789b      	ldrb	r3, [r3, #2]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f8a1 	bl	80041c0 <RTC_Bcd2ToByte>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80040a8:	f7fd fc7a 	bl	80019a0 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040ae:	e009      	b.n	80040c4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040b0:	f7fd fc76 	bl	80019a0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040be:	d901      	bls.n	80040c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e007      	b.n	80040d4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d120      	bne.n	8004138 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004100:	f7fd fc4e 	bl	80019a0 <HAL_GetTick>
 8004104:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004106:	e00d      	b.n	8004124 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004108:	f7fd fc4a 	bl	80019a0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004116:	d905      	bls.n	8004124 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <RTC_EnterInitMode+0x5c>
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b03      	cmp	r3, #3
 8004136:	d1e7      	bne.n	8004108 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004150:	4b1a      	ldr	r3, [pc, #104]	; (80041bc <RTC_ExitInitMode+0x78>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a19      	ldr	r2, [pc, #100]	; (80041bc <RTC_ExitInitMode+0x78>)
 8004156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800415a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <RTC_ExitInitMode+0x78>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10c      	bne.n	8004182 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff91 	bl	8004090 <HAL_RTC_WaitForSynchro>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01e      	beq.n	80041b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2203      	movs	r2, #3
 8004178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	e017      	b.n	80041b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004182:	4b0e      	ldr	r3, [pc, #56]	; (80041bc <RTC_ExitInitMode+0x78>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	4a0d      	ldr	r2, [pc, #52]	; (80041bc <RTC_ExitInitMode+0x78>)
 8004188:	f023 0320 	bic.w	r3, r3, #32
 800418c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff7e 	bl	8004090 <HAL_RTC_WaitForSynchro>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2203      	movs	r2, #3
 800419e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <RTC_ExitInitMode+0x78>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a04      	ldr	r2, [pc, #16]	; (80041bc <RTC_ExitInitMode+0x78>)
 80041ac:	f043 0320 	orr.w	r3, r3, #32
 80041b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40002800 	.word	0x40002800

080041c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	091b      	lsrs	r3, r3, #4
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	0092      	lsls	r2, r2, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80041da:	79fb      	ldrb	r3, [r7, #7]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	4413      	add	r3, r2
 80041e6:	b2db      	uxtb	r3, r3
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e095      	b.n	8004332 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b00      	cmp	r3, #0
 800420c:	d108      	bne.n	8004220 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004216:	d009      	beq.n	800422c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
 800421e:	e005      	b.n	800422c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd f990 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004262:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800426c:	d902      	bls.n	8004274 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e002      	b.n	800427a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004278:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004282:	d007      	beq.n	8004294 <HAL_SPI_Init+0xa0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800428c:	d002      	beq.n	8004294 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d6:	ea42 0103 	orr.w	r1, r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	0c1b      	lsrs	r3, r3, #16
 80042f0:	f003 0204 	and.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004310:	ea42 0103 	orr.w	r1, r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b088      	sub	sp, #32
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_SPI_Transmit+0x22>
 8004358:	2302      	movs	r3, #2
 800435a:	e158      	b.n	800460e <HAL_SPI_Transmit+0x2d4>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004364:	f7fd fb1c 	bl	80019a0 <HAL_GetTick>
 8004368:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d002      	beq.n	8004380 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800437a:	2302      	movs	r3, #2
 800437c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437e:	e13d      	b.n	80045fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_SPI_Transmit+0x52>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004390:	e134      	b.n	80045fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2203      	movs	r2, #3
 8004396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	88fa      	ldrh	r2, [r7, #6]
 80043aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	88fa      	ldrh	r2, [r7, #6]
 80043b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043dc:	d10f      	bne.n	80043fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d007      	beq.n	800441c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004424:	d94b      	bls.n	80044be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Transmit+0xfa>
 800442e:	8afb      	ldrh	r3, [r7, #22]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d13e      	bne.n	80044b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004458:	e02b      	b.n	80044b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d112      	bne.n	800448e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	881a      	ldrh	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	1c9a      	adds	r2, r3, #2
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448c:	e011      	b.n	80044b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448e:	f7fd fa87 	bl	80019a0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d803      	bhi.n	80044a6 <HAL_SPI_Transmit+0x16c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d102      	bne.n	80044ac <HAL_SPI_Transmit+0x172>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044b0:	e0a4      	b.n	80045fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1ce      	bne.n	800445a <HAL_SPI_Transmit+0x120>
 80044bc:	e07c      	b.n	80045b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Transmit+0x192>
 80044c6:	8afb      	ldrh	r3, [r7, #22]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d170      	bne.n	80045ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d912      	bls.n	80044fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	1c9a      	adds	r2, r3, #2
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b02      	subs	r3, #2
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fa:	e058      	b.n	80045ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	330c      	adds	r3, #12
 8004506:	7812      	ldrb	r2, [r2, #0]
 8004508:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004522:	e044      	b.n	80045ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d12b      	bne.n	800458a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d912      	bls.n	8004562 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b02      	subs	r3, #2
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004560:	e025      	b.n	80045ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	7812      	ldrb	r2, [r2, #0]
 800456e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004588:	e011      	b.n	80045ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458a:	f7fd fa09 	bl	80019a0 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d803      	bhi.n	80045a2 <HAL_SPI_Transmit+0x268>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d102      	bne.n	80045a8 <HAL_SPI_Transmit+0x26e>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045ac:	e026      	b.n	80045fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1b5      	bne.n	8004524 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 f949 	bl	8004854 <SPI_EndRxTxTransaction>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10a      	bne.n	80045ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045d6:	2300      	movs	r3, #0
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]
 80045f8:	e000      	b.n	80045fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80045fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800460c:	7ffb      	ldrb	r3, [r7, #31]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3720      	adds	r7, #32
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004628:	f7fd f9ba 	bl	80019a0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	4413      	add	r3, r2
 8004636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004638:	f7fd f9b2 	bl	80019a0 <HAL_GetTick>
 800463c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	015b      	lsls	r3, r3, #5
 8004644:	0d1b      	lsrs	r3, r3, #20
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800464e:	e054      	b.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d050      	beq.n	80046fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004658:	f7fd f9a2 	bl	80019a0 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	429a      	cmp	r2, r3
 8004666:	d902      	bls.n	800466e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d13d      	bne.n	80046ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800467c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004686:	d111      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004690:	d004      	beq.n	800469c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469a:	d107      	bne.n	80046ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b4:	d10f      	bne.n	80046d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e017      	b.n	800471a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4013      	ands	r3, r2
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d19b      	bne.n	8004650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000000 	.word	0x20000000

08004728 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800473a:	f7fd f931 	bl	80019a0 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	1a9b      	subs	r3, r3, r2
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	4413      	add	r3, r2
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800474a:	f7fd f929 	bl	80019a0 <HAL_GetTick>
 800474e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004758:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	00da      	lsls	r2, r3, #3
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	0d1b      	lsrs	r3, r3, #20
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004770:	e060      	b.n	8004834 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004778:	d107      	bne.n	800478a <SPI_WaitFifoStateUntilTimeout+0x62>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004788:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004790:	d050      	beq.n	8004834 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004792:	f7fd f905 	bl	80019a0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	429a      	cmp	r2, r3
 80047a0:	d902      	bls.n	80047a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d13d      	bne.n	8004824 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047c0:	d111      	bne.n	80047e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ca:	d004      	beq.n	80047d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d107      	bne.n	80047e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	d10f      	bne.n	8004810 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800480e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e010      	b.n	8004846 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	3b01      	subs	r3, #1
 8004832:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	429a      	cmp	r2, r3
 8004842:	d196      	bne.n	8004772 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3728      	adds	r7, #40	; 0x28
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000000 	.word	0x20000000

08004854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af02      	add	r7, sp, #8
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f7ff ff5b 	bl	8004728 <SPI_WaitFifoStateUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d007      	beq.n	8004888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e027      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2200      	movs	r2, #0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fec0 	bl	8004618 <SPI_WaitFlagStateUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e014      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff34 	bl	8004728 <SPI_WaitFifoStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	f043 0220 	orr.w	r2, r3, #32
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e000      	b.n	80048d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	799b      	ldrb	r3, [r3, #6]
 80048f2:	08db      	lsrs	r3, r3, #3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	fb12 f303 	smulbb	r3, r2, r3
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	889b      	ldrh	r3, [r3, #4]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	885b      	ldrh	r3, [r3, #2]
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	461a      	mov	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	60da      	str	r2, [r3, #12]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3306      	adds	r3, #6
 8004938:	2208      	movs	r2, #8
 800493a:	4619      	mov	r1, r3
 800493c:	f000 fca6 	bl	800528c <memcpy>
    meta->width = font[FONTX_WIDTH];
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7b9a      	ldrb	r2, [r3, #14]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	7bda      	ldrb	r2, [r3, #15]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	7c1a      	ldrb	r2, [r3, #16]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	72da      	strb	r2, [r3, #11]

    return 0;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8004962:	b580      	push	{r7, lr}
 8004964:	b08e      	sub	sp, #56	; 0x38
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 800496e:	f107 0314 	add.w	r3, r7, #20
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ffd7 	bl	8004928 <fontx_meta>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8004980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <fontx_glyph+0x2c>
        return status;
 8004988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800498c:	e077      	b.n	8004a7e <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 800498e:	7f7a      	ldrb	r2, [r7, #29]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8004994:	7fba      	ldrb	r2, [r7, #30]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800499a:	7f7b      	ldrb	r3, [r7, #29]
 800499c:	3307      	adds	r3, #7
 800499e:	2b00      	cmp	r3, #0
 80049a0:	da00      	bge.n	80049a4 <fontx_glyph+0x42>
 80049a2:	3307      	adds	r3, #7
 80049a4:	10db      	asrs	r3, r3, #3
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	78da      	ldrb	r2, [r3, #3]
 80049b0:	7fbb      	ldrb	r3, [r7, #30]
 80049b2:	fb12 f303 	smulbb	r3, r2, r3
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80049bc:	7ffb      	ldrb	r3, [r7, #31]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10f      	bne.n	80049e2 <fontx_glyph+0x80>
        if (code < 0x100) {
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2bff      	cmp	r3, #255	; 0xff
 80049c6:	d859      	bhi.n	8004a7c <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	789b      	ldrb	r3, [r3, #2]
 80049cc:	461a      	mov	r2, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	3311      	adds	r3, #17
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	441a      	add	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e04d      	b.n	8004a7e <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3312      	adds	r3, #18
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	3311      	adds	r3, #17
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80049f4:	e03d      	b.n	8004a72 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	3301      	adds	r3, #1
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	4413      	add	r3, r2
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 8004a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	3303      	adds	r3, #3
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	021b      	lsls	r3, r3, #8
 8004a18:	4413      	add	r3, r2
 8004a1a:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d31c      	bcc.n	8004a5e <fontx_glyph+0xfc>
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d818      	bhi.n	8004a5e <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a34:	4413      	add	r3, r2
 8004a36:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3311      	adds	r3, #17
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	461a      	mov	r2, r3
                    nc * glyph->size
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	4619      	mov	r1, r3
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8004a4e:	4413      	add	r3, r2
 8004a50:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e00f      	b.n	8004a7e <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a66:	4413      	add	r3, r2
 8004a68:	3301      	adds	r3, #1
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	3304      	adds	r3, #4
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	1e5a      	subs	r2, r3, #1
 8004a76:	633a      	str	r2, [r7, #48]	; 0x30
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1bc      	bne.n	80049f6 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3738      	adds	r7, #56	; 0x38
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]
 8004a92:	460b      	mov	r3, r1
 8004a94:	80bb      	strh	r3, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 8004a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9e:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <hagl_put_pixel+0x60>)
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	db1a      	blt.n	8004adc <hagl_put_pixel+0x54>
 8004aa6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004aaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <hagl_put_pixel+0x60>)
 8004aac:	8852      	ldrh	r2, [r2, #2]
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	db14      	blt.n	8004adc <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab6:	4a0c      	ldr	r2, [pc, #48]	; (8004ae8 <hagl_put_pixel+0x60>)
 8004ab8:	8892      	ldrh	r2, [r2, #4]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	dc10      	bgt.n	8004ae0 <hagl_put_pixel+0x58>
 8004abe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ac2:	4a09      	ldr	r2, [pc, #36]	; (8004ae8 <hagl_put_pixel+0x60>)
 8004ac4:	88d2      	ldrh	r2, [r2, #6]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	dc0a      	bgt.n	8004ae0 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 8004aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ace:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ad2:	887a      	ldrh	r2, [r7, #2]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fc fa87 	bl	8000fe8 <lcd_put_pixel>
 8004ada:	e002      	b.n	8004ae2 <hagl_put_pixel+0x5a>
        return;
 8004adc:	bf00      	nop
 8004ade:	e000      	b.n	8004ae2 <hagl_put_pixel+0x5a>
        return;
 8004ae0:	bf00      	nop
}
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	2000000c 	.word	0x2000000c

08004aec <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004afa:	f844 0c24 	str.w	r0, [r4, #-36]
 8004afe:	460c      	mov	r4, r1
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b08:	4622      	mov	r2, r4
 8004b0a:	f823 2c26 	strh.w	r2, [r3, #-38]
 8004b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b12:	4602      	mov	r2, r0
 8004b14:	f823 2c28 	strh.w	r2, [r3, #-40]
 8004b18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8004b22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b26:	4619      	mov	r1, r3
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	f851 1c24 	ldr.w	r1, [r1, #-36]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ff13 	bl	8004962 <fontx_glyph>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004b42:	f102 0209 	add.w	r2, r2, #9
 8004b46:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 8004b48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004b4c:	f103 0309 	add.w	r3, r3, #9
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <hagl_put_char+0x6e>
        return 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e0c0      	b.n	8004cdc <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 8004b5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b5e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b68:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8004b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b70:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b7a:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8004b7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b82:	2210      	movs	r2, #16
 8004b84:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 8004b88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004b8c:	3a08      	subs	r2, #8
 8004b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b92:	3b18      	subs	r3, #24
 8004b94:	4611      	mov	r1, r2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fea2 	bl	80048e0 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 8004b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ba0:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8004ba4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004ba8:	f102 020c 	add.w	r2, r2, #12
 8004bac:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004bb4:	f102 020b 	add.w	r2, r2, #11
 8004bb8:	7013      	strb	r3, [r2, #0]
 8004bba:	e071      	b.n	8004ca0 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004bc2:	f102 020a 	add.w	r2, r2, #10
 8004bc6:	7013      	strb	r3, [r2, #0]
 8004bc8:	e047      	b.n	8004c5a <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8004bca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004bce:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b25a      	sxtb	r2, r3
 8004bd6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004bda:	f103 030a 	add.w	r3, r3, #10
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	fa41 f303 	asr.w	r3, r1, r3
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004bf4:	f102 0208 	add.w	r2, r2, #8
 8004bf8:	7013      	strb	r3, [r2, #0]
            if (set) {
 8004bfa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004bfe:	f103 0308 	add.w	r3, r3, #8
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <hagl_put_char+0x13e>
                *(ptr++) = color;
 8004c08:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c0c:	f103 030c 	add.w	r3, r3, #12
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	1c9a      	adds	r2, r3, #2
 8004c14:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004c18:	f101 010c 	add.w	r1, r1, #12
 8004c1c:	600a      	str	r2, [r1, #0]
 8004c1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c22:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8004c26:	801a      	strh	r2, [r3, #0]
 8004c28:	e00c      	b.n	8004c44 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8004c2a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c2e:	f103 030c 	add.w	r3, r3, #12
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8004c3a:	f101 010c 	add.w	r1, r1, #12
 8004c3e:	600a      	str	r2, [r1, #0]
 8004c40:	2200      	movs	r2, #0
 8004c42:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8004c44:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c48:	f103 030a 	add.w	r3, r3, #10
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c54:	f102 020a 	add.w	r2, r2, #10
 8004c58:	7013      	strb	r3, [r2, #0]
 8004c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c5e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8004c62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c66:	f102 020a 	add.w	r2, r2, #10
 8004c6a:	7812      	ldrb	r2, [r2, #0]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d3ac      	bcc.n	8004bca <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8004c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c74:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8004c78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c7c:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8004c80:	4413      	add	r3, r2
 8004c82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c86:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8004c8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8004c8e:	f103 030b 	add.w	r3, r3, #11
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004c9a:	f102 020b 	add.w	r2, r2, #11
 8004c9e:	7013      	strb	r3, [r2, #0]
 8004ca0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ca4:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8004ca8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8004cac:	f102 020b 	add.w	r2, r2, #11
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d382      	bcc.n	8004bbc <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8004cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cba:	3b18      	subs	r3, #24
 8004cbc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cc0:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8004cc4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004cc8:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f000 f85a 	bl	8004d86 <hagl_blit>

    return bitmap.width;
 8004cd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cd6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004cda:	b2db      	uxtb	r3, r3
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}

08004ce8 <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8004d02:	897b      	ldrh	r3, [r7, #10]
 8004d04:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fe0b 	bl	8004928 <fontx_meta>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8004d18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <hagl_put_text+0x3c>
        return 0;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e02c      	b.n	8004d7e <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	60fa      	str	r2, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	2b0d      	cmp	r3, #13
 8004d32:	d002      	beq.n	8004d3a <hagl_put_text+0x52>
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d108      	bne.n	8004d4c <hagl_put_text+0x64>
            x0 = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8004d3e:	7fbb      	ldrb	r3, [r7, #30]
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	893b      	ldrh	r3, [r7, #8]
 8004d44:	4413      	add	r3, r2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	813b      	strh	r3, [r7, #8]
 8004d4a:	e010      	b.n	8004d6e <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8004d4c:	88f8      	ldrh	r0, [r7, #6]
 8004d4e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d52:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	6a38      	ldr	r0, [r7, #32]
 8004d5e:	f7ff fec5 	bl	8004aec <hagl_put_char>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	897b      	ldrh	r3, [r7, #10]
 8004d68:	4413      	add	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1d6      	bne.n	8004d24 <hagl_put_text+0x3c>

    return x0 - original;
 8004d76:	897a      	ldrh	r2, [r7, #10]
 8004d78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	b29b      	uxth	r3, r3
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3728      	adds	r7, #40	; 0x28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b086      	sub	sp, #24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	603a      	str	r2, [r7, #0]
 8004d90:	80fb      	strh	r3, [r7, #6]
 8004d92:	460b      	mov	r3, r1
 8004d94:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	827b      	strh	r3, [r7, #18]
 8004da0:	e020      	b.n	8004de4 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	823b      	strh	r3, [r7, #16]
 8004da6:	e015      	b.n	8004dd4 <hagl_blit+0x4e>
            color = *(ptr++);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1c9a      	adds	r2, r3, #2
 8004dac:	617a      	str	r2, [r7, #20]
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	8a3b      	ldrh	r3, [r7, #16]
 8004db6:	4413      	add	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	b218      	sxth	r0, r3
 8004dbc:	88ba      	ldrh	r2, [r7, #4]
 8004dbe:	8a7b      	ldrh	r3, [r7, #18]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	b21b      	sxth	r3, r3
 8004dc6:	89fa      	ldrh	r2, [r7, #14]
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f7ff fe5d 	bl	8004a88 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8004dce:	8a3b      	ldrh	r3, [r7, #16]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	823b      	strh	r3, [r7, #16]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	8a3a      	ldrh	r2, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d3e4      	bcc.n	8004da8 <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8004dde:	8a7b      	ldrh	r3, [r7, #18]
 8004de0:	3301      	adds	r3, #1
 8004de2:	827b      	strh	r3, [r7, #18]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	885b      	ldrh	r3, [r3, #2]
 8004de8:	8a7a      	ldrh	r2, [r7, #18]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3d9      	bcc.n	8004da2 <hagl_blit+0x1c>
        }
    }
#endif
};
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000014 	.word	0x20000014

08004e04 <__sflush_r>:
 8004e04:	898a      	ldrh	r2, [r1, #12]
 8004e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	0710      	lsls	r0, r2, #28
 8004e0e:	460c      	mov	r4, r1
 8004e10:	d458      	bmi.n	8004ec4 <__sflush_r+0xc0>
 8004e12:	684b      	ldr	r3, [r1, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	dc05      	bgt.n	8004e24 <__sflush_r+0x20>
 8004e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	dc02      	bgt.n	8004e24 <__sflush_r+0x20>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	d0f9      	beq.n	8004e1e <__sflush_r+0x1a>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e30:	682f      	ldr	r7, [r5, #0]
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	d032      	beq.n	8004e9c <__sflush_r+0x98>
 8004e36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	075a      	lsls	r2, r3, #29
 8004e3c:	d505      	bpl.n	8004e4a <__sflush_r+0x46>
 8004e3e:	6863      	ldr	r3, [r4, #4]
 8004e40:	1ac0      	subs	r0, r0, r3
 8004e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e44:	b10b      	cbz	r3, 8004e4a <__sflush_r+0x46>
 8004e46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e48:	1ac0      	subs	r0, r0, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e50:	6a21      	ldr	r1, [r4, #32]
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b0      	blx	r6
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	d106      	bne.n	8004e6a <__sflush_r+0x66>
 8004e5c:	6829      	ldr	r1, [r5, #0]
 8004e5e:	291d      	cmp	r1, #29
 8004e60:	d82c      	bhi.n	8004ebc <__sflush_r+0xb8>
 8004e62:	4a2a      	ldr	r2, [pc, #168]	; (8004f0c <__sflush_r+0x108>)
 8004e64:	40ca      	lsrs	r2, r1
 8004e66:	07d6      	lsls	r6, r2, #31
 8004e68:	d528      	bpl.n	8004ebc <__sflush_r+0xb8>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	6062      	str	r2, [r4, #4]
 8004e6e:	04d9      	lsls	r1, r3, #19
 8004e70:	6922      	ldr	r2, [r4, #16]
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	d504      	bpl.n	8004e80 <__sflush_r+0x7c>
 8004e76:	1c42      	adds	r2, r0, #1
 8004e78:	d101      	bne.n	8004e7e <__sflush_r+0x7a>
 8004e7a:	682b      	ldr	r3, [r5, #0]
 8004e7c:	b903      	cbnz	r3, 8004e80 <__sflush_r+0x7c>
 8004e7e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e82:	602f      	str	r7, [r5, #0]
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d0ca      	beq.n	8004e1e <__sflush_r+0x1a>
 8004e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e8c:	4299      	cmp	r1, r3
 8004e8e:	d002      	beq.n	8004e96 <__sflush_r+0x92>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 fa11 	bl	80052b8 <_free_r>
 8004e96:	2000      	movs	r0, #0
 8004e98:	6360      	str	r0, [r4, #52]	; 0x34
 8004e9a:	e7c1      	b.n	8004e20 <__sflush_r+0x1c>
 8004e9c:	6a21      	ldr	r1, [r4, #32]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	47b0      	blx	r6
 8004ea4:	1c41      	adds	r1, r0, #1
 8004ea6:	d1c7      	bne.n	8004e38 <__sflush_r+0x34>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0c4      	beq.n	8004e38 <__sflush_r+0x34>
 8004eae:	2b1d      	cmp	r3, #29
 8004eb0:	d001      	beq.n	8004eb6 <__sflush_r+0xb2>
 8004eb2:	2b16      	cmp	r3, #22
 8004eb4:	d101      	bne.n	8004eba <__sflush_r+0xb6>
 8004eb6:	602f      	str	r7, [r5, #0]
 8004eb8:	e7b1      	b.n	8004e1e <__sflush_r+0x1a>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec0:	81a3      	strh	r3, [r4, #12]
 8004ec2:	e7ad      	b.n	8004e20 <__sflush_r+0x1c>
 8004ec4:	690f      	ldr	r7, [r1, #16]
 8004ec6:	2f00      	cmp	r7, #0
 8004ec8:	d0a9      	beq.n	8004e1e <__sflush_r+0x1a>
 8004eca:	0793      	lsls	r3, r2, #30
 8004ecc:	680e      	ldr	r6, [r1, #0]
 8004ece:	bf08      	it	eq
 8004ed0:	694b      	ldreq	r3, [r1, #20]
 8004ed2:	600f      	str	r7, [r1, #0]
 8004ed4:	bf18      	it	ne
 8004ed6:	2300      	movne	r3, #0
 8004ed8:	eba6 0807 	sub.w	r8, r6, r7
 8004edc:	608b      	str	r3, [r1, #8]
 8004ede:	f1b8 0f00 	cmp.w	r8, #0
 8004ee2:	dd9c      	ble.n	8004e1e <__sflush_r+0x1a>
 8004ee4:	6a21      	ldr	r1, [r4, #32]
 8004ee6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ee8:	4643      	mov	r3, r8
 8004eea:	463a      	mov	r2, r7
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b0      	blx	r6
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	dc06      	bgt.n	8004f02 <__sflush_r+0xfe>
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e78e      	b.n	8004e20 <__sflush_r+0x1c>
 8004f02:	4407      	add	r7, r0
 8004f04:	eba8 0800 	sub.w	r8, r8, r0
 8004f08:	e7e9      	b.n	8004ede <__sflush_r+0xda>
 8004f0a:	bf00      	nop
 8004f0c:	20400001 	.word	0x20400001

08004f10 <_fflush_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	690b      	ldr	r3, [r1, #16]
 8004f14:	4605      	mov	r5, r0
 8004f16:	460c      	mov	r4, r1
 8004f18:	b913      	cbnz	r3, 8004f20 <_fflush_r+0x10>
 8004f1a:	2500      	movs	r5, #0
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	b118      	cbz	r0, 8004f2a <_fflush_r+0x1a>
 8004f22:	6983      	ldr	r3, [r0, #24]
 8004f24:	b90b      	cbnz	r3, 8004f2a <_fflush_r+0x1a>
 8004f26:	f000 f887 	bl	8005038 <__sinit>
 8004f2a:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <_fflush_r+0x6c>)
 8004f2c:	429c      	cmp	r4, r3
 8004f2e:	d11b      	bne.n	8004f68 <_fflush_r+0x58>
 8004f30:	686c      	ldr	r4, [r5, #4]
 8004f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ef      	beq.n	8004f1a <_fflush_r+0xa>
 8004f3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f3c:	07d0      	lsls	r0, r2, #31
 8004f3e:	d404      	bmi.n	8004f4a <_fflush_r+0x3a>
 8004f40:	0599      	lsls	r1, r3, #22
 8004f42:	d402      	bmi.n	8004f4a <_fflush_r+0x3a>
 8004f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f46:	f000 f93a 	bl	80051be <__retarget_lock_acquire_recursive>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	f7ff ff59 	bl	8004e04 <__sflush_r>
 8004f52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f54:	07da      	lsls	r2, r3, #31
 8004f56:	4605      	mov	r5, r0
 8004f58:	d4e0      	bmi.n	8004f1c <_fflush_r+0xc>
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	059b      	lsls	r3, r3, #22
 8004f5e:	d4dd      	bmi.n	8004f1c <_fflush_r+0xc>
 8004f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f62:	f000 f92d 	bl	80051c0 <__retarget_lock_release_recursive>
 8004f66:	e7d9      	b.n	8004f1c <_fflush_r+0xc>
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <_fflush_r+0x70>)
 8004f6a:	429c      	cmp	r4, r3
 8004f6c:	d101      	bne.n	8004f72 <_fflush_r+0x62>
 8004f6e:	68ac      	ldr	r4, [r5, #8]
 8004f70:	e7df      	b.n	8004f32 <_fflush_r+0x22>
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <_fflush_r+0x74>)
 8004f74:	429c      	cmp	r4, r3
 8004f76:	bf08      	it	eq
 8004f78:	68ec      	ldreq	r4, [r5, #12]
 8004f7a:	e7da      	b.n	8004f32 <_fflush_r+0x22>
 8004f7c:	0800b428 	.word	0x0800b428
 8004f80:	0800b448 	.word	0x0800b448
 8004f84:	0800b408 	.word	0x0800b408

08004f88 <std>:
 8004f88:	2300      	movs	r3, #0
 8004f8a:	b510      	push	{r4, lr}
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f96:	6083      	str	r3, [r0, #8]
 8004f98:	8181      	strh	r1, [r0, #12]
 8004f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f9c:	81c2      	strh	r2, [r0, #14]
 8004f9e:	6183      	str	r3, [r0, #24]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	305c      	adds	r0, #92	; 0x5c
 8004fa6:	f000 f97f 	bl	80052a8 <memset>
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <std+0x38>)
 8004fac:	6263      	str	r3, [r4, #36]	; 0x24
 8004fae:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <std+0x3c>)
 8004fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <std+0x40>)
 8004fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <std+0x44>)
 8004fb8:	6224      	str	r4, [r4, #32]
 8004fba:	6323      	str	r3, [r4, #48]	; 0x30
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	bf00      	nop
 8004fc0:	08005499 	.word	0x08005499
 8004fc4:	080054bb 	.word	0x080054bb
 8004fc8:	080054f3 	.word	0x080054f3
 8004fcc:	08005517 	.word	0x08005517

08004fd0 <_cleanup_r>:
 8004fd0:	4901      	ldr	r1, [pc, #4]	; (8004fd8 <_cleanup_r+0x8>)
 8004fd2:	f000 b8af 	b.w	8005134 <_fwalk_reent>
 8004fd6:	bf00      	nop
 8004fd8:	08004f11 	.word	0x08004f11

08004fdc <__sfmoreglue>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	2268      	movs	r2, #104	; 0x68
 8004fe0:	1e4d      	subs	r5, r1, #1
 8004fe2:	4355      	muls	r5, r2
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fea:	f000 f9d1 	bl	8005390 <_malloc_r>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	b140      	cbz	r0, 8005004 <__sfmoreglue+0x28>
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ff8:	300c      	adds	r0, #12
 8004ffa:	60a0      	str	r0, [r4, #8]
 8004ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005000:	f000 f952 	bl	80052a8 <memset>
 8005004:	4620      	mov	r0, r4
 8005006:	bd70      	pop	{r4, r5, r6, pc}

08005008 <__sfp_lock_acquire>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__sfp_lock_acquire+0x8>)
 800500a:	f000 b8d8 	b.w	80051be <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	2000a2e5 	.word	0x2000a2e5

08005014 <__sfp_lock_release>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__sfp_lock_release+0x8>)
 8005016:	f000 b8d3 	b.w	80051c0 <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	2000a2e5 	.word	0x2000a2e5

08005020 <__sinit_lock_acquire>:
 8005020:	4801      	ldr	r0, [pc, #4]	; (8005028 <__sinit_lock_acquire+0x8>)
 8005022:	f000 b8cc 	b.w	80051be <__retarget_lock_acquire_recursive>
 8005026:	bf00      	nop
 8005028:	2000a2e6 	.word	0x2000a2e6

0800502c <__sinit_lock_release>:
 800502c:	4801      	ldr	r0, [pc, #4]	; (8005034 <__sinit_lock_release+0x8>)
 800502e:	f000 b8c7 	b.w	80051c0 <__retarget_lock_release_recursive>
 8005032:	bf00      	nop
 8005034:	2000a2e6 	.word	0x2000a2e6

08005038 <__sinit>:
 8005038:	b510      	push	{r4, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	f7ff fff0 	bl	8005020 <__sinit_lock_acquire>
 8005040:	69a3      	ldr	r3, [r4, #24]
 8005042:	b11b      	cbz	r3, 800504c <__sinit+0x14>
 8005044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005048:	f7ff bff0 	b.w	800502c <__sinit_lock_release>
 800504c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005050:	6523      	str	r3, [r4, #80]	; 0x50
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <__sinit+0x68>)
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <__sinit+0x6c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	62a2      	str	r2, [r4, #40]	; 0x28
 800505a:	42a3      	cmp	r3, r4
 800505c:	bf04      	itt	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	61a3      	streq	r3, [r4, #24]
 8005062:	4620      	mov	r0, r4
 8005064:	f000 f820 	bl	80050a8 <__sfp>
 8005068:	6060      	str	r0, [r4, #4]
 800506a:	4620      	mov	r0, r4
 800506c:	f000 f81c 	bl	80050a8 <__sfp>
 8005070:	60a0      	str	r0, [r4, #8]
 8005072:	4620      	mov	r0, r4
 8005074:	f000 f818 	bl	80050a8 <__sfp>
 8005078:	2200      	movs	r2, #0
 800507a:	60e0      	str	r0, [r4, #12]
 800507c:	2104      	movs	r1, #4
 800507e:	6860      	ldr	r0, [r4, #4]
 8005080:	f7ff ff82 	bl	8004f88 <std>
 8005084:	68a0      	ldr	r0, [r4, #8]
 8005086:	2201      	movs	r2, #1
 8005088:	2109      	movs	r1, #9
 800508a:	f7ff ff7d 	bl	8004f88 <std>
 800508e:	68e0      	ldr	r0, [r4, #12]
 8005090:	2202      	movs	r2, #2
 8005092:	2112      	movs	r1, #18
 8005094:	f7ff ff78 	bl	8004f88 <std>
 8005098:	2301      	movs	r3, #1
 800509a:	61a3      	str	r3, [r4, #24]
 800509c:	e7d2      	b.n	8005044 <__sinit+0xc>
 800509e:	bf00      	nop
 80050a0:	0800b468 	.word	0x0800b468
 80050a4:	08004fd1 	.word	0x08004fd1

080050a8 <__sfp>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	4607      	mov	r7, r0
 80050ac:	f7ff ffac 	bl	8005008 <__sfp_lock_acquire>
 80050b0:	4b1e      	ldr	r3, [pc, #120]	; (800512c <__sfp+0x84>)
 80050b2:	681e      	ldr	r6, [r3, #0]
 80050b4:	69b3      	ldr	r3, [r6, #24]
 80050b6:	b913      	cbnz	r3, 80050be <__sfp+0x16>
 80050b8:	4630      	mov	r0, r6
 80050ba:	f7ff ffbd 	bl	8005038 <__sinit>
 80050be:	3648      	adds	r6, #72	; 0x48
 80050c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	d503      	bpl.n	80050d0 <__sfp+0x28>
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	b30b      	cbz	r3, 8005110 <__sfp+0x68>
 80050cc:	6836      	ldr	r6, [r6, #0]
 80050ce:	e7f7      	b.n	80050c0 <__sfp+0x18>
 80050d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050d4:	b9d5      	cbnz	r5, 800510c <__sfp+0x64>
 80050d6:	4b16      	ldr	r3, [pc, #88]	; (8005130 <__sfp+0x88>)
 80050d8:	60e3      	str	r3, [r4, #12]
 80050da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050de:	6665      	str	r5, [r4, #100]	; 0x64
 80050e0:	f000 f86c 	bl	80051bc <__retarget_lock_init_recursive>
 80050e4:	f7ff ff96 	bl	8005014 <__sfp_lock_release>
 80050e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050f0:	6025      	str	r5, [r4, #0]
 80050f2:	61a5      	str	r5, [r4, #24]
 80050f4:	2208      	movs	r2, #8
 80050f6:	4629      	mov	r1, r5
 80050f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050fc:	f000 f8d4 	bl	80052a8 <memset>
 8005100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005108:	4620      	mov	r0, r4
 800510a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800510c:	3468      	adds	r4, #104	; 0x68
 800510e:	e7d9      	b.n	80050c4 <__sfp+0x1c>
 8005110:	2104      	movs	r1, #4
 8005112:	4638      	mov	r0, r7
 8005114:	f7ff ff62 	bl	8004fdc <__sfmoreglue>
 8005118:	4604      	mov	r4, r0
 800511a:	6030      	str	r0, [r6, #0]
 800511c:	2800      	cmp	r0, #0
 800511e:	d1d5      	bne.n	80050cc <__sfp+0x24>
 8005120:	f7ff ff78 	bl	8005014 <__sfp_lock_release>
 8005124:	230c      	movs	r3, #12
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	e7ee      	b.n	8005108 <__sfp+0x60>
 800512a:	bf00      	nop
 800512c:	0800b468 	.word	0x0800b468
 8005130:	ffff0001 	.word	0xffff0001

08005134 <_fwalk_reent>:
 8005134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005138:	4606      	mov	r6, r0
 800513a:	4688      	mov	r8, r1
 800513c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005140:	2700      	movs	r7, #0
 8005142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005146:	f1b9 0901 	subs.w	r9, r9, #1
 800514a:	d505      	bpl.n	8005158 <_fwalk_reent+0x24>
 800514c:	6824      	ldr	r4, [r4, #0]
 800514e:	2c00      	cmp	r4, #0
 8005150:	d1f7      	bne.n	8005142 <_fwalk_reent+0xe>
 8005152:	4638      	mov	r0, r7
 8005154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005158:	89ab      	ldrh	r3, [r5, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d907      	bls.n	800516e <_fwalk_reent+0x3a>
 800515e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005162:	3301      	adds	r3, #1
 8005164:	d003      	beq.n	800516e <_fwalk_reent+0x3a>
 8005166:	4629      	mov	r1, r5
 8005168:	4630      	mov	r0, r6
 800516a:	47c0      	blx	r8
 800516c:	4307      	orrs	r7, r0
 800516e:	3568      	adds	r5, #104	; 0x68
 8005170:	e7e9      	b.n	8005146 <_fwalk_reent+0x12>
	...

08005174 <__libc_init_array>:
 8005174:	b570      	push	{r4, r5, r6, lr}
 8005176:	4d0d      	ldr	r5, [pc, #52]	; (80051ac <__libc_init_array+0x38>)
 8005178:	4c0d      	ldr	r4, [pc, #52]	; (80051b0 <__libc_init_array+0x3c>)
 800517a:	1b64      	subs	r4, r4, r5
 800517c:	10a4      	asrs	r4, r4, #2
 800517e:	2600      	movs	r6, #0
 8005180:	42a6      	cmp	r6, r4
 8005182:	d109      	bne.n	8005198 <__libc_init_array+0x24>
 8005184:	4d0b      	ldr	r5, [pc, #44]	; (80051b4 <__libc_init_array+0x40>)
 8005186:	4c0c      	ldr	r4, [pc, #48]	; (80051b8 <__libc_init_array+0x44>)
 8005188:	f002 ffd2 	bl	8008130 <_init>
 800518c:	1b64      	subs	r4, r4, r5
 800518e:	10a4      	asrs	r4, r4, #2
 8005190:	2600      	movs	r6, #0
 8005192:	42a6      	cmp	r6, r4
 8005194:	d105      	bne.n	80051a2 <__libc_init_array+0x2e>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	f855 3b04 	ldr.w	r3, [r5], #4
 800519c:	4798      	blx	r3
 800519e:	3601      	adds	r6, #1
 80051a0:	e7ee      	b.n	8005180 <__libc_init_array+0xc>
 80051a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a6:	4798      	blx	r3
 80051a8:	3601      	adds	r6, #1
 80051aa:	e7f2      	b.n	8005192 <__libc_init_array+0x1e>
 80051ac:	0800b97c 	.word	0x0800b97c
 80051b0:	0800b97c 	.word	0x0800b97c
 80051b4:	0800b97c 	.word	0x0800b97c
 80051b8:	0800b980 	.word	0x0800b980

080051bc <__retarget_lock_init_recursive>:
 80051bc:	4770      	bx	lr

080051be <__retarget_lock_acquire_recursive>:
 80051be:	4770      	bx	lr

080051c0 <__retarget_lock_release_recursive>:
 80051c0:	4770      	bx	lr

080051c2 <__swhatbuf_r>:
 80051c2:	b570      	push	{r4, r5, r6, lr}
 80051c4:	460e      	mov	r6, r1
 80051c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ca:	2900      	cmp	r1, #0
 80051cc:	b096      	sub	sp, #88	; 0x58
 80051ce:	4614      	mov	r4, r2
 80051d0:	461d      	mov	r5, r3
 80051d2:	da08      	bge.n	80051e6 <__swhatbuf_r+0x24>
 80051d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	602a      	str	r2, [r5, #0]
 80051dc:	061a      	lsls	r2, r3, #24
 80051de:	d410      	bmi.n	8005202 <__swhatbuf_r+0x40>
 80051e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051e4:	e00e      	b.n	8005204 <__swhatbuf_r+0x42>
 80051e6:	466a      	mov	r2, sp
 80051e8:	f000 f9f0 	bl	80055cc <_fstat_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	dbf1      	blt.n	80051d4 <__swhatbuf_r+0x12>
 80051f0:	9a01      	ldr	r2, [sp, #4]
 80051f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80051fa:	425a      	negs	r2, r3
 80051fc:	415a      	adcs	r2, r3
 80051fe:	602a      	str	r2, [r5, #0]
 8005200:	e7ee      	b.n	80051e0 <__swhatbuf_r+0x1e>
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	2000      	movs	r0, #0
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	b016      	add	sp, #88	; 0x58
 800520a:	bd70      	pop	{r4, r5, r6, pc}

0800520c <__smakebuf_r>:
 800520c:	898b      	ldrh	r3, [r1, #12]
 800520e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005210:	079d      	lsls	r5, r3, #30
 8005212:	4606      	mov	r6, r0
 8005214:	460c      	mov	r4, r1
 8005216:	d507      	bpl.n	8005228 <__smakebuf_r+0x1c>
 8005218:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800521c:	6023      	str	r3, [r4, #0]
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	2301      	movs	r3, #1
 8005222:	6163      	str	r3, [r4, #20]
 8005224:	b002      	add	sp, #8
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	ab01      	add	r3, sp, #4
 800522a:	466a      	mov	r2, sp
 800522c:	f7ff ffc9 	bl	80051c2 <__swhatbuf_r>
 8005230:	9900      	ldr	r1, [sp, #0]
 8005232:	4605      	mov	r5, r0
 8005234:	4630      	mov	r0, r6
 8005236:	f000 f8ab 	bl	8005390 <_malloc_r>
 800523a:	b948      	cbnz	r0, 8005250 <__smakebuf_r+0x44>
 800523c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005240:	059a      	lsls	r2, r3, #22
 8005242:	d4ef      	bmi.n	8005224 <__smakebuf_r+0x18>
 8005244:	f023 0303 	bic.w	r3, r3, #3
 8005248:	f043 0302 	orr.w	r3, r3, #2
 800524c:	81a3      	strh	r3, [r4, #12]
 800524e:	e7e3      	b.n	8005218 <__smakebuf_r+0xc>
 8005250:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <__smakebuf_r+0x7c>)
 8005252:	62b3      	str	r3, [r6, #40]	; 0x28
 8005254:	89a3      	ldrh	r3, [r4, #12]
 8005256:	6020      	str	r0, [r4, #0]
 8005258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	9b00      	ldr	r3, [sp, #0]
 8005260:	6163      	str	r3, [r4, #20]
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	6120      	str	r0, [r4, #16]
 8005266:	b15b      	cbz	r3, 8005280 <__smakebuf_r+0x74>
 8005268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800526c:	4630      	mov	r0, r6
 800526e:	f000 f9bf 	bl	80055f0 <_isatty_r>
 8005272:	b128      	cbz	r0, 8005280 <__smakebuf_r+0x74>
 8005274:	89a3      	ldrh	r3, [r4, #12]
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	f043 0301 	orr.w	r3, r3, #1
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	89a0      	ldrh	r0, [r4, #12]
 8005282:	4305      	orrs	r5, r0
 8005284:	81a5      	strh	r5, [r4, #12]
 8005286:	e7cd      	b.n	8005224 <__smakebuf_r+0x18>
 8005288:	08004fd1 	.word	0x08004fd1

0800528c <memcpy>:
 800528c:	440a      	add	r2, r1
 800528e:	4291      	cmp	r1, r2
 8005290:	f100 33ff 	add.w	r3, r0, #4294967295
 8005294:	d100      	bne.n	8005298 <memcpy+0xc>
 8005296:	4770      	bx	lr
 8005298:	b510      	push	{r4, lr}
 800529a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800529e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a2:	4291      	cmp	r1, r2
 80052a4:	d1f9      	bne.n	800529a <memcpy+0xe>
 80052a6:	bd10      	pop	{r4, pc}

080052a8 <memset>:
 80052a8:	4402      	add	r2, r0
 80052aa:	4603      	mov	r3, r0
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d100      	bne.n	80052b2 <memset+0xa>
 80052b0:	4770      	bx	lr
 80052b2:	f803 1b01 	strb.w	r1, [r3], #1
 80052b6:	e7f9      	b.n	80052ac <memset+0x4>

080052b8 <_free_r>:
 80052b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ba:	2900      	cmp	r1, #0
 80052bc:	d044      	beq.n	8005348 <_free_r+0x90>
 80052be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f1a1 0404 	sub.w	r4, r1, #4
 80052ca:	bfb8      	it	lt
 80052cc:	18e4      	addlt	r4, r4, r3
 80052ce:	f000 f9b1 	bl	8005634 <__malloc_lock>
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <_free_r+0x94>)
 80052d4:	9801      	ldr	r0, [sp, #4]
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	b933      	cbnz	r3, 80052e8 <_free_r+0x30>
 80052da:	6063      	str	r3, [r4, #4]
 80052dc:	6014      	str	r4, [r2, #0]
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052e4:	f000 b9ac 	b.w	8005640 <__malloc_unlock>
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d908      	bls.n	80052fe <_free_r+0x46>
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	428b      	cmp	r3, r1
 80052f2:	bf01      	itttt	eq
 80052f4:	6819      	ldreq	r1, [r3, #0]
 80052f6:	685b      	ldreq	r3, [r3, #4]
 80052f8:	1949      	addeq	r1, r1, r5
 80052fa:	6021      	streq	r1, [r4, #0]
 80052fc:	e7ed      	b.n	80052da <_free_r+0x22>
 80052fe:	461a      	mov	r2, r3
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b10b      	cbz	r3, 8005308 <_free_r+0x50>
 8005304:	42a3      	cmp	r3, r4
 8005306:	d9fa      	bls.n	80052fe <_free_r+0x46>
 8005308:	6811      	ldr	r1, [r2, #0]
 800530a:	1855      	adds	r5, r2, r1
 800530c:	42a5      	cmp	r5, r4
 800530e:	d10b      	bne.n	8005328 <_free_r+0x70>
 8005310:	6824      	ldr	r4, [r4, #0]
 8005312:	4421      	add	r1, r4
 8005314:	1854      	adds	r4, r2, r1
 8005316:	42a3      	cmp	r3, r4
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	d1e0      	bne.n	80052de <_free_r+0x26>
 800531c:	681c      	ldr	r4, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	6053      	str	r3, [r2, #4]
 8005322:	4421      	add	r1, r4
 8005324:	6011      	str	r1, [r2, #0]
 8005326:	e7da      	b.n	80052de <_free_r+0x26>
 8005328:	d902      	bls.n	8005330 <_free_r+0x78>
 800532a:	230c      	movs	r3, #12
 800532c:	6003      	str	r3, [r0, #0]
 800532e:	e7d6      	b.n	80052de <_free_r+0x26>
 8005330:	6825      	ldr	r5, [r4, #0]
 8005332:	1961      	adds	r1, r4, r5
 8005334:	428b      	cmp	r3, r1
 8005336:	bf04      	itt	eq
 8005338:	6819      	ldreq	r1, [r3, #0]
 800533a:	685b      	ldreq	r3, [r3, #4]
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	bf04      	itt	eq
 8005340:	1949      	addeq	r1, r1, r5
 8005342:	6021      	streq	r1, [r4, #0]
 8005344:	6054      	str	r4, [r2, #4]
 8005346:	e7ca      	b.n	80052de <_free_r+0x26>
 8005348:	b003      	add	sp, #12
 800534a:	bd30      	pop	{r4, r5, pc}
 800534c:	2000a2e8 	.word	0x2000a2e8

08005350 <sbrk_aligned>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	4e0e      	ldr	r6, [pc, #56]	; (800538c <sbrk_aligned+0x3c>)
 8005354:	460c      	mov	r4, r1
 8005356:	6831      	ldr	r1, [r6, #0]
 8005358:	4605      	mov	r5, r0
 800535a:	b911      	cbnz	r1, 8005362 <sbrk_aligned+0x12>
 800535c:	f000 f88c 	bl	8005478 <_sbrk_r>
 8005360:	6030      	str	r0, [r6, #0]
 8005362:	4621      	mov	r1, r4
 8005364:	4628      	mov	r0, r5
 8005366:	f000 f887 	bl	8005478 <_sbrk_r>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	d00a      	beq.n	8005384 <sbrk_aligned+0x34>
 800536e:	1cc4      	adds	r4, r0, #3
 8005370:	f024 0403 	bic.w	r4, r4, #3
 8005374:	42a0      	cmp	r0, r4
 8005376:	d007      	beq.n	8005388 <sbrk_aligned+0x38>
 8005378:	1a21      	subs	r1, r4, r0
 800537a:	4628      	mov	r0, r5
 800537c:	f000 f87c 	bl	8005478 <_sbrk_r>
 8005380:	3001      	adds	r0, #1
 8005382:	d101      	bne.n	8005388 <sbrk_aligned+0x38>
 8005384:	f04f 34ff 	mov.w	r4, #4294967295
 8005388:	4620      	mov	r0, r4
 800538a:	bd70      	pop	{r4, r5, r6, pc}
 800538c:	2000a2ec 	.word	0x2000a2ec

08005390 <_malloc_r>:
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	1ccd      	adds	r5, r1, #3
 8005396:	f025 0503 	bic.w	r5, r5, #3
 800539a:	3508      	adds	r5, #8
 800539c:	2d0c      	cmp	r5, #12
 800539e:	bf38      	it	cc
 80053a0:	250c      	movcc	r5, #12
 80053a2:	2d00      	cmp	r5, #0
 80053a4:	4607      	mov	r7, r0
 80053a6:	db01      	blt.n	80053ac <_malloc_r+0x1c>
 80053a8:	42a9      	cmp	r1, r5
 80053aa:	d905      	bls.n	80053b8 <_malloc_r+0x28>
 80053ac:	230c      	movs	r3, #12
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	2600      	movs	r6, #0
 80053b2:	4630      	mov	r0, r6
 80053b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b8:	4e2e      	ldr	r6, [pc, #184]	; (8005474 <_malloc_r+0xe4>)
 80053ba:	f000 f93b 	bl	8005634 <__malloc_lock>
 80053be:	6833      	ldr	r3, [r6, #0]
 80053c0:	461c      	mov	r4, r3
 80053c2:	bb34      	cbnz	r4, 8005412 <_malloc_r+0x82>
 80053c4:	4629      	mov	r1, r5
 80053c6:	4638      	mov	r0, r7
 80053c8:	f7ff ffc2 	bl	8005350 <sbrk_aligned>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	4604      	mov	r4, r0
 80053d0:	d14d      	bne.n	800546e <_malloc_r+0xde>
 80053d2:	6834      	ldr	r4, [r6, #0]
 80053d4:	4626      	mov	r6, r4
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d140      	bne.n	800545c <_malloc_r+0xcc>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	4631      	mov	r1, r6
 80053de:	4638      	mov	r0, r7
 80053e0:	eb04 0803 	add.w	r8, r4, r3
 80053e4:	f000 f848 	bl	8005478 <_sbrk_r>
 80053e8:	4580      	cmp	r8, r0
 80053ea:	d13a      	bne.n	8005462 <_malloc_r+0xd2>
 80053ec:	6821      	ldr	r1, [r4, #0]
 80053ee:	3503      	adds	r5, #3
 80053f0:	1a6d      	subs	r5, r5, r1
 80053f2:	f025 0503 	bic.w	r5, r5, #3
 80053f6:	3508      	adds	r5, #8
 80053f8:	2d0c      	cmp	r5, #12
 80053fa:	bf38      	it	cc
 80053fc:	250c      	movcc	r5, #12
 80053fe:	4629      	mov	r1, r5
 8005400:	4638      	mov	r0, r7
 8005402:	f7ff ffa5 	bl	8005350 <sbrk_aligned>
 8005406:	3001      	adds	r0, #1
 8005408:	d02b      	beq.n	8005462 <_malloc_r+0xd2>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	442b      	add	r3, r5
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	e00e      	b.n	8005430 <_malloc_r+0xa0>
 8005412:	6822      	ldr	r2, [r4, #0]
 8005414:	1b52      	subs	r2, r2, r5
 8005416:	d41e      	bmi.n	8005456 <_malloc_r+0xc6>
 8005418:	2a0b      	cmp	r2, #11
 800541a:	d916      	bls.n	800544a <_malloc_r+0xba>
 800541c:	1961      	adds	r1, r4, r5
 800541e:	42a3      	cmp	r3, r4
 8005420:	6025      	str	r5, [r4, #0]
 8005422:	bf18      	it	ne
 8005424:	6059      	strne	r1, [r3, #4]
 8005426:	6863      	ldr	r3, [r4, #4]
 8005428:	bf08      	it	eq
 800542a:	6031      	streq	r1, [r6, #0]
 800542c:	5162      	str	r2, [r4, r5]
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	4638      	mov	r0, r7
 8005432:	f104 060b 	add.w	r6, r4, #11
 8005436:	f000 f903 	bl	8005640 <__malloc_unlock>
 800543a:	f026 0607 	bic.w	r6, r6, #7
 800543e:	1d23      	adds	r3, r4, #4
 8005440:	1af2      	subs	r2, r6, r3
 8005442:	d0b6      	beq.n	80053b2 <_malloc_r+0x22>
 8005444:	1b9b      	subs	r3, r3, r6
 8005446:	50a3      	str	r3, [r4, r2]
 8005448:	e7b3      	b.n	80053b2 <_malloc_r+0x22>
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	42a3      	cmp	r3, r4
 800544e:	bf0c      	ite	eq
 8005450:	6032      	streq	r2, [r6, #0]
 8005452:	605a      	strne	r2, [r3, #4]
 8005454:	e7ec      	b.n	8005430 <_malloc_r+0xa0>
 8005456:	4623      	mov	r3, r4
 8005458:	6864      	ldr	r4, [r4, #4]
 800545a:	e7b2      	b.n	80053c2 <_malloc_r+0x32>
 800545c:	4634      	mov	r4, r6
 800545e:	6876      	ldr	r6, [r6, #4]
 8005460:	e7b9      	b.n	80053d6 <_malloc_r+0x46>
 8005462:	230c      	movs	r3, #12
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4638      	mov	r0, r7
 8005468:	f000 f8ea 	bl	8005640 <__malloc_unlock>
 800546c:	e7a1      	b.n	80053b2 <_malloc_r+0x22>
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	e7de      	b.n	8005430 <_malloc_r+0xa0>
 8005472:	bf00      	nop
 8005474:	2000a2e8 	.word	0x2000a2e8

08005478 <_sbrk_r>:
 8005478:	b538      	push	{r3, r4, r5, lr}
 800547a:	4d06      	ldr	r5, [pc, #24]	; (8005494 <_sbrk_r+0x1c>)
 800547c:	2300      	movs	r3, #0
 800547e:	4604      	mov	r4, r0
 8005480:	4608      	mov	r0, r1
 8005482:	602b      	str	r3, [r5, #0]
 8005484:	f7fc f9b2 	bl	80017ec <_sbrk>
 8005488:	1c43      	adds	r3, r0, #1
 800548a:	d102      	bne.n	8005492 <_sbrk_r+0x1a>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	b103      	cbz	r3, 8005492 <_sbrk_r+0x1a>
 8005490:	6023      	str	r3, [r4, #0]
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	2000a2f0 	.word	0x2000a2f0

08005498 <__sread>:
 8005498:	b510      	push	{r4, lr}
 800549a:	460c      	mov	r4, r1
 800549c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a0:	f000 f8d4 	bl	800564c <_read_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	bfab      	itete	ge
 80054a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054aa:	89a3      	ldrhlt	r3, [r4, #12]
 80054ac:	181b      	addge	r3, r3, r0
 80054ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054b2:	bfac      	ite	ge
 80054b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054b6:	81a3      	strhlt	r3, [r4, #12]
 80054b8:	bd10      	pop	{r4, pc}

080054ba <__swrite>:
 80054ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054be:	461f      	mov	r7, r3
 80054c0:	898b      	ldrh	r3, [r1, #12]
 80054c2:	05db      	lsls	r3, r3, #23
 80054c4:	4605      	mov	r5, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	4616      	mov	r6, r2
 80054ca:	d505      	bpl.n	80054d8 <__swrite+0x1e>
 80054cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d0:	2302      	movs	r3, #2
 80054d2:	2200      	movs	r2, #0
 80054d4:	f000 f89c 	bl	8005610 <_lseek_r>
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	4632      	mov	r2, r6
 80054e6:	463b      	mov	r3, r7
 80054e8:	4628      	mov	r0, r5
 80054ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054ee:	f000 b84b 	b.w	8005588 <_write_r>

080054f2 <__sseek>:
 80054f2:	b510      	push	{r4, lr}
 80054f4:	460c      	mov	r4, r1
 80054f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054fa:	f000 f889 	bl	8005610 <_lseek_r>
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	bf15      	itete	ne
 8005504:	6560      	strne	r0, [r4, #84]	; 0x54
 8005506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800550a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800550e:	81a3      	strheq	r3, [r4, #12]
 8005510:	bf18      	it	ne
 8005512:	81a3      	strhne	r3, [r4, #12]
 8005514:	bd10      	pop	{r4, pc}

08005516 <__sclose>:
 8005516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800551a:	f000 b847 	b.w	80055ac <_close_r>
	...

08005520 <swprintf>:
 8005520:	b40c      	push	{r2, r3}
 8005522:	b530      	push	{r4, r5, lr}
 8005524:	4b17      	ldr	r3, [pc, #92]	; (8005584 <swprintf+0x64>)
 8005526:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800552a:	681d      	ldr	r5, [r3, #0]
 800552c:	b09d      	sub	sp, #116	; 0x74
 800552e:	460c      	mov	r4, r1
 8005530:	d308      	bcc.n	8005544 <swprintf+0x24>
 8005532:	238b      	movs	r3, #139	; 0x8b
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	b01d      	add	sp, #116	; 0x74
 800553c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005540:	b002      	add	sp, #8
 8005542:	4770      	bx	lr
 8005544:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005548:	f8ad 3014 	strh.w	r3, [sp, #20]
 800554c:	9002      	str	r0, [sp, #8]
 800554e:	9006      	str	r0, [sp, #24]
 8005550:	b1b1      	cbz	r1, 8005580 <swprintf+0x60>
 8005552:	1e4b      	subs	r3, r1, #1
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800555e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005562:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005564:	ab21      	add	r3, sp, #132	; 0x84
 8005566:	a902      	add	r1, sp, #8
 8005568:	4628      	mov	r0, r5
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f000 f8f0 	bl	8005750 <_svfwprintf_r>
 8005570:	2c00      	cmp	r4, #0
 8005572:	d0de      	beq.n	8005532 <swprintf+0x12>
 8005574:	9b02      	ldr	r3, [sp, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	42a0      	cmp	r0, r4
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	d3dd      	bcc.n	800553a <swprintf+0x1a>
 800557e:	e7d8      	b.n	8005532 <swprintf+0x12>
 8005580:	460b      	mov	r3, r1
 8005582:	e7e8      	b.n	8005556 <swprintf+0x36>
 8005584:	20000014 	.word	0x20000014

08005588 <_write_r>:
 8005588:	b538      	push	{r3, r4, r5, lr}
 800558a:	4d07      	ldr	r5, [pc, #28]	; (80055a8 <_write_r+0x20>)
 800558c:	4604      	mov	r4, r0
 800558e:	4608      	mov	r0, r1
 8005590:	4611      	mov	r1, r2
 8005592:	2200      	movs	r2, #0
 8005594:	602a      	str	r2, [r5, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	f7fc f8d7 	bl	800174a <_write>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_write_r+0x1e>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_write_r+0x1e>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	2000a2f0 	.word	0x2000a2f0

080055ac <_close_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	; (80055c8 <_close_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fc f8e3 	bl	8001782 <_close>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_close_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_close_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	2000a2f0 	.word	0x2000a2f0

080055cc <_fstat_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d07      	ldr	r5, [pc, #28]	; (80055ec <_fstat_r+0x20>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f7fc f8de 	bl	800179a <_fstat>
 80055de:	1c43      	adds	r3, r0, #1
 80055e0:	d102      	bne.n	80055e8 <_fstat_r+0x1c>
 80055e2:	682b      	ldr	r3, [r5, #0]
 80055e4:	b103      	cbz	r3, 80055e8 <_fstat_r+0x1c>
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	bd38      	pop	{r3, r4, r5, pc}
 80055ea:	bf00      	nop
 80055ec:	2000a2f0 	.word	0x2000a2f0

080055f0 <_isatty_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4d06      	ldr	r5, [pc, #24]	; (800560c <_isatty_r+0x1c>)
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	4608      	mov	r0, r1
 80055fa:	602b      	str	r3, [r5, #0]
 80055fc:	f7fc f8dd 	bl	80017ba <_isatty>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	d102      	bne.n	800560a <_isatty_r+0x1a>
 8005604:	682b      	ldr	r3, [r5, #0]
 8005606:	b103      	cbz	r3, 800560a <_isatty_r+0x1a>
 8005608:	6023      	str	r3, [r4, #0]
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	2000a2f0 	.word	0x2000a2f0

08005610 <_lseek_r>:
 8005610:	b538      	push	{r3, r4, r5, lr}
 8005612:	4d07      	ldr	r5, [pc, #28]	; (8005630 <_lseek_r+0x20>)
 8005614:	4604      	mov	r4, r0
 8005616:	4608      	mov	r0, r1
 8005618:	4611      	mov	r1, r2
 800561a:	2200      	movs	r2, #0
 800561c:	602a      	str	r2, [r5, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	f7fc f8d6 	bl	80017d0 <_lseek>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_lseek_r+0x1e>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_lseek_r+0x1e>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	2000a2f0 	.word	0x2000a2f0

08005634 <__malloc_lock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_lock+0x8>)
 8005636:	f7ff bdc2 	b.w	80051be <__retarget_lock_acquire_recursive>
 800563a:	bf00      	nop
 800563c:	2000a2e4 	.word	0x2000a2e4

08005640 <__malloc_unlock>:
 8005640:	4801      	ldr	r0, [pc, #4]	; (8005648 <__malloc_unlock+0x8>)
 8005642:	f7ff bdbd 	b.w	80051c0 <__retarget_lock_release_recursive>
 8005646:	bf00      	nop
 8005648:	2000a2e4 	.word	0x2000a2e4

0800564c <_read_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	; (800566c <_read_r+0x20>)
 8005650:	4604      	mov	r4, r0
 8005652:	4608      	mov	r0, r1
 8005654:	4611      	mov	r1, r2
 8005656:	2200      	movs	r2, #0
 8005658:	602a      	str	r2, [r5, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	f7fc f858 	bl	8001710 <_read>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d102      	bne.n	800566a <_read_r+0x1e>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	b103      	cbz	r3, 800566a <_read_r+0x1e>
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	bd38      	pop	{r3, r4, r5, pc}
 800566c:	2000a2f0 	.word	0x2000a2f0

08005670 <wcvt>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	b085      	sub	sp, #20
 8005676:	2b00      	cmp	r3, #0
 8005678:	461d      	mov	r5, r3
 800567a:	4614      	mov	r4, r2
 800567c:	bfbc      	itt	lt
 800567e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005682:	4614      	movlt	r4, r2
 8005684:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005686:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8005688:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800568c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8005690:	bfb6      	itet	lt
 8005692:	461d      	movlt	r5, r3
 8005694:	2300      	movge	r3, #0
 8005696:	232d      	movlt	r3, #45	; 0x2d
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800569c:	f023 0820 	bic.w	r8, r3, #32
 80056a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056a4:	d005      	beq.n	80056b2 <wcvt+0x42>
 80056a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80056aa:	d100      	bne.n	80056ae <wcvt+0x3e>
 80056ac:	3601      	adds	r6, #1
 80056ae:	2102      	movs	r1, #2
 80056b0:	e000      	b.n	80056b4 <wcvt+0x44>
 80056b2:	2103      	movs	r1, #3
 80056b4:	ab03      	add	r3, sp, #12
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	ab02      	add	r3, sp, #8
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	ec45 4b10 	vmov	d0, r4, r5
 80056c0:	4653      	mov	r3, sl
 80056c2:	4632      	mov	r2, r6
 80056c4:	f000 feac 	bl	8006420 <_dtoa_r>
 80056c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80056cc:	4607      	mov	r7, r0
 80056ce:	d112      	bne.n	80056f6 <wcvt+0x86>
 80056d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d40f      	bmi.n	80056f6 <wcvt+0x86>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	1bdb      	subs	r3, r3, r7
 80056da:	f8cb 3000 	str.w	r3, [fp]
 80056de:	2300      	movs	r3, #0
 80056e0:	f8db 2000 	ldr.w	r2, [fp]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	dd02      	ble.n	80056ee <wcvt+0x7e>
 80056e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80056ea:	4293      	cmp	r3, r2
 80056ec:	db2a      	blt.n	8005744 <wcvt+0xd4>
 80056ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80056f0:	b005      	add	sp, #20
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80056fa:	eb07 0906 	add.w	r9, r7, r6
 80056fe:	d110      	bne.n	8005722 <wcvt+0xb2>
 8005700:	783b      	ldrb	r3, [r7, #0]
 8005702:	2b30      	cmp	r3, #48	; 0x30
 8005704:	d10a      	bne.n	800571c <wcvt+0xac>
 8005706:	2200      	movs	r2, #0
 8005708:	2300      	movs	r3, #0
 800570a:	4620      	mov	r0, r4
 800570c:	4629      	mov	r1, r5
 800570e:	f7fb f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 8005712:	b918      	cbnz	r0, 800571c <wcvt+0xac>
 8005714:	f1c6 0601 	rsb	r6, r6, #1
 8005718:	f8ca 6000 	str.w	r6, [sl]
 800571c:	f8da 3000 	ldr.w	r3, [sl]
 8005720:	4499      	add	r9, r3
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fb f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800572e:	b108      	cbz	r0, 8005734 <wcvt+0xc4>
 8005730:	f8cd 900c 	str.w	r9, [sp, #12]
 8005734:	2230      	movs	r2, #48	; 0x30
 8005736:	9b03      	ldr	r3, [sp, #12]
 8005738:	454b      	cmp	r3, r9
 800573a:	d2cc      	bcs.n	80056d6 <wcvt+0x66>
 800573c:	1c59      	adds	r1, r3, #1
 800573e:	9103      	str	r1, [sp, #12]
 8005740:	701a      	strb	r2, [r3, #0]
 8005742:	e7f8      	b.n	8005736 <wcvt+0xc6>
 8005744:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005746:	5cfa      	ldrb	r2, [r7, r3]
 8005748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800574c:	3301      	adds	r3, #1
 800574e:	e7c7      	b.n	80056e0 <wcvt+0x70>

08005750 <_svfwprintf_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ed2d 8b04 	vpush	{d8-d9}
 8005758:	b0d3      	sub	sp, #332	; 0x14c
 800575a:	461d      	mov	r5, r3
 800575c:	2300      	movs	r3, #0
 800575e:	4689      	mov	r9, r1
 8005760:	9319      	str	r3, [sp, #100]	; 0x64
 8005762:	4683      	mov	fp, r0
 8005764:	920b      	str	r2, [sp, #44]	; 0x2c
 8005766:	f001 fc49 	bl	8006ffc <_localeconv_r>
 800576a:	6803      	ldr	r3, [r0, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	9316      	str	r3, [sp, #88]	; 0x58
 8005770:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005774:	061e      	lsls	r6, r3, #24
 8005776:	d51a      	bpl.n	80057ae <_svfwprintf_r+0x5e>
 8005778:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800577c:	b9bb      	cbnz	r3, 80057ae <_svfwprintf_r+0x5e>
 800577e:	2140      	movs	r1, #64	; 0x40
 8005780:	4658      	mov	r0, fp
 8005782:	f7ff fe05 	bl	8005390 <_malloc_r>
 8005786:	f8c9 0000 	str.w	r0, [r9]
 800578a:	f8c9 0010 	str.w	r0, [r9, #16]
 800578e:	b958      	cbnz	r0, 80057a8 <_svfwprintf_r+0x58>
 8005790:	230c      	movs	r3, #12
 8005792:	f8cb 3000 	str.w	r3, [fp]
 8005796:	f04f 33ff 	mov.w	r3, #4294967295
 800579a:	930d      	str	r3, [sp, #52]	; 0x34
 800579c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800579e:	b053      	add	sp, #332	; 0x14c
 80057a0:	ecbd 8b04 	vpop	{d8-d9}
 80057a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	f8c9 3014 	str.w	r3, [r9, #20]
 80057ae:	ed9f 7b8e 	vldr	d7, [pc, #568]	; 80059e8 <_svfwprintf_r+0x298>
 80057b2:	2300      	movs	r3, #0
 80057b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057b6:	9311      	str	r3, [sp, #68]	; 0x44
 80057b8:	930d      	str	r3, [sp, #52]	; 0x34
 80057ba:	eeb0 8a47 	vmov.f32	s16, s14
 80057be:	eef0 8a67 	vmov.f32	s17, s15
 80057c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c4:	461c      	mov	r4, r3
 80057c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ca:	b10a      	cbz	r2, 80057d0 <_svfwprintf_r+0x80>
 80057cc:	2a25      	cmp	r2, #37	; 0x25
 80057ce:	d1f9      	bne.n	80057c4 <_svfwprintf_r+0x74>
 80057d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	d00d      	beq.n	80057f2 <_svfwprintf_r+0xa2>
 80057d6:	1ae6      	subs	r6, r4, r3
 80057d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057da:	4633      	mov	r3, r6
 80057dc:	4649      	mov	r1, r9
 80057de:	4658      	mov	r0, fp
 80057e0:	f001 ffc4 	bl	800776c <__ssputs_r>
 80057e4:	3001      	adds	r0, #1
 80057e6:	f000 80e9 	beq.w	80059bc <_svfwprintf_r+0x26c>
 80057ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057ec:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 80057f0:	930d      	str	r3, [sp, #52]	; 0x34
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80e1 	beq.w	80059bc <_svfwprintf_r+0x26c>
 80057fa:	2100      	movs	r1, #0
 80057fc:	1d22      	adds	r2, r4, #4
 80057fe:	9115      	str	r1, [sp, #84]	; 0x54
 8005800:	460e      	mov	r6, r1
 8005802:	f04f 34ff 	mov.w	r4, #4294967295
 8005806:	910c      	str	r1, [sp, #48]	; 0x30
 8005808:	460f      	mov	r7, r1
 800580a:	200a      	movs	r0, #10
 800580c:	4613      	mov	r3, r2
 800580e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005812:	9209      	str	r2, [sp, #36]	; 0x24
 8005814:	930b      	str	r3, [sp, #44]	; 0x2c
 8005816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005818:	2b39      	cmp	r3, #57	; 0x39
 800581a:	d84c      	bhi.n	80058b6 <_svfwprintf_r+0x166>
 800581c:	2b1f      	cmp	r3, #31
 800581e:	d94f      	bls.n	80058c0 <_svfwprintf_r+0x170>
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	3b20      	subs	r3, #32
 8005824:	2b19      	cmp	r3, #25
 8005826:	d84a      	bhi.n	80058be <_svfwprintf_r+0x16e>
 8005828:	e8df f003 	tbb	[pc, r3]
 800582c:	7049496b 	.word	0x7049496b
 8005830:	49494949 	.word	0x49494949
 8005834:	6c734949 	.word	0x6c734949
 8005838:	497d7a49 	.word	0x497d7a49
 800583c:	9b9b9b98 	.word	0x9b9b9b98
 8005840:	9b9b9b9b 	.word	0x9b9b9b9b
 8005844:	9b9b      	.short	0x9b9b
 8005846:	2b33      	cmp	r3, #51	; 0x33
 8005848:	d839      	bhi.n	80058be <_svfwprintf_r+0x16e>
 800584a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800584e:	00e5      	.short	0x00e5
 8005850:	00e50038 	.word	0x00e50038
 8005854:	00380038 	.word	0x00380038
 8005858:	00380038 	.word	0x00380038
 800585c:	0038009c 	.word	0x0038009c
 8005860:	00380038 	.word	0x00380038
 8005864:	00380038 	.word	0x00380038
 8005868:	00380038 	.word	0x00380038
 800586c:	00380038 	.word	0x00380038
 8005870:	00380038 	.word	0x00380038
 8005874:	0038031e 	.word	0x0038031e
 8005878:	00380038 	.word	0x00380038
 800587c:	00380038 	.word	0x00380038
 8005880:	00380038 	.word	0x00380038
 8005884:	00380038 	.word	0x00380038
 8005888:	00a50038 	.word	0x00a50038
 800588c:	00e500d3 	.word	0x00e500d3
 8005890:	00e500e5 	.word	0x00e500e5
 8005894:	00d3009f 	.word	0x00d3009f
 8005898:	00380038 	.word	0x00380038
 800589c:	003800a2 	.word	0x003800a2
 80058a0:	02950284 	.word	0x02950284
 80058a4:	00a202b3 	.word	0x00a202b3
 80058a8:	02c20038 	.word	0x02c20038
 80058ac:	03120038 	.word	0x03120038
 80058b0:	00380038 	.word	0x00380038
 80058b4:	0042      	.short	0x0042
 80058b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b8:	3b45      	subs	r3, #69	; 0x45
 80058ba:	2b33      	cmp	r3, #51	; 0x33
 80058bc:	d9c3      	bls.n	8005846 <_svfwprintf_r+0xf6>
 80058be:	b111      	cbz	r1, 80058c6 <_svfwprintf_r+0x176>
 80058c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d07a      	beq.n	80059bc <_svfwprintf_r+0x26c>
 80058c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80058ca:	2000      	movs	r0, #0
 80058cc:	9015      	str	r0, [sp, #84]	; 0x54
 80058ce:	950a      	str	r5, [sp, #40]	; 0x28
 80058d0:	e081      	b.n	80059d6 <_svfwprintf_r+0x286>
 80058d2:	b101      	cbz	r1, 80058d6 <_svfwprintf_r+0x186>
 80058d4:	9615      	str	r6, [sp, #84]	; 0x54
 80058d6:	4b46      	ldr	r3, [pc, #280]	; (80059f0 <_svfwprintf_r+0x2a0>)
 80058d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80058da:	462a      	mov	r2, r5
 80058dc:	06f8      	lsls	r0, r7, #27
 80058de:	f852 3b04 	ldr.w	r3, [r2], #4
 80058e2:	920a      	str	r2, [sp, #40]	; 0x28
 80058e4:	d402      	bmi.n	80058ec <_svfwprintf_r+0x19c>
 80058e6:	0679      	lsls	r1, r7, #25
 80058e8:	bf48      	it	mi
 80058ea:	b29b      	uxthmi	r3, r3
 80058ec:	07fa      	lsls	r2, r7, #31
 80058ee:	d506      	bpl.n	80058fe <_svfwprintf_r+0x1ae>
 80058f0:	b12b      	cbz	r3, 80058fe <_svfwprintf_r+0x1ae>
 80058f2:	2230      	movs	r2, #48	; 0x30
 80058f4:	921a      	str	r2, [sp, #104]	; 0x68
 80058f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80058fa:	f047 0702 	orr.w	r7, r7, #2
 80058fe:	2202      	movs	r2, #2
 8005900:	e242      	b.n	8005d88 <_svfwprintf_r+0x638>
 8005902:	b90e      	cbnz	r6, 8005908 <_svfwprintf_r+0x1b8>
 8005904:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005906:	2101      	movs	r1, #1
 8005908:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800590a:	e77f      	b.n	800580c <_svfwprintf_r+0xbc>
 800590c:	f047 0701 	orr.w	r7, r7, #1
 8005910:	e7fa      	b.n	8005908 <_svfwprintf_r+0x1b8>
 8005912:	f855 3b04 	ldr.w	r3, [r5], #4
 8005916:	930c      	str	r3, [sp, #48]	; 0x30
 8005918:	2b00      	cmp	r3, #0
 800591a:	daf5      	bge.n	8005908 <_svfwprintf_r+0x1b8>
 800591c:	425b      	negs	r3, r3
 800591e:	930c      	str	r3, [sp, #48]	; 0x30
 8005920:	f047 0704 	orr.w	r7, r7, #4
 8005924:	e7f0      	b.n	8005908 <_svfwprintf_r+0x1b8>
 8005926:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005928:	f852 3b04 	ldr.w	r3, [r2], #4
 800592c:	9309      	str	r3, [sp, #36]	; 0x24
 800592e:	2b2a      	cmp	r3, #42	; 0x2a
 8005930:	d112      	bne.n	8005958 <_svfwprintf_r+0x208>
 8005932:	f855 4b04 	ldr.w	r4, [r5], #4
 8005936:	920b      	str	r2, [sp, #44]	; 0x2c
 8005938:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 800593c:	e7e4      	b.n	8005908 <_svfwprintf_r+0x1b8>
 800593e:	fb00 3404 	mla	r4, r0, r4, r3
 8005942:	f852 3b04 	ldr.w	r3, [r2], #4
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
 8005948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800594a:	3b30      	subs	r3, #48	; 0x30
 800594c:	2b09      	cmp	r3, #9
 800594e:	d9f6      	bls.n	800593e <_svfwprintf_r+0x1ee>
 8005950:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8005954:	920b      	str	r2, [sp, #44]	; 0x2c
 8005956:	e75e      	b.n	8005816 <_svfwprintf_r+0xc6>
 8005958:	2400      	movs	r4, #0
 800595a:	e7f5      	b.n	8005948 <_svfwprintf_r+0x1f8>
 800595c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8005960:	e7d2      	b.n	8005908 <_svfwprintf_r+0x1b8>
 8005962:	2300      	movs	r3, #0
 8005964:	930c      	str	r3, [sp, #48]	; 0x30
 8005966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596a:	fb00 3302 	mla	r3, r0, r2, r3
 800596e:	3b30      	subs	r3, #48	; 0x30
 8005970:	930c      	str	r3, [sp, #48]	; 0x30
 8005972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005974:	f853 2b04 	ldr.w	r2, [r3], #4
 8005978:	930b      	str	r3, [sp, #44]	; 0x2c
 800597a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800597e:	2b09      	cmp	r3, #9
 8005980:	9209      	str	r2, [sp, #36]	; 0x24
 8005982:	d9f0      	bls.n	8005966 <_svfwprintf_r+0x216>
 8005984:	e747      	b.n	8005816 <_svfwprintf_r+0xc6>
 8005986:	f047 0708 	orr.w	r7, r7, #8
 800598a:	e7bd      	b.n	8005908 <_svfwprintf_r+0x1b8>
 800598c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8005990:	e7ba      	b.n	8005908 <_svfwprintf_r+0x1b8>
 8005992:	f047 0710 	orr.w	r7, r7, #16
 8005996:	e7b7      	b.n	8005908 <_svfwprintf_r+0x1b8>
 8005998:	b101      	cbz	r1, 800599c <_svfwprintf_r+0x24c>
 800599a:	9615      	str	r6, [sp, #84]	; 0x54
 800599c:	462b      	mov	r3, r5
 800599e:	06fd      	lsls	r5, r7, #27
 80059a0:	f853 0b04 	ldr.w	r0, [r3], #4
 80059a4:	930a      	str	r3, [sp, #40]	; 0x28
 80059a6:	d412      	bmi.n	80059ce <_svfwprintf_r+0x27e>
 80059a8:	f000 fc64 	bl	8006274 <btowc>
 80059ac:	1c44      	adds	r4, r0, #1
 80059ae:	d10e      	bne.n	80059ce <_svfwprintf_r+0x27e>
 80059b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80059b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b8:	f8a9 300c 	strh.w	r3, [r9, #12]
 80059bc:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80059c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059c6:	bf18      	it	ne
 80059c8:	f04f 33ff 	movne.w	r3, #4294967295
 80059cc:	e6e5      	b.n	800579a <_svfwprintf_r+0x4a>
 80059ce:	902a      	str	r0, [sp, #168]	; 0xa8
 80059d0:	2000      	movs	r0, #0
 80059d2:	902b      	str	r0, [sp, #172]	; 0xac
 80059d4:	9015      	str	r0, [sp, #84]	; 0x54
 80059d6:	4680      	mov	r8, r0
 80059d8:	2401      	movs	r4, #1
 80059da:	4606      	mov	r6, r0
 80059dc:	4605      	mov	r5, r0
 80059de:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 80059e2:	e104      	b.n	8005bee <_svfwprintf_r+0x49e>
 80059e4:	f3af 8000 	nop.w
	...
 80059f0:	0800b4f0 	.word	0x0800b4f0
 80059f4:	b101      	cbz	r1, 80059f8 <_svfwprintf_r+0x2a8>
 80059f6:	9615      	str	r6, [sp, #84]	; 0x54
 80059f8:	462a      	mov	r2, r5
 80059fa:	06f9      	lsls	r1, r7, #27
 80059fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8005a00:	920a      	str	r2, [sp, #40]	; 0x28
 8005a02:	d402      	bmi.n	8005a0a <_svfwprintf_r+0x2ba>
 8005a04:	067a      	lsls	r2, r7, #25
 8005a06:	bf48      	it	mi
 8005a08:	b21b      	sxthmi	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da02      	bge.n	8005a14 <_svfwprintf_r+0x2c4>
 8005a0e:	222d      	movs	r2, #45	; 0x2d
 8005a10:	425b      	negs	r3, r3
 8005a12:	9215      	str	r2, [sp, #84]	; 0x54
 8005a14:	2201      	movs	r2, #1
 8005a16:	e1b9      	b.n	8005d8c <_svfwprintf_r+0x63c>
 8005a18:	b101      	cbz	r1, 8005a1c <_svfwprintf_r+0x2cc>
 8005a1a:	9615      	str	r6, [sp, #84]	; 0x54
 8005a1c:	3507      	adds	r5, #7
 8005a1e:	f025 0307 	bic.w	r3, r5, #7
 8005a22:	ecb3 7b02 	vldmia	r3!, {d7}
 8005a26:	930a      	str	r3, [sp, #40]	; 0x28
 8005a28:	eeb0 8a47 	vmov.f32	s16, s14
 8005a2c:	eef0 8a67 	vmov.f32	s17, s15
 8005a30:	ee18 3a90 	vmov	r3, s17
 8005a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a38:	ee09 3a90 	vmov	s19, r3
 8005a3c:	eeb0 9a47 	vmov.f32	s18, s14
 8005a40:	4ba6      	ldr	r3, [pc, #664]	; (8005cdc <_svfwprintf_r+0x58c>)
 8005a42:	ec51 0b19 	vmov	r0, r1, d9
 8005a46:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4a:	f7fb f86f 	bl	8000b2c <__aeabi_dcmpun>
 8005a4e:	b9f0      	cbnz	r0, 8005a8e <_svfwprintf_r+0x33e>
 8005a50:	4ba2      	ldr	r3, [pc, #648]	; (8005cdc <_svfwprintf_r+0x58c>)
 8005a52:	ec51 0b19 	vmov	r0, r1, d9
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	f7fb f849 	bl	8000af0 <__aeabi_dcmple>
 8005a5e:	b9b0      	cbnz	r0, 8005a8e <_svfwprintf_r+0x33e>
 8005a60:	ec51 0b18 	vmov	r0, r1, d8
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	f7fb f838 	bl	8000adc <__aeabi_dcmplt>
 8005a6c:	b108      	cbz	r0, 8005a72 <_svfwprintf_r+0x322>
 8005a6e:	232d      	movs	r3, #45	; 0x2d
 8005a70:	9315      	str	r3, [sp, #84]	; 0x54
 8005a72:	4b9b      	ldr	r3, [pc, #620]	; (8005ce0 <_svfwprintf_r+0x590>)
 8005a74:	489b      	ldr	r0, [pc, #620]	; (8005ce4 <_svfwprintf_r+0x594>)
 8005a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a78:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8005a7c:	2a47      	cmp	r2, #71	; 0x47
 8005a7e:	bf94      	ite	ls
 8005a80:	469a      	movls	sl, r3
 8005a82:	4682      	movhi	sl, r0
 8005a84:	f04f 0800 	mov.w	r8, #0
 8005a88:	2403      	movs	r4, #3
 8005a8a:	4646      	mov	r6, r8
 8005a8c:	e3d4      	b.n	8006238 <_svfwprintf_r+0xae8>
 8005a8e:	ec53 2b18 	vmov	r2, r3, d8
 8005a92:	ec51 0b18 	vmov	r0, r1, d8
 8005a96:	f7fb f849 	bl	8000b2c <__aeabi_dcmpun>
 8005a9a:	b140      	cbz	r0, 8005aae <_svfwprintf_r+0x35e>
 8005a9c:	ee18 3a90 	vmov	r3, s17
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfbc      	itt	lt
 8005aa4:	232d      	movlt	r3, #45	; 0x2d
 8005aa6:	9315      	strlt	r3, [sp, #84]	; 0x54
 8005aa8:	488f      	ldr	r0, [pc, #572]	; (8005ce8 <_svfwprintf_r+0x598>)
 8005aaa:	4b90      	ldr	r3, [pc, #576]	; (8005cec <_svfwprintf_r+0x59c>)
 8005aac:	e7e3      	b.n	8005a76 <_svfwprintf_r+0x326>
 8005aae:	1c63      	adds	r3, r4, #1
 8005ab0:	f000 810f 	beq.w	8005cd2 <_svfwprintf_r+0x582>
 8005ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab6:	f023 0320 	bic.w	r3, r3, #32
 8005aba:	2b47      	cmp	r3, #71	; 0x47
 8005abc:	d102      	bne.n	8005ac4 <_svfwprintf_r+0x374>
 8005abe:	2c00      	cmp	r4, #0
 8005ac0:	bf08      	it	eq
 8005ac2:	2401      	moveq	r4, #1
 8005ac4:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8005ac8:	930e      	str	r3, [sp, #56]	; 0x38
 8005aca:	2328      	movs	r3, #40	; 0x28
 8005acc:	9307      	str	r3, [sp, #28]
 8005ace:	ab19      	add	r3, sp, #100	; 0x64
 8005ad0:	9305      	str	r3, [sp, #20]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	9304      	str	r3, [sp, #16]
 8005ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad8:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8005adc:	ae18      	add	r6, sp, #96	; 0x60
 8005ade:	ad17      	add	r5, sp, #92	; 0x5c
 8005ae0:	e9cd 4300 	strd	r4, r3, [sp]
 8005ae4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ae8:	ec53 2b18 	vmov	r2, r3, d8
 8005aec:	9603      	str	r6, [sp, #12]
 8005aee:	9502      	str	r5, [sp, #8]
 8005af0:	4658      	mov	r0, fp
 8005af2:	f7ff fdbd 	bl	8005670 <wcvt>
 8005af6:	4540      	cmp	r0, r8
 8005af8:	4682      	mov	sl, r0
 8005afa:	f040 80ec 	bne.w	8005cd6 <_svfwprintf_r+0x586>
 8005afe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005b00:	2928      	cmp	r1, #40	; 0x28
 8005b02:	f340 80e8 	ble.w	8005cd6 <_svfwprintf_r+0x586>
 8005b06:	0089      	lsls	r1, r1, #2
 8005b08:	4658      	mov	r0, fp
 8005b0a:	f7ff fc41 	bl	8005390 <_malloc_r>
 8005b0e:	4680      	mov	r8, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	f43f af4d 	beq.w	80059b0 <_svfwprintf_r+0x260>
 8005b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b18:	9502      	str	r5, [sp, #8]
 8005b1a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8005b1e:	ab19      	add	r3, sp, #100	; 0x64
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8005b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2a:	4658      	mov	r0, fp
 8005b2c:	e9cd 4300 	strd	r4, r3, [sp]
 8005b30:	ec53 2b18 	vmov	r2, r3, d8
 8005b34:	f7ff fd9c 	bl	8005670 <wcvt>
 8005b38:	4682      	mov	sl, r0
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8005b3e:	f023 0320 	bic.w	r3, r3, #32
 8005b42:	2b47      	cmp	r3, #71	; 0x47
 8005b44:	f040 80d6 	bne.w	8005cf4 <_svfwprintf_r+0x5a4>
 8005b48:	1cee      	adds	r6, r5, #3
 8005b4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b4c:	db02      	blt.n	8005b54 <_svfwprintf_r+0x404>
 8005b4e:	42ac      	cmp	r4, r5
 8005b50:	f280 80ec 	bge.w	8005d2c <_svfwprintf_r+0x5dc>
 8005b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b56:	3b02      	subs	r3, #2
 8005b58:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5a:	1e6b      	subs	r3, r5, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b60:	9318      	str	r3, [sp, #96]	; 0x60
 8005b62:	bfb8      	it	lt
 8005b64:	f1c5 0301 	rsblt	r3, r5, #1
 8005b68:	921c      	str	r2, [sp, #112]	; 0x70
 8005b6a:	bfb4      	ite	lt
 8005b6c:	222d      	movlt	r2, #45	; 0x2d
 8005b6e:	222b      	movge	r2, #43	; 0x2b
 8005b70:	2b09      	cmp	r3, #9
 8005b72:	921d      	str	r2, [sp, #116]	; 0x74
 8005b74:	f340 80d1 	ble.w	8005d1a <_svfwprintf_r+0x5ca>
 8005b78:	a82a      	add	r0, sp, #168	; 0xa8
 8005b7a:	250a      	movs	r5, #10
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	fb93 f4f5 	sdiv	r4, r3, r5
 8005b82:	fb05 3114 	mls	r1, r5, r4, r3
 8005b86:	3130      	adds	r1, #48	; 0x30
 8005b88:	f842 1c04 	str.w	r1, [r2, #-4]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2963      	cmp	r1, #99	; 0x63
 8005b90:	f1a0 0004 	sub.w	r0, r0, #4
 8005b94:	4623      	mov	r3, r4
 8005b96:	dcf1      	bgt.n	8005b7c <_svfwprintf_r+0x42c>
 8005b98:	3330      	adds	r3, #48	; 0x30
 8005b9a:	f840 3c04 	str.w	r3, [r0, #-4]
 8005b9e:	f1a2 0108 	sub.w	r1, r2, #8
 8005ba2:	a81e      	add	r0, sp, #120	; 0x78
 8005ba4:	ab2a      	add	r3, sp, #168	; 0xa8
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	f0c0 80b2 	bcc.w	8005d10 <_svfwprintf_r+0x5c0>
 8005bac:	f10d 04b3 	add.w	r4, sp, #179	; 0xb3
 8005bb0:	1aa4      	subs	r4, r4, r2
 8005bb2:	f024 0403 	bic.w	r4, r4, #3
 8005bb6:	3a0b      	subs	r2, #11
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bf38      	it	cc
 8005bbc:	2400      	movcc	r4, #0
 8005bbe:	ab1e      	add	r3, sp, #120	; 0x78
 8005bc0:	441c      	add	r4, r3
 8005bc2:	a81c      	add	r0, sp, #112	; 0x70
 8005bc4:	1a24      	subs	r4, r4, r0
 8005bc6:	10a3      	asrs	r3, r4, #2
 8005bc8:	9311      	str	r3, [sp, #68]	; 0x44
 8005bca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8005bd2:	dc02      	bgt.n	8005bda <_svfwprintf_r+0x48a>
 8005bd4:	f017 0501 	ands.w	r5, r7, #1
 8005bd8:	d001      	beq.n	8005bde <_svfwprintf_r+0x48e>
 8005bda:	3401      	adds	r4, #1
 8005bdc:	2500      	movs	r5, #0
 8005bde:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005be0:	2e00      	cmp	r6, #0
 8005be2:	f000 817e 	beq.w	8005ee2 <_svfwprintf_r+0x792>
 8005be6:	232d      	movs	r3, #45	; 0x2d
 8005be8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005bea:	9315      	str	r3, [sp, #84]	; 0x54
 8005bec:	2600      	movs	r6, #0
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	4633      	mov	r3, r6
 8005bf2:	bfb8      	it	lt
 8005bf4:	4623      	movlt	r3, r4
 8005bf6:	930e      	str	r3, [sp, #56]	; 0x38
 8005bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bfa:	b113      	cbz	r3, 8005c02 <_svfwprintf_r+0x4b2>
 8005bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bfe:	3301      	adds	r3, #1
 8005c00:	930e      	str	r3, [sp, #56]	; 0x38
 8005c02:	f017 0302 	ands.w	r3, r7, #2
 8005c06:	9312      	str	r3, [sp, #72]	; 0x48
 8005c08:	bf1e      	ittt	ne
 8005c0a:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 8005c0c:	3302      	addne	r3, #2
 8005c0e:	930e      	strne	r3, [sp, #56]	; 0x38
 8005c10:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8005c14:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c16:	f000 8166 	beq.w	8005ee6 <_svfwprintf_r+0x796>
 8005c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c1c:	b143      	cbz	r3, 8005c30 <_svfwprintf_r+0x4e0>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	aa15      	add	r2, sp, #84	; 0x54
 8005c22:	4649      	mov	r1, r9
 8005c24:	4658      	mov	r0, fp
 8005c26:	f001 fda1 	bl	800776c <__ssputs_r>
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	f000 816e 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8005c30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c32:	b143      	cbz	r3, 8005c46 <_svfwprintf_r+0x4f6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	aa1a      	add	r2, sp, #104	; 0x68
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	f001 fd96 	bl	800776c <__ssputs_r>
 8005c40:	3001      	adds	r0, #1
 8005c42:	f000 8163 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8005c46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c48:	2b80      	cmp	r3, #128	; 0x80
 8005c4a:	d113      	bne.n	8005c74 <_svfwprintf_r+0x524>
 8005c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c50:	1a9b      	subs	r3, r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	9310      	str	r3, [sp, #64]	; 0x40
 8005c56:	dd0d      	ble.n	8005c74 <_svfwprintf_r+0x524>
 8005c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c5a:	4a25      	ldr	r2, [pc, #148]	; (8005cf0 <_svfwprintf_r+0x5a0>)
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	f300 816a 	bgt.w	8005f36 <_svfwprintf_r+0x7e6>
 8005c62:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <_svfwprintf_r+0x5a0>)
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4649      	mov	r1, r9
 8005c68:	4658      	mov	r0, fp
 8005c6a:	f001 fd7f 	bl	800776c <__ssputs_r>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	f000 814c 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8005c74:	1b36      	subs	r6, r6, r4
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	dd0c      	ble.n	8005c94 <_svfwprintf_r+0x544>
 8005c7a:	2e10      	cmp	r6, #16
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	; (8005cf0 <_svfwprintf_r+0x5a0>)
 8005c7e:	f300 8165 	bgt.w	8005f4c <_svfwprintf_r+0x7fc>
 8005c82:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <_svfwprintf_r+0x5a0>)
 8005c84:	00b3      	lsls	r3, r6, #2
 8005c86:	4649      	mov	r1, r9
 8005c88:	4658      	mov	r0, fp
 8005c8a:	f001 fd6f 	bl	800776c <__ssputs_r>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f000 813c 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8005c94:	05f9      	lsls	r1, r7, #23
 8005c96:	f100 8162 	bmi.w	8005f5e <_svfwprintf_r+0x80e>
 8005c9a:	00a3      	lsls	r3, r4, #2
 8005c9c:	4652      	mov	r2, sl
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4658      	mov	r0, fp
 8005ca2:	f001 fd63 	bl	800776c <__ssputs_r>
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f000 8130 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8005cac:	077a      	lsls	r2, r7, #29
 8005cae:	f100 8281 	bmi.w	80061b4 <_svfwprintf_r+0xa64>
 8005cb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cb6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005cb8:	428a      	cmp	r2, r1
 8005cba:	bfac      	ite	ge
 8005cbc:	189b      	addge	r3, r3, r2
 8005cbe:	185b      	addlt	r3, r3, r1
 8005cc0:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc2:	f1b8 0f00 	cmp.w	r8, #0
 8005cc6:	d055      	beq.n	8005d74 <_svfwprintf_r+0x624>
 8005cc8:	4641      	mov	r1, r8
 8005cca:	4658      	mov	r0, fp
 8005ccc:	f7ff faf4 	bl	80052b8 <_free_r>
 8005cd0:	e050      	b.n	8005d74 <_svfwprintf_r+0x624>
 8005cd2:	2406      	movs	r4, #6
 8005cd4:	e6f6      	b.n	8005ac4 <_svfwprintf_r+0x374>
 8005cd6:	f04f 0800 	mov.w	r8, #0
 8005cda:	e72e      	b.n	8005b3a <_svfwprintf_r+0x3ea>
 8005cdc:	7fefffff 	.word	0x7fefffff
 8005ce0:	0800b46c 	.word	0x0800b46c
 8005ce4:	0800b47c 	.word	0x0800b47c
 8005ce8:	0800b49c 	.word	0x0800b49c
 8005cec:	0800b48c 	.word	0x0800b48c
 8005cf0:	0800b57c 	.word	0x0800b57c
 8005cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf6:	2b66      	cmp	r3, #102	; 0x66
 8005cf8:	f47f af2f 	bne.w	8005b5a <_svfwprintf_r+0x40a>
 8005cfc:	f007 0301 	and.w	r3, r7, #1
 8005d00:	2d00      	cmp	r5, #0
 8005d02:	ea43 0304 	orr.w	r3, r3, r4
 8005d06:	dd0e      	ble.n	8005d26 <_svfwprintf_r+0x5d6>
 8005d08:	b1fb      	cbz	r3, 8005d4a <_svfwprintf_r+0x5fa>
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	442c      	add	r4, r5
 8005d0e:	e766      	b.n	8005bde <_svfwprintf_r+0x48e>
 8005d10:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d14:	f840 4b04 	str.w	r4, [r0], #4
 8005d18:	e745      	b.n	8005ba6 <_svfwprintf_r+0x456>
 8005d1a:	2230      	movs	r2, #48	; 0x30
 8005d1c:	4413      	add	r3, r2
 8005d1e:	921e      	str	r2, [sp, #120]	; 0x78
 8005d20:	931f      	str	r3, [sp, #124]	; 0x7c
 8005d22:	ac20      	add	r4, sp, #128	; 0x80
 8005d24:	e74d      	b.n	8005bc2 <_svfwprintf_r+0x472>
 8005d26:	b193      	cbz	r3, 8005d4e <_svfwprintf_r+0x5fe>
 8005d28:	3402      	adds	r4, #2
 8005d2a:	e758      	b.n	8005bde <_svfwprintf_r+0x48e>
 8005d2c:	42ab      	cmp	r3, r5
 8005d2e:	dc05      	bgt.n	8005d3c <_svfwprintf_r+0x5ec>
 8005d30:	07fc      	lsls	r4, r7, #31
 8005d32:	d50e      	bpl.n	8005d52 <_svfwprintf_r+0x602>
 8005d34:	1c6c      	adds	r4, r5, #1
 8005d36:	2367      	movs	r3, #103	; 0x67
 8005d38:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3a:	e750      	b.n	8005bde <_svfwprintf_r+0x48e>
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	bfd4      	ite	le
 8005d40:	f1c5 0402 	rsble	r4, r5, #2
 8005d44:	2401      	movgt	r4, #1
 8005d46:	441c      	add	r4, r3
 8005d48:	e7f5      	b.n	8005d36 <_svfwprintf_r+0x5e6>
 8005d4a:	462c      	mov	r4, r5
 8005d4c:	e747      	b.n	8005bde <_svfwprintf_r+0x48e>
 8005d4e:	2401      	movs	r4, #1
 8005d50:	e745      	b.n	8005bde <_svfwprintf_r+0x48e>
 8005d52:	462c      	mov	r4, r5
 8005d54:	e7ef      	b.n	8005d36 <_svfwprintf_r+0x5e6>
 8005d56:	b101      	cbz	r1, 8005d5a <_svfwprintf_r+0x60a>
 8005d58:	9615      	str	r6, [sp, #84]	; 0x54
 8005d5a:	1d2b      	adds	r3, r5, #4
 8005d5c:	06f8      	lsls	r0, r7, #27
 8005d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d60:	d503      	bpl.n	8005d6a <_svfwprintf_r+0x61a>
 8005d62:	682b      	ldr	r3, [r5, #0]
 8005d64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e004      	b.n	8005d74 <_svfwprintf_r+0x624>
 8005d6a:	0679      	lsls	r1, r7, #25
 8005d6c:	d5f9      	bpl.n	8005d62 <_svfwprintf_r+0x612>
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d72:	801a      	strh	r2, [r3, #0]
 8005d74:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005d76:	e524      	b.n	80057c2 <_svfwprintf_r+0x72>
 8005d78:	462a      	mov	r2, r5
 8005d7a:	f017 0110 	ands.w	r1, r7, #16
 8005d7e:	f852 3b04 	ldr.w	r3, [r2], #4
 8005d82:	920a      	str	r2, [sp, #40]	; 0x28
 8005d84:	d011      	beq.n	8005daa <_svfwprintf_r+0x65a>
 8005d86:	2200      	movs	r2, #0
 8005d88:	2100      	movs	r1, #0
 8005d8a:	9115      	str	r1, [sp, #84]	; 0x54
 8005d8c:	1c66      	adds	r6, r4, #1
 8005d8e:	f000 822e 	beq.w	80061ee <_svfwprintf_r+0xa9e>
 8005d92:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f040 822d 	bne.w	80061f6 <_svfwprintf_r+0xaa6>
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	f000 8098 	beq.w	8005ed2 <_svfwprintf_r+0x782>
 8005da2:	2a01      	cmp	r2, #1
 8005da4:	f040 822a 	bne.w	80061fc <_svfwprintf_r+0xaac>
 8005da8:	e075      	b.n	8005e96 <_svfwprintf_r+0x746>
 8005daa:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8005dae:	d0eb      	beq.n	8005d88 <_svfwprintf_r+0x638>
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	e7e8      	b.n	8005d86 <_svfwprintf_r+0x636>
 8005db4:	462a      	mov	r2, r5
 8005db6:	2178      	movs	r1, #120	; 0x78
 8005db8:	f852 3b04 	ldr.w	r3, [r2], #4
 8005dbc:	920a      	str	r2, [sp, #40]	; 0x28
 8005dbe:	2230      	movs	r2, #48	; 0x30
 8005dc0:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 8005dc4:	4a9e      	ldr	r2, [pc, #632]	; (8006040 <_svfwprintf_r+0x8f0>)
 8005dc6:	920f      	str	r2, [sp, #60]	; 0x3c
 8005dc8:	f047 0702 	orr.w	r7, r7, #2
 8005dcc:	2202      	movs	r2, #2
 8005dce:	9109      	str	r1, [sp, #36]	; 0x24
 8005dd0:	e7da      	b.n	8005d88 <_svfwprintf_r+0x638>
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	2600      	movs	r6, #0
 8005dd6:	f853 ab04 	ldr.w	sl, [r3], #4
 8005dda:	930a      	str	r3, [sp, #40]	; 0x28
 8005ddc:	f017 0510 	ands.w	r5, r7, #16
 8005de0:	9615      	str	r6, [sp, #84]	; 0x54
 8005de2:	d12d      	bne.n	8005e40 <_svfwprintf_r+0x6f0>
 8005de4:	1c62      	adds	r2, r4, #1
 8005de6:	d014      	beq.n	8005e12 <_svfwprintf_r+0x6c2>
 8005de8:	4622      	mov	r2, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	4650      	mov	r0, sl
 8005dee:	4626      	mov	r6, r4
 8005df0:	f7fa f9ee 	bl	80001d0 <memchr>
 8005df4:	b108      	cbz	r0, 8005dfa <_svfwprintf_r+0x6aa>
 8005df6:	eba0 060a 	sub.w	r6, r0, sl
 8005dfa:	2e27      	cmp	r6, #39	; 0x27
 8005dfc:	d90e      	bls.n	8005e1c <_svfwprintf_r+0x6cc>
 8005dfe:	1c71      	adds	r1, r6, #1
 8005e00:	0089      	lsls	r1, r1, #2
 8005e02:	4658      	mov	r0, fp
 8005e04:	f7ff fac4 	bl	8005390 <_malloc_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	f43f add1 	beq.w	80059b0 <_svfwprintf_r+0x260>
 8005e0e:	4680      	mov	r8, r0
 8005e10:	e007      	b.n	8005e22 <_svfwprintf_r+0x6d2>
 8005e12:	4650      	mov	r0, sl
 8005e14:	f7fa fa2c 	bl	8000270 <strlen>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	e7ee      	b.n	8005dfa <_svfwprintf_r+0x6aa>
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	a82a      	add	r0, sp, #168	; 0xa8
 8005e22:	4634      	mov	r4, r6
 8005e24:	2300      	movs	r3, #0
 8005e26:	42b3      	cmp	r3, r6
 8005e28:	d104      	bne.n	8005e34 <_svfwprintf_r+0x6e4>
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8005e30:	4682      	mov	sl, r0
 8005e32:	e6dc      	b.n	8005bee <_svfwprintf_r+0x49e>
 8005e34:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8005e38:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	e7f2      	b.n	8005e26 <_svfwprintf_r+0x6d6>
 8005e40:	1c63      	adds	r3, r4, #1
 8005e42:	d011      	beq.n	8005e68 <_svfwprintf_r+0x718>
 8005e44:	4622      	mov	r2, r4
 8005e46:	4631      	mov	r1, r6
 8005e48:	4650      	mov	r0, sl
 8005e4a:	f000 fa04 	bl	8006256 <wmemchr>
 8005e4e:	4680      	mov	r8, r0
 8005e50:	2800      	cmp	r0, #0
 8005e52:	f43f ae1a 	beq.w	8005a8a <_svfwprintf_r+0x33a>
 8005e56:	eba0 080a 	sub.w	r8, r0, sl
 8005e5a:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8005e5e:	4544      	cmp	r4, r8
 8005e60:	bfa8      	it	ge
 8005e62:	4644      	movge	r4, r8
 8005e64:	46b0      	mov	r8, r6
 8005e66:	e610      	b.n	8005a8a <_svfwprintf_r+0x33a>
 8005e68:	4650      	mov	r0, sl
 8005e6a:	f000 f9eb 	bl	8006244 <wcslen>
 8005e6e:	4604      	mov	r4, r0
 8005e70:	e7f8      	b.n	8005e64 <_svfwprintf_r+0x714>
 8005e72:	462a      	mov	r2, r5
 8005e74:	06fe      	lsls	r6, r7, #27
 8005e76:	f852 3b04 	ldr.w	r3, [r2], #4
 8005e7a:	920a      	str	r2, [sp, #40]	; 0x28
 8005e7c:	d501      	bpl.n	8005e82 <_svfwprintf_r+0x732>
 8005e7e:	2201      	movs	r2, #1
 8005e80:	e782      	b.n	8005d88 <_svfwprintf_r+0x638>
 8005e82:	067d      	lsls	r5, r7, #25
 8005e84:	bf48      	it	mi
 8005e86:	b29b      	uxthmi	r3, r3
 8005e88:	e7f9      	b.n	8005e7e <_svfwprintf_r+0x72e>
 8005e8a:	b101      	cbz	r1, 8005e8e <_svfwprintf_r+0x73e>
 8005e8c:	9615      	str	r6, [sp, #84]	; 0x54
 8005e8e:	4b6d      	ldr	r3, [pc, #436]	; (8006044 <_svfwprintf_r+0x8f4>)
 8005e90:	e522      	b.n	80058d8 <_svfwprintf_r+0x188>
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d804      	bhi.n	8005ea0 <_svfwprintf_r+0x750>
 8005e96:	3330      	adds	r3, #48	; 0x30
 8005e98:	9351      	str	r3, [sp, #324]	; 0x144
 8005e9a:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 8005e9e:	e1c3      	b.n	8006228 <_svfwprintf_r+0xad8>
 8005ea0:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8005ea4:	250a      	movs	r5, #10
 8005ea6:	fbb3 f0f5 	udiv	r0, r3, r5
 8005eaa:	fb05 3210 	mls	r2, r5, r0, r3
 8005eae:	3230      	adds	r2, #48	; 0x30
 8005eb0:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	2a09      	cmp	r2, #9
 8005eb8:	4603      	mov	r3, r0
 8005eba:	d8f4      	bhi.n	8005ea6 <_svfwprintf_r+0x756>
 8005ebc:	e1b4      	b.n	8006228 <_svfwprintf_r+0xad8>
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005eca:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8005ece:	d1f6      	bne.n	8005ebe <_svfwprintf_r+0x76e>
 8005ed0:	e1aa      	b.n	8006228 <_svfwprintf_r+0xad8>
 8005ed2:	b91a      	cbnz	r2, 8005edc <_svfwprintf_r+0x78c>
 8005ed4:	07f8      	lsls	r0, r7, #31
 8005ed6:	d501      	bpl.n	8005edc <_svfwprintf_r+0x78c>
 8005ed8:	2330      	movs	r3, #48	; 0x30
 8005eda:	e7dd      	b.n	8005e98 <_svfwprintf_r+0x748>
 8005edc:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8005ee0:	e1a2      	b.n	8006228 <_svfwprintf_r+0xad8>
 8005ee2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005ee4:	e683      	b.n	8005bee <_svfwprintf_r+0x49e>
 8005ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ee8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	9310      	str	r3, [sp, #64]	; 0x40
 8005ef0:	f77f ae93 	ble.w	8005c1a <_svfwprintf_r+0x4ca>
 8005ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ef6:	2b10      	cmp	r3, #16
 8005ef8:	dc11      	bgt.n	8005f1e <_svfwprintf_r+0x7ce>
 8005efa:	4a53      	ldr	r2, [pc, #332]	; (8006048 <_svfwprintf_r+0x8f8>)
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4649      	mov	r1, r9
 8005f00:	4658      	mov	r0, fp
 8005f02:	f001 fc33 	bl	800776c <__ssputs_r>
 8005f06:	3001      	adds	r0, #1
 8005f08:	f47f ae87 	bne.w	8005c1a <_svfwprintf_r+0x4ca>
 8005f0c:	f1b8 0f00 	cmp.w	r8, #0
 8005f10:	f43f ad54 	beq.w	80059bc <_svfwprintf_r+0x26c>
 8005f14:	4641      	mov	r1, r8
 8005f16:	4658      	mov	r0, fp
 8005f18:	f7ff f9ce 	bl	80052b8 <_free_r>
 8005f1c:	e54e      	b.n	80059bc <_svfwprintf_r+0x26c>
 8005f1e:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <_svfwprintf_r+0x8f8>)
 8005f20:	2340      	movs	r3, #64	; 0x40
 8005f22:	4649      	mov	r1, r9
 8005f24:	4658      	mov	r0, fp
 8005f26:	f001 fc21 	bl	800776c <__ssputs_r>
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d0ee      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005f2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f30:	3b10      	subs	r3, #16
 8005f32:	9310      	str	r3, [sp, #64]	; 0x40
 8005f34:	e7de      	b.n	8005ef4 <_svfwprintf_r+0x7a4>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4658      	mov	r0, fp
 8005f3c:	f001 fc16 	bl	800776c <__ssputs_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	d0e3      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f46:	3b10      	subs	r3, #16
 8005f48:	9310      	str	r3, [sp, #64]	; 0x40
 8005f4a:	e685      	b.n	8005c58 <_svfwprintf_r+0x508>
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4658      	mov	r0, fp
 8005f52:	f001 fc0b 	bl	800776c <__ssputs_r>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d0d8      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005f5a:	3e10      	subs	r6, #16
 8005f5c:	e68d      	b.n	8005c7a <_svfwprintf_r+0x52a>
 8005f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f60:	2b65      	cmp	r3, #101	; 0x65
 8005f62:	f240 80e5 	bls.w	8006130 <_svfwprintf_r+0x9e0>
 8005f66:	ec51 0b18 	vmov	r0, r1, d8
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f7fa fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f72:	b358      	cbz	r0, 8005fcc <_svfwprintf_r+0x87c>
 8005f74:	4a35      	ldr	r2, [pc, #212]	; (800604c <_svfwprintf_r+0x8fc>)
 8005f76:	2304      	movs	r3, #4
 8005f78:	4649      	mov	r1, r9
 8005f7a:	4658      	mov	r0, fp
 8005f7c:	f001 fbf6 	bl	800776c <__ssputs_r>
 8005f80:	3001      	adds	r0, #1
 8005f82:	d0c3      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005f84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	db02      	blt.n	8005f92 <_svfwprintf_r+0x842>
 8005f8c:	07fb      	lsls	r3, r7, #31
 8005f8e:	f57f ae8d 	bpl.w	8005cac <_svfwprintf_r+0x55c>
 8005f92:	2304      	movs	r3, #4
 8005f94:	aa16      	add	r2, sp, #88	; 0x58
 8005f96:	4649      	mov	r1, r9
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f001 fbe7 	bl	800776c <__ssputs_r>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	d0b4      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005fa2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005fa4:	3c01      	subs	r4, #1
 8005fa6:	2c00      	cmp	r4, #0
 8005fa8:	f77f ae80 	ble.w	8005cac <_svfwprintf_r+0x55c>
 8005fac:	4d28      	ldr	r5, [pc, #160]	; (8006050 <_svfwprintf_r+0x900>)
 8005fae:	2c10      	cmp	r4, #16
 8005fb0:	dc02      	bgt.n	8005fb8 <_svfwprintf_r+0x868>
 8005fb2:	00a3      	lsls	r3, r4, #2
 8005fb4:	4a26      	ldr	r2, [pc, #152]	; (8006050 <_svfwprintf_r+0x900>)
 8005fb6:	e672      	b.n	8005c9e <_svfwprintf_r+0x54e>
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	462a      	mov	r2, r5
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	4658      	mov	r0, fp
 8005fc0:	f001 fbd4 	bl	800776c <__ssputs_r>
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	d0a1      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005fc8:	3c10      	subs	r4, #16
 8005fca:	e7f0      	b.n	8005fae <_svfwprintf_r+0x85e>
 8005fcc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dc40      	bgt.n	8006054 <_svfwprintf_r+0x904>
 8005fd2:	4a1e      	ldr	r2, [pc, #120]	; (800604c <_svfwprintf_r+0x8fc>)
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	4649      	mov	r1, r9
 8005fd8:	4658      	mov	r0, fp
 8005fda:	f001 fbc7 	bl	800776c <__ssputs_r>
 8005fde:	3001      	adds	r0, #1
 8005fe0:	d094      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8005fe2:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f007 0201 	and.w	r2, r7, #1
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f43f ae5d 	beq.w	8005cac <_svfwprintf_r+0x55c>
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	aa16      	add	r2, sp, #88	; 0x58
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	4658      	mov	r0, fp
 8005ffa:	f001 fbb7 	bl	800776c <__ssputs_r>
 8005ffe:	3001      	adds	r0, #1
 8006000:	d084      	beq.n	8005f0c <_svfwprintf_r+0x7bc>
 8006002:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006004:	2c00      	cmp	r4, #0
 8006006:	da0c      	bge.n	8006022 <_svfwprintf_r+0x8d2>
 8006008:	4d11      	ldr	r5, [pc, #68]	; (8006050 <_svfwprintf_r+0x900>)
 800600a:	4264      	negs	r4, r4
 800600c:	2c10      	cmp	r4, #16
 800600e:	dc0b      	bgt.n	8006028 <_svfwprintf_r+0x8d8>
 8006010:	4a0f      	ldr	r2, [pc, #60]	; (8006050 <_svfwprintf_r+0x900>)
 8006012:	00a3      	lsls	r3, r4, #2
 8006014:	4649      	mov	r1, r9
 8006016:	4658      	mov	r0, fp
 8006018:	f001 fba8 	bl	800776c <__ssputs_r>
 800601c:	3001      	adds	r0, #1
 800601e:	f43f af75 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8006022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	e639      	b.n	8005c9c <_svfwprintf_r+0x54c>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	462a      	mov	r2, r5
 800602c:	4649      	mov	r1, r9
 800602e:	4658      	mov	r0, fp
 8006030:	f001 fb9c 	bl	800776c <__ssputs_r>
 8006034:	3001      	adds	r0, #1
 8006036:	f43f af69 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 800603a:	3c10      	subs	r4, #16
 800603c:	e7e6      	b.n	800600c <_svfwprintf_r+0x8bc>
 800603e:	bf00      	nop
 8006040:	0800b4f0 	.word	0x0800b4f0
 8006044:	0800b4ac 	.word	0x0800b4ac
 8006048:	0800b53c 	.word	0x0800b53c
 800604c:	0800b534 	.word	0x0800b534
 8006050:	0800b57c 	.word	0x0800b57c
 8006054:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006056:	f344 041d 	sbfx	r4, r4, #0, #30
 800605a:	42ac      	cmp	r4, r5
 800605c:	bfa8      	it	ge
 800605e:	462c      	movge	r4, r5
 8006060:	2c00      	cmp	r4, #0
 8006062:	dc20      	bgt.n	80060a6 <_svfwprintf_r+0x956>
 8006064:	2c00      	cmp	r4, #0
 8006066:	bfac      	ite	ge
 8006068:	1b2e      	subge	r6, r5, r4
 800606a:	462e      	movlt	r6, r5
 800606c:	2e00      	cmp	r6, #0
 800606e:	dd0b      	ble.n	8006088 <_svfwprintf_r+0x938>
 8006070:	4c72      	ldr	r4, [pc, #456]	; (800623c <_svfwprintf_r+0xaec>)
 8006072:	2e10      	cmp	r6, #16
 8006074:	dc20      	bgt.n	80060b8 <_svfwprintf_r+0x968>
 8006076:	4a71      	ldr	r2, [pc, #452]	; (800623c <_svfwprintf_r+0xaec>)
 8006078:	00b3      	lsls	r3, r6, #2
 800607a:	4649      	mov	r1, r9
 800607c:	4658      	mov	r0, fp
 800607e:	f001 fb75 	bl	800776c <__ssputs_r>
 8006082:	3001      	adds	r0, #1
 8006084:	f43f af42 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8006088:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800608c:	429a      	cmp	r2, r3
 800608e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8006092:	da1c      	bge.n	80060ce <_svfwprintf_r+0x97e>
 8006094:	2304      	movs	r3, #4
 8006096:	aa16      	add	r2, sp, #88	; 0x58
 8006098:	4649      	mov	r1, r9
 800609a:	4658      	mov	r0, fp
 800609c:	f001 fb66 	bl	800776c <__ssputs_r>
 80060a0:	3001      	adds	r0, #1
 80060a2:	d116      	bne.n	80060d2 <_svfwprintf_r+0x982>
 80060a4:	e732      	b.n	8005f0c <_svfwprintf_r+0x7bc>
 80060a6:	00a3      	lsls	r3, r4, #2
 80060a8:	4652      	mov	r2, sl
 80060aa:	4649      	mov	r1, r9
 80060ac:	4658      	mov	r0, fp
 80060ae:	f001 fb5d 	bl	800776c <__ssputs_r>
 80060b2:	3001      	adds	r0, #1
 80060b4:	d1d6      	bne.n	8006064 <_svfwprintf_r+0x914>
 80060b6:	e729      	b.n	8005f0c <_svfwprintf_r+0x7bc>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	4622      	mov	r2, r4
 80060bc:	4649      	mov	r1, r9
 80060be:	4658      	mov	r0, fp
 80060c0:	f001 fb54 	bl	800776c <__ssputs_r>
 80060c4:	3001      	adds	r0, #1
 80060c6:	f43f af21 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 80060ca:	3e10      	subs	r6, #16
 80060cc:	e7d1      	b.n	8006072 <_svfwprintf_r+0x922>
 80060ce:	07fe      	lsls	r6, r7, #31
 80060d0:	d4e0      	bmi.n	8006094 <_svfwprintf_r+0x944>
 80060d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80060d4:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 80060d8:	10a2      	asrs	r2, r4, #2
 80060da:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80060dc:	1b1c      	subs	r4, r3, r4
 80060de:	4294      	cmp	r4, r2
 80060e0:	bfa8      	it	ge
 80060e2:	4614      	movge	r4, r2
 80060e4:	2c00      	cmp	r4, #0
 80060e6:	dd09      	ble.n	80060fc <_svfwprintf_r+0x9ac>
 80060e8:	00a3      	lsls	r3, r4, #2
 80060ea:	eb0a 0205 	add.w	r2, sl, r5
 80060ee:	4649      	mov	r1, r9
 80060f0:	4658      	mov	r0, fp
 80060f2:	f001 fb3b 	bl	800776c <__ssputs_r>
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af08 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 80060fc:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 8006100:	2c00      	cmp	r4, #0
 8006102:	eba5 0503 	sub.w	r5, r5, r3
 8006106:	bfa8      	it	ge
 8006108:	1b2d      	subge	r5, r5, r4
 800610a:	2d00      	cmp	r5, #0
 800610c:	f77f adce 	ble.w	8005cac <_svfwprintf_r+0x55c>
 8006110:	4c4a      	ldr	r4, [pc, #296]	; (800623c <_svfwprintf_r+0xaec>)
 8006112:	2d10      	cmp	r5, #16
 8006114:	dc01      	bgt.n	800611a <_svfwprintf_r+0x9ca>
 8006116:	00ab      	lsls	r3, r5, #2
 8006118:	e74c      	b.n	8005fb4 <_svfwprintf_r+0x864>
 800611a:	2340      	movs	r3, #64	; 0x40
 800611c:	4622      	mov	r2, r4
 800611e:	4649      	mov	r1, r9
 8006120:	4658      	mov	r0, fp
 8006122:	f001 fb23 	bl	800776c <__ssputs_r>
 8006126:	3001      	adds	r0, #1
 8006128:	f43f aef0 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 800612c:	3d10      	subs	r5, #16
 800612e:	e7f0      	b.n	8006112 <_svfwprintf_r+0x9c2>
 8006130:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006132:	2b01      	cmp	r3, #1
 8006134:	4652      	mov	r2, sl
 8006136:	f04f 0304 	mov.w	r3, #4
 800613a:	4649      	mov	r1, r9
 800613c:	4658      	mov	r0, fp
 800613e:	dc01      	bgt.n	8006144 <_svfwprintf_r+0x9f4>
 8006140:	07fc      	lsls	r4, r7, #31
 8006142:	d51b      	bpl.n	800617c <_svfwprintf_r+0xa2c>
 8006144:	f001 fb12 	bl	800776c <__ssputs_r>
 8006148:	3001      	adds	r0, #1
 800614a:	f43f aedf 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 800614e:	2304      	movs	r3, #4
 8006150:	aa16      	add	r2, sp, #88	; 0x58
 8006152:	4649      	mov	r1, r9
 8006154:	4658      	mov	r0, fp
 8006156:	f001 fb09 	bl	800776c <__ssputs_r>
 800615a:	3001      	adds	r0, #1
 800615c:	f43f aed6 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8006160:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006162:	ec51 0b18 	vmov	r0, r1, d8
 8006166:	2200      	movs	r2, #0
 8006168:	2300      	movs	r3, #0
 800616a:	3c01      	subs	r4, #1
 800616c:	f7fa fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006170:	b968      	cbnz	r0, 800618e <_svfwprintf_r+0xa3e>
 8006172:	00a3      	lsls	r3, r4, #2
 8006174:	f10a 0204 	add.w	r2, sl, #4
 8006178:	4649      	mov	r1, r9
 800617a:	4658      	mov	r0, fp
 800617c:	f001 faf6 	bl	800776c <__ssputs_r>
 8006180:	3001      	adds	r0, #1
 8006182:	f43f aec3 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 8006186:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006188:	aa1c      	add	r2, sp, #112	; 0x70
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	e587      	b.n	8005c9e <_svfwprintf_r+0x54e>
 800618e:	2c00      	cmp	r4, #0
 8006190:	ddf9      	ble.n	8006186 <_svfwprintf_r+0xa36>
 8006192:	4d2a      	ldr	r5, [pc, #168]	; (800623c <_svfwprintf_r+0xaec>)
 8006194:	2c10      	cmp	r4, #16
 8006196:	dc02      	bgt.n	800619e <_svfwprintf_r+0xa4e>
 8006198:	4a28      	ldr	r2, [pc, #160]	; (800623c <_svfwprintf_r+0xaec>)
 800619a:	00a3      	lsls	r3, r4, #2
 800619c:	e7ec      	b.n	8006178 <_svfwprintf_r+0xa28>
 800619e:	2340      	movs	r3, #64	; 0x40
 80061a0:	462a      	mov	r2, r5
 80061a2:	4649      	mov	r1, r9
 80061a4:	4658      	mov	r0, fp
 80061a6:	f001 fae1 	bl	800776c <__ssputs_r>
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f aeae 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 80061b0:	3c10      	subs	r4, #16
 80061b2:	e7ef      	b.n	8006194 <_svfwprintf_r+0xa44>
 80061b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061b8:	1a9c      	subs	r4, r3, r2
 80061ba:	2c00      	cmp	r4, #0
 80061bc:	f77f ad79 	ble.w	8005cb2 <_svfwprintf_r+0x562>
 80061c0:	2c10      	cmp	r4, #16
 80061c2:	dc09      	bgt.n	80061d8 <_svfwprintf_r+0xa88>
 80061c4:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <_svfwprintf_r+0xaf0>)
 80061c6:	00a3      	lsls	r3, r4, #2
 80061c8:	4649      	mov	r1, r9
 80061ca:	4658      	mov	r0, fp
 80061cc:	f001 face 	bl	800776c <__ssputs_r>
 80061d0:	3001      	adds	r0, #1
 80061d2:	f47f ad6e 	bne.w	8005cb2 <_svfwprintf_r+0x562>
 80061d6:	e699      	b.n	8005f0c <_svfwprintf_r+0x7bc>
 80061d8:	4a19      	ldr	r2, [pc, #100]	; (8006240 <_svfwprintf_r+0xaf0>)
 80061da:	2340      	movs	r3, #64	; 0x40
 80061dc:	4649      	mov	r1, r9
 80061de:	4658      	mov	r0, fp
 80061e0:	f001 fac4 	bl	800776c <__ssputs_r>
 80061e4:	3001      	adds	r0, #1
 80061e6:	f43f ae91 	beq.w	8005f0c <_svfwprintf_r+0x7bc>
 80061ea:	3c10      	subs	r4, #16
 80061ec:	e7e8      	b.n	80061c0 <_svfwprintf_r+0xa70>
 80061ee:	4639      	mov	r1, r7
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f add6 	beq.w	8005da2 <_svfwprintf_r+0x652>
 80061f6:	2a01      	cmp	r2, #1
 80061f8:	f43f ae4b 	beq.w	8005e92 <_svfwprintf_r+0x742>
 80061fc:	2a02      	cmp	r2, #2
 80061fe:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8006202:	f43f ae5c 	beq.w	8005ebe <_svfwprintf_r+0x76e>
 8006206:	f003 0207 	and.w	r2, r3, #7
 800620a:	3230      	adds	r2, #48	; 0x30
 800620c:	08db      	lsrs	r3, r3, #3
 800620e:	4650      	mov	r0, sl
 8006210:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8006214:	d1f7      	bne.n	8006206 <_svfwprintf_r+0xab6>
 8006216:	07cd      	lsls	r5, r1, #31
 8006218:	d506      	bpl.n	8006228 <_svfwprintf_r+0xad8>
 800621a:	2a30      	cmp	r2, #48	; 0x30
 800621c:	d004      	beq.n	8006228 <_svfwprintf_r+0xad8>
 800621e:	2330      	movs	r3, #48	; 0x30
 8006220:	f84a 3c04 	str.w	r3, [sl, #-4]
 8006224:	f1a0 0a08 	sub.w	sl, r0, #8
 8006228:	ab52      	add	r3, sp, #328	; 0x148
 800622a:	4626      	mov	r6, r4
 800622c:	eba3 040a 	sub.w	r4, r3, sl
 8006230:	10a4      	asrs	r4, r4, #2
 8006232:	460f      	mov	r7, r1
 8006234:	f04f 0800 	mov.w	r8, #0
 8006238:	4645      	mov	r5, r8
 800623a:	e4d8      	b.n	8005bee <_svfwprintf_r+0x49e>
 800623c:	0800b57c 	.word	0x0800b57c
 8006240:	0800b53c 	.word	0x0800b53c

08006244 <wcslen>:
 8006244:	4602      	mov	r2, r0
 8006246:	4613      	mov	r3, r2
 8006248:	3204      	adds	r2, #4
 800624a:	6819      	ldr	r1, [r3, #0]
 800624c:	2900      	cmp	r1, #0
 800624e:	d1fa      	bne.n	8006246 <wcslen+0x2>
 8006250:	1a18      	subs	r0, r3, r0
 8006252:	1080      	asrs	r0, r0, #2
 8006254:	4770      	bx	lr

08006256 <wmemchr>:
 8006256:	b530      	push	{r4, r5, lr}
 8006258:	2400      	movs	r4, #0
 800625a:	4294      	cmp	r4, r2
 800625c:	4603      	mov	r3, r0
 800625e:	d102      	bne.n	8006266 <wmemchr+0x10>
 8006260:	2300      	movs	r3, #0
 8006262:	4618      	mov	r0, r3
 8006264:	bd30      	pop	{r4, r5, pc}
 8006266:	681d      	ldr	r5, [r3, #0]
 8006268:	428d      	cmp	r5, r1
 800626a:	f100 0004 	add.w	r0, r0, #4
 800626e:	d0f8      	beq.n	8006262 <wmemchr+0xc>
 8006270:	3401      	adds	r4, #1
 8006272:	e7f2      	b.n	800625a <wmemchr+0x4>

08006274 <btowc>:
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	b087      	sub	sp, #28
 800627a:	d103      	bne.n	8006284 <btowc+0x10>
 800627c:	f04f 30ff 	mov.w	r0, #4294967295
 8006280:	b007      	add	sp, #28
 8006282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006284:	4d1c      	ldr	r5, [pc, #112]	; (80062f8 <btowc+0x84>)
 8006286:	f88d 000b 	strb.w	r0, [sp, #11]
 800628a:	ae04      	add	r6, sp, #16
 800628c:	2208      	movs	r2, #8
 800628e:	2100      	movs	r1, #0
 8006290:	4630      	mov	r0, r6
 8006292:	f7ff f809 	bl	80052a8 <memset>
 8006296:	682f      	ldr	r7, [r5, #0]
 8006298:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800629a:	b9fc      	cbnz	r4, 80062dc <btowc+0x68>
 800629c:	2050      	movs	r0, #80	; 0x50
 800629e:	f000 feb1 	bl	8007004 <malloc>
 80062a2:	4602      	mov	r2, r0
 80062a4:	65b8      	str	r0, [r7, #88]	; 0x58
 80062a6:	b920      	cbnz	r0, 80062b2 <btowc+0x3e>
 80062a8:	4b14      	ldr	r3, [pc, #80]	; (80062fc <btowc+0x88>)
 80062aa:	4815      	ldr	r0, [pc, #84]	; (8006300 <btowc+0x8c>)
 80062ac:	2118      	movs	r1, #24
 80062ae:	f001 fc59 	bl	8007b64 <__assert_func>
 80062b2:	682b      	ldr	r3, [r5, #0]
 80062b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b6:	e9c3 4400 	strd	r4, r4, [r3]
 80062ba:	e9c3 4402 	strd	r4, r4, [r3, #8]
 80062be:	e9c3 4404 	strd	r4, r4, [r3, #16]
 80062c2:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 80062c6:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 80062ca:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 80062ce:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 80062d2:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 80062d6:	619c      	str	r4, [r3, #24]
 80062d8:	771c      	strb	r4, [r3, #28]
 80062da:	625c      	str	r4, [r3, #36]	; 0x24
 80062dc:	4b09      	ldr	r3, [pc, #36]	; (8006304 <btowc+0x90>)
 80062de:	9600      	str	r6, [sp, #0]
 80062e0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80062e4:	6828      	ldr	r0, [r5, #0]
 80062e6:	2301      	movs	r3, #1
 80062e8:	f10d 020b 	add.w	r2, sp, #11
 80062ec:	a903      	add	r1, sp, #12
 80062ee:	47a0      	blx	r4
 80062f0:	2801      	cmp	r0, #1
 80062f2:	d8c3      	bhi.n	800627c <btowc+0x8>
 80062f4:	9803      	ldr	r0, [sp, #12]
 80062f6:	e7c3      	b.n	8006280 <btowc+0xc>
 80062f8:	20000014 	.word	0x20000014
 80062fc:	0800b5bc 	.word	0x0800b5bc
 8006300:	0800b5d3 	.word	0x0800b5d3
 8006304:	20000078 	.word	0x20000078

08006308 <quorem>:
 8006308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800630c:	6903      	ldr	r3, [r0, #16]
 800630e:	690c      	ldr	r4, [r1, #16]
 8006310:	42a3      	cmp	r3, r4
 8006312:	4607      	mov	r7, r0
 8006314:	f2c0 8081 	blt.w	800641a <quorem+0x112>
 8006318:	3c01      	subs	r4, #1
 800631a:	f101 0814 	add.w	r8, r1, #20
 800631e:	f100 0514 	add.w	r5, r0, #20
 8006322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800632c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006330:	3301      	adds	r3, #1
 8006332:	429a      	cmp	r2, r3
 8006334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800633c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006340:	d331      	bcc.n	80063a6 <quorem+0x9e>
 8006342:	f04f 0e00 	mov.w	lr, #0
 8006346:	4640      	mov	r0, r8
 8006348:	46ac      	mov	ip, r5
 800634a:	46f2      	mov	sl, lr
 800634c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006350:	b293      	uxth	r3, r2
 8006352:	fb06 e303 	mla	r3, r6, r3, lr
 8006356:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800635a:	b29b      	uxth	r3, r3
 800635c:	ebaa 0303 	sub.w	r3, sl, r3
 8006360:	f8dc a000 	ldr.w	sl, [ip]
 8006364:	0c12      	lsrs	r2, r2, #16
 8006366:	fa13 f38a 	uxtah	r3, r3, sl
 800636a:	fb06 e202 	mla	r2, r6, r2, lr
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	9b00      	ldr	r3, [sp, #0]
 8006372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006376:	b292      	uxth	r2, r2
 8006378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800637c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006380:	f8bd 3000 	ldrh.w	r3, [sp]
 8006384:	4581      	cmp	r9, r0
 8006386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800638a:	f84c 3b04 	str.w	r3, [ip], #4
 800638e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006392:	d2db      	bcs.n	800634c <quorem+0x44>
 8006394:	f855 300b 	ldr.w	r3, [r5, fp]
 8006398:	b92b      	cbnz	r3, 80063a6 <quorem+0x9e>
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	3b04      	subs	r3, #4
 800639e:	429d      	cmp	r5, r3
 80063a0:	461a      	mov	r2, r3
 80063a2:	d32e      	bcc.n	8006402 <quorem+0xfa>
 80063a4:	613c      	str	r4, [r7, #16]
 80063a6:	4638      	mov	r0, r7
 80063a8:	f001 f8c8 	bl	800753c <__mcmp>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	db24      	blt.n	80063fa <quorem+0xf2>
 80063b0:	3601      	adds	r6, #1
 80063b2:	4628      	mov	r0, r5
 80063b4:	f04f 0c00 	mov.w	ip, #0
 80063b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80063bc:	f8d0 e000 	ldr.w	lr, [r0]
 80063c0:	b293      	uxth	r3, r2
 80063c2:	ebac 0303 	sub.w	r3, ip, r3
 80063c6:	0c12      	lsrs	r2, r2, #16
 80063c8:	fa13 f38e 	uxtah	r3, r3, lr
 80063cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063da:	45c1      	cmp	r9, r8
 80063dc:	f840 3b04 	str.w	r3, [r0], #4
 80063e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063e4:	d2e8      	bcs.n	80063b8 <quorem+0xb0>
 80063e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ee:	b922      	cbnz	r2, 80063fa <quorem+0xf2>
 80063f0:	3b04      	subs	r3, #4
 80063f2:	429d      	cmp	r5, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	d30a      	bcc.n	800640e <quorem+0x106>
 80063f8:	613c      	str	r4, [r7, #16]
 80063fa:	4630      	mov	r0, r6
 80063fc:	b003      	add	sp, #12
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	6812      	ldr	r2, [r2, #0]
 8006404:	3b04      	subs	r3, #4
 8006406:	2a00      	cmp	r2, #0
 8006408:	d1cc      	bne.n	80063a4 <quorem+0x9c>
 800640a:	3c01      	subs	r4, #1
 800640c:	e7c7      	b.n	800639e <quorem+0x96>
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	3b04      	subs	r3, #4
 8006412:	2a00      	cmp	r2, #0
 8006414:	d1f0      	bne.n	80063f8 <quorem+0xf0>
 8006416:	3c01      	subs	r4, #1
 8006418:	e7eb      	b.n	80063f2 <quorem+0xea>
 800641a:	2000      	movs	r0, #0
 800641c:	e7ee      	b.n	80063fc <quorem+0xf4>
	...

08006420 <_dtoa_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	ed2d 8b04 	vpush	{d8-d9}
 8006428:	ec57 6b10 	vmov	r6, r7, d0
 800642c:	b093      	sub	sp, #76	; 0x4c
 800642e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006434:	9106      	str	r1, [sp, #24]
 8006436:	ee10 aa10 	vmov	sl, s0
 800643a:	4604      	mov	r4, r0
 800643c:	9209      	str	r2, [sp, #36]	; 0x24
 800643e:	930c      	str	r3, [sp, #48]	; 0x30
 8006440:	46bb      	mov	fp, r7
 8006442:	b975      	cbnz	r5, 8006462 <_dtoa_r+0x42>
 8006444:	2010      	movs	r0, #16
 8006446:	f000 fddd 	bl	8007004 <malloc>
 800644a:	4602      	mov	r2, r0
 800644c:	6260      	str	r0, [r4, #36]	; 0x24
 800644e:	b920      	cbnz	r0, 800645a <_dtoa_r+0x3a>
 8006450:	4ba7      	ldr	r3, [pc, #668]	; (80066f0 <_dtoa_r+0x2d0>)
 8006452:	21ea      	movs	r1, #234	; 0xea
 8006454:	48a7      	ldr	r0, [pc, #668]	; (80066f4 <_dtoa_r+0x2d4>)
 8006456:	f001 fb85 	bl	8007b64 <__assert_func>
 800645a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800645e:	6005      	str	r5, [r0, #0]
 8006460:	60c5      	str	r5, [r0, #12]
 8006462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006464:	6819      	ldr	r1, [r3, #0]
 8006466:	b151      	cbz	r1, 800647e <_dtoa_r+0x5e>
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	604a      	str	r2, [r1, #4]
 800646c:	2301      	movs	r3, #1
 800646e:	4093      	lsls	r3, r2
 8006470:	608b      	str	r3, [r1, #8]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 fe20 	bl	80070b8 <_Bfree>
 8006478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	1e3b      	subs	r3, r7, #0
 8006480:	bfaa      	itet	ge
 8006482:	2300      	movge	r3, #0
 8006484:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006488:	f8c8 3000 	strge.w	r3, [r8]
 800648c:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <_dtoa_r+0x2d8>)
 800648e:	bfbc      	itt	lt
 8006490:	2201      	movlt	r2, #1
 8006492:	f8c8 2000 	strlt.w	r2, [r8]
 8006496:	ea33 030b 	bics.w	r3, r3, fp
 800649a:	d11b      	bne.n	80064d4 <_dtoa_r+0xb4>
 800649c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800649e:	f242 730f 	movw	r3, #9999	; 0x270f
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064a8:	4333      	orrs	r3, r6
 80064aa:	f000 8592 	beq.w	8006fd2 <_dtoa_r+0xbb2>
 80064ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064b0:	b963      	cbnz	r3, 80064cc <_dtoa_r+0xac>
 80064b2:	4b92      	ldr	r3, [pc, #584]	; (80066fc <_dtoa_r+0x2dc>)
 80064b4:	e022      	b.n	80064fc <_dtoa_r+0xdc>
 80064b6:	4b92      	ldr	r3, [pc, #584]	; (8006700 <_dtoa_r+0x2e0>)
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	3308      	adds	r3, #8
 80064bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	9801      	ldr	r0, [sp, #4]
 80064c2:	b013      	add	sp, #76	; 0x4c
 80064c4:	ecbd 8b04 	vpop	{d8-d9}
 80064c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064cc:	4b8b      	ldr	r3, [pc, #556]	; (80066fc <_dtoa_r+0x2dc>)
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	3303      	adds	r3, #3
 80064d2:	e7f3      	b.n	80064bc <_dtoa_r+0x9c>
 80064d4:	2200      	movs	r2, #0
 80064d6:	2300      	movs	r3, #0
 80064d8:	4650      	mov	r0, sl
 80064da:	4659      	mov	r1, fp
 80064dc:	f7fa faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80064e0:	ec4b ab19 	vmov	d9, sl, fp
 80064e4:	4680      	mov	r8, r0
 80064e6:	b158      	cbz	r0, 8006500 <_dtoa_r+0xe0>
 80064e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ea:	2301      	movs	r3, #1
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 856b 	beq.w	8006fcc <_dtoa_r+0xbac>
 80064f6:	4883      	ldr	r0, [pc, #524]	; (8006704 <_dtoa_r+0x2e4>)
 80064f8:	6018      	str	r0, [r3, #0]
 80064fa:	1e43      	subs	r3, r0, #1
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	e7df      	b.n	80064c0 <_dtoa_r+0xa0>
 8006500:	ec4b ab10 	vmov	d0, sl, fp
 8006504:	aa10      	add	r2, sp, #64	; 0x40
 8006506:	a911      	add	r1, sp, #68	; 0x44
 8006508:	4620      	mov	r0, r4
 800650a:	f001 f8bd 	bl	8007688 <__d2b>
 800650e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006512:	ee08 0a10 	vmov	s16, r0
 8006516:	2d00      	cmp	r5, #0
 8006518:	f000 8084 	beq.w	8006624 <_dtoa_r+0x204>
 800651c:	ee19 3a90 	vmov	r3, s19
 8006520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006524:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006528:	4656      	mov	r6, sl
 800652a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800652e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006532:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006536:	4b74      	ldr	r3, [pc, #464]	; (8006708 <_dtoa_r+0x2e8>)
 8006538:	2200      	movs	r2, #0
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f7f9 fea3 	bl	8000288 <__aeabi_dsub>
 8006542:	a365      	add	r3, pc, #404	; (adr r3, 80066d8 <_dtoa_r+0x2b8>)
 8006544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006548:	f7fa f856 	bl	80005f8 <__aeabi_dmul>
 800654c:	a364      	add	r3, pc, #400	; (adr r3, 80066e0 <_dtoa_r+0x2c0>)
 800654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006552:	f7f9 fe9b 	bl	800028c <__adddf3>
 8006556:	4606      	mov	r6, r0
 8006558:	4628      	mov	r0, r5
 800655a:	460f      	mov	r7, r1
 800655c:	f7f9 ffe2 	bl	8000524 <__aeabi_i2d>
 8006560:	a361      	add	r3, pc, #388	; (adr r3, 80066e8 <_dtoa_r+0x2c8>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7fa f847 	bl	80005f8 <__aeabi_dmul>
 800656a:	4602      	mov	r2, r0
 800656c:	460b      	mov	r3, r1
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	f7f9 fe8b 	bl	800028c <__adddf3>
 8006576:	4606      	mov	r6, r0
 8006578:	460f      	mov	r7, r1
 800657a:	f7fa faed 	bl	8000b58 <__aeabi_d2iz>
 800657e:	2200      	movs	r2, #0
 8006580:	9000      	str	r0, [sp, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	4630      	mov	r0, r6
 8006586:	4639      	mov	r1, r7
 8006588:	f7fa faa8 	bl	8000adc <__aeabi_dcmplt>
 800658c:	b150      	cbz	r0, 80065a4 <_dtoa_r+0x184>
 800658e:	9800      	ldr	r0, [sp, #0]
 8006590:	f7f9 ffc8 	bl	8000524 <__aeabi_i2d>
 8006594:	4632      	mov	r2, r6
 8006596:	463b      	mov	r3, r7
 8006598:	f7fa fa96 	bl	8000ac8 <__aeabi_dcmpeq>
 800659c:	b910      	cbnz	r0, 80065a4 <_dtoa_r+0x184>
 800659e:	9b00      	ldr	r3, [sp, #0]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	9b00      	ldr	r3, [sp, #0]
 80065a6:	2b16      	cmp	r3, #22
 80065a8:	d85a      	bhi.n	8006660 <_dtoa_r+0x240>
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	4b57      	ldr	r3, [pc, #348]	; (800670c <_dtoa_r+0x2ec>)
 80065ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	ec51 0b19 	vmov	r0, r1, d9
 80065ba:	f7fa fa8f 	bl	8000adc <__aeabi_dcmplt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d050      	beq.n	8006664 <_dtoa_r+0x244>
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	2300      	movs	r3, #0
 80065ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80065cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065ce:	1b5d      	subs	r5, r3, r5
 80065d0:	1e6b      	subs	r3, r5, #1
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	bf45      	ittet	mi
 80065d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80065da:	9304      	strmi	r3, [sp, #16]
 80065dc:	2300      	movpl	r3, #0
 80065de:	2300      	movmi	r3, #0
 80065e0:	bf4c      	ite	mi
 80065e2:	9305      	strmi	r3, [sp, #20]
 80065e4:	9304      	strpl	r3, [sp, #16]
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db3d      	blt.n	8006668 <_dtoa_r+0x248>
 80065ec:	9b05      	ldr	r3, [sp, #20]
 80065ee:	9a00      	ldr	r2, [sp, #0]
 80065f0:	920a      	str	r2, [sp, #40]	; 0x28
 80065f2:	4413      	add	r3, r2
 80065f4:	9305      	str	r3, [sp, #20]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9307      	str	r3, [sp, #28]
 80065fa:	9b06      	ldr	r3, [sp, #24]
 80065fc:	2b09      	cmp	r3, #9
 80065fe:	f200 8089 	bhi.w	8006714 <_dtoa_r+0x2f4>
 8006602:	2b05      	cmp	r3, #5
 8006604:	bfc4      	itt	gt
 8006606:	3b04      	subgt	r3, #4
 8006608:	9306      	strgt	r3, [sp, #24]
 800660a:	9b06      	ldr	r3, [sp, #24]
 800660c:	f1a3 0302 	sub.w	r3, r3, #2
 8006610:	bfcc      	ite	gt
 8006612:	2500      	movgt	r5, #0
 8006614:	2501      	movle	r5, #1
 8006616:	2b03      	cmp	r3, #3
 8006618:	f200 8087 	bhi.w	800672a <_dtoa_r+0x30a>
 800661c:	e8df f003 	tbb	[pc, r3]
 8006620:	59383a2d 	.word	0x59383a2d
 8006624:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006628:	441d      	add	r5, r3
 800662a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800662e:	2b20      	cmp	r3, #32
 8006630:	bfc1      	itttt	gt
 8006632:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006636:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800663a:	fa0b f303 	lslgt.w	r3, fp, r3
 800663e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006642:	bfda      	itte	le
 8006644:	f1c3 0320 	rsble	r3, r3, #32
 8006648:	fa06 f003 	lslle.w	r0, r6, r3
 800664c:	4318      	orrgt	r0, r3
 800664e:	f7f9 ff59 	bl	8000504 <__aeabi_ui2d>
 8006652:	2301      	movs	r3, #1
 8006654:	4606      	mov	r6, r0
 8006656:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800665a:	3d01      	subs	r5, #1
 800665c:	930e      	str	r3, [sp, #56]	; 0x38
 800665e:	e76a      	b.n	8006536 <_dtoa_r+0x116>
 8006660:	2301      	movs	r3, #1
 8006662:	e7b2      	b.n	80065ca <_dtoa_r+0x1aa>
 8006664:	900b      	str	r0, [sp, #44]	; 0x2c
 8006666:	e7b1      	b.n	80065cc <_dtoa_r+0x1ac>
 8006668:	9b04      	ldr	r3, [sp, #16]
 800666a:	9a00      	ldr	r2, [sp, #0]
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	4253      	negs	r3, r2
 8006672:	9307      	str	r3, [sp, #28]
 8006674:	2300      	movs	r3, #0
 8006676:	930a      	str	r3, [sp, #40]	; 0x28
 8006678:	e7bf      	b.n	80065fa <_dtoa_r+0x1da>
 800667a:	2300      	movs	r3, #0
 800667c:	9308      	str	r3, [sp, #32]
 800667e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc55      	bgt.n	8006730 <_dtoa_r+0x310>
 8006684:	2301      	movs	r3, #1
 8006686:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800668a:	461a      	mov	r2, r3
 800668c:	9209      	str	r2, [sp, #36]	; 0x24
 800668e:	e00c      	b.n	80066aa <_dtoa_r+0x28a>
 8006690:	2301      	movs	r3, #1
 8006692:	e7f3      	b.n	800667c <_dtoa_r+0x25c>
 8006694:	2300      	movs	r3, #0
 8006696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	4413      	add	r3, r2
 800669e:	9302      	str	r3, [sp, #8]
 80066a0:	3301      	adds	r3, #1
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	9303      	str	r3, [sp, #12]
 80066a6:	bfb8      	it	lt
 80066a8:	2301      	movlt	r3, #1
 80066aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066ac:	2200      	movs	r2, #0
 80066ae:	6042      	str	r2, [r0, #4]
 80066b0:	2204      	movs	r2, #4
 80066b2:	f102 0614 	add.w	r6, r2, #20
 80066b6:	429e      	cmp	r6, r3
 80066b8:	6841      	ldr	r1, [r0, #4]
 80066ba:	d93d      	bls.n	8006738 <_dtoa_r+0x318>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 fcbb 	bl	8007038 <_Balloc>
 80066c2:	9001      	str	r0, [sp, #4]
 80066c4:	2800      	cmp	r0, #0
 80066c6:	d13b      	bne.n	8006740 <_dtoa_r+0x320>
 80066c8:	4b11      	ldr	r3, [pc, #68]	; (8006710 <_dtoa_r+0x2f0>)
 80066ca:	4602      	mov	r2, r0
 80066cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066d0:	e6c0      	b.n	8006454 <_dtoa_r+0x34>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e7df      	b.n	8006696 <_dtoa_r+0x276>
 80066d6:	bf00      	nop
 80066d8:	636f4361 	.word	0x636f4361
 80066dc:	3fd287a7 	.word	0x3fd287a7
 80066e0:	8b60c8b3 	.word	0x8b60c8b3
 80066e4:	3fc68a28 	.word	0x3fc68a28
 80066e8:	509f79fb 	.word	0x509f79fb
 80066ec:	3fd34413 	.word	0x3fd34413
 80066f0:	0800b5bc 	.word	0x0800b5bc
 80066f4:	0800b63e 	.word	0x0800b63e
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	0800b638 	.word	0x0800b638
 8006700:	0800b62f 	.word	0x0800b62f
 8006704:	0800b63d 	.word	0x0800b63d
 8006708:	3ff80000 	.word	0x3ff80000
 800670c:	0800b738 	.word	0x0800b738
 8006710:	0800b699 	.word	0x0800b699
 8006714:	2501      	movs	r5, #1
 8006716:	2300      	movs	r3, #0
 8006718:	9306      	str	r3, [sp, #24]
 800671a:	9508      	str	r5, [sp, #32]
 800671c:	f04f 33ff 	mov.w	r3, #4294967295
 8006720:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	2312      	movs	r3, #18
 8006728:	e7b0      	b.n	800668c <_dtoa_r+0x26c>
 800672a:	2301      	movs	r3, #1
 800672c:	9308      	str	r3, [sp, #32]
 800672e:	e7f5      	b.n	800671c <_dtoa_r+0x2fc>
 8006730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006732:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006736:	e7b8      	b.n	80066aa <_dtoa_r+0x28a>
 8006738:	3101      	adds	r1, #1
 800673a:	6041      	str	r1, [r0, #4]
 800673c:	0052      	lsls	r2, r2, #1
 800673e:	e7b8      	b.n	80066b2 <_dtoa_r+0x292>
 8006740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006742:	9a01      	ldr	r2, [sp, #4]
 8006744:	601a      	str	r2, [r3, #0]
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	2b0e      	cmp	r3, #14
 800674a:	f200 809d 	bhi.w	8006888 <_dtoa_r+0x468>
 800674e:	2d00      	cmp	r5, #0
 8006750:	f000 809a 	beq.w	8006888 <_dtoa_r+0x468>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	dd32      	ble.n	80067c0 <_dtoa_r+0x3a0>
 800675a:	4ab7      	ldr	r2, [pc, #732]	; (8006a38 <_dtoa_r+0x618>)
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006764:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006768:	9b00      	ldr	r3, [sp, #0]
 800676a:	05d8      	lsls	r0, r3, #23
 800676c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006770:	d516      	bpl.n	80067a0 <_dtoa_r+0x380>
 8006772:	4bb2      	ldr	r3, [pc, #712]	; (8006a3c <_dtoa_r+0x61c>)
 8006774:	ec51 0b19 	vmov	r0, r1, d9
 8006778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800677c:	f7fa f866 	bl	800084c <__aeabi_ddiv>
 8006780:	f007 070f 	and.w	r7, r7, #15
 8006784:	4682      	mov	sl, r0
 8006786:	468b      	mov	fp, r1
 8006788:	2503      	movs	r5, #3
 800678a:	4eac      	ldr	r6, [pc, #688]	; (8006a3c <_dtoa_r+0x61c>)
 800678c:	b957      	cbnz	r7, 80067a4 <_dtoa_r+0x384>
 800678e:	4642      	mov	r2, r8
 8006790:	464b      	mov	r3, r9
 8006792:	4650      	mov	r0, sl
 8006794:	4659      	mov	r1, fp
 8006796:	f7fa f859 	bl	800084c <__aeabi_ddiv>
 800679a:	4682      	mov	sl, r0
 800679c:	468b      	mov	fp, r1
 800679e:	e028      	b.n	80067f2 <_dtoa_r+0x3d2>
 80067a0:	2502      	movs	r5, #2
 80067a2:	e7f2      	b.n	800678a <_dtoa_r+0x36a>
 80067a4:	07f9      	lsls	r1, r7, #31
 80067a6:	d508      	bpl.n	80067ba <_dtoa_r+0x39a>
 80067a8:	4640      	mov	r0, r8
 80067aa:	4649      	mov	r1, r9
 80067ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067b0:	f7f9 ff22 	bl	80005f8 <__aeabi_dmul>
 80067b4:	3501      	adds	r5, #1
 80067b6:	4680      	mov	r8, r0
 80067b8:	4689      	mov	r9, r1
 80067ba:	107f      	asrs	r7, r7, #1
 80067bc:	3608      	adds	r6, #8
 80067be:	e7e5      	b.n	800678c <_dtoa_r+0x36c>
 80067c0:	f000 809b 	beq.w	80068fa <_dtoa_r+0x4da>
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	4f9d      	ldr	r7, [pc, #628]	; (8006a3c <_dtoa_r+0x61c>)
 80067c8:	425e      	negs	r6, r3
 80067ca:	4b9b      	ldr	r3, [pc, #620]	; (8006a38 <_dtoa_r+0x618>)
 80067cc:	f006 020f 	and.w	r2, r6, #15
 80067d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d8:	ec51 0b19 	vmov	r0, r1, d9
 80067dc:	f7f9 ff0c 	bl	80005f8 <__aeabi_dmul>
 80067e0:	1136      	asrs	r6, r6, #4
 80067e2:	4682      	mov	sl, r0
 80067e4:	468b      	mov	fp, r1
 80067e6:	2300      	movs	r3, #0
 80067e8:	2502      	movs	r5, #2
 80067ea:	2e00      	cmp	r6, #0
 80067ec:	d17a      	bne.n	80068e4 <_dtoa_r+0x4c4>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d3      	bne.n	800679a <_dtoa_r+0x37a>
 80067f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8082 	beq.w	80068fe <_dtoa_r+0x4de>
 80067fa:	4b91      	ldr	r3, [pc, #580]	; (8006a40 <_dtoa_r+0x620>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	4650      	mov	r0, sl
 8006800:	4659      	mov	r1, fp
 8006802:	f7fa f96b 	bl	8000adc <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	d079      	beq.n	80068fe <_dtoa_r+0x4de>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d076      	beq.n	80068fe <_dtoa_r+0x4de>
 8006810:	9b02      	ldr	r3, [sp, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	dd36      	ble.n	8006884 <_dtoa_r+0x464>
 8006816:	9b00      	ldr	r3, [sp, #0]
 8006818:	4650      	mov	r0, sl
 800681a:	4659      	mov	r1, fp
 800681c:	1e5f      	subs	r7, r3, #1
 800681e:	2200      	movs	r2, #0
 8006820:	4b88      	ldr	r3, [pc, #544]	; (8006a44 <_dtoa_r+0x624>)
 8006822:	f7f9 fee9 	bl	80005f8 <__aeabi_dmul>
 8006826:	9e02      	ldr	r6, [sp, #8]
 8006828:	4682      	mov	sl, r0
 800682a:	468b      	mov	fp, r1
 800682c:	3501      	adds	r5, #1
 800682e:	4628      	mov	r0, r5
 8006830:	f7f9 fe78 	bl	8000524 <__aeabi_i2d>
 8006834:	4652      	mov	r2, sl
 8006836:	465b      	mov	r3, fp
 8006838:	f7f9 fede 	bl	80005f8 <__aeabi_dmul>
 800683c:	4b82      	ldr	r3, [pc, #520]	; (8006a48 <_dtoa_r+0x628>)
 800683e:	2200      	movs	r2, #0
 8006840:	f7f9 fd24 	bl	800028c <__adddf3>
 8006844:	46d0      	mov	r8, sl
 8006846:	46d9      	mov	r9, fp
 8006848:	4682      	mov	sl, r0
 800684a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800684e:	2e00      	cmp	r6, #0
 8006850:	d158      	bne.n	8006904 <_dtoa_r+0x4e4>
 8006852:	4b7e      	ldr	r3, [pc, #504]	; (8006a4c <_dtoa_r+0x62c>)
 8006854:	2200      	movs	r2, #0
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7f9 fd15 	bl	8000288 <__aeabi_dsub>
 800685e:	4652      	mov	r2, sl
 8006860:	465b      	mov	r3, fp
 8006862:	4680      	mov	r8, r0
 8006864:	4689      	mov	r9, r1
 8006866:	f7fa f957 	bl	8000b18 <__aeabi_dcmpgt>
 800686a:	2800      	cmp	r0, #0
 800686c:	f040 8295 	bne.w	8006d9a <_dtoa_r+0x97a>
 8006870:	4652      	mov	r2, sl
 8006872:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006876:	4640      	mov	r0, r8
 8006878:	4649      	mov	r1, r9
 800687a:	f7fa f92f 	bl	8000adc <__aeabi_dcmplt>
 800687e:	2800      	cmp	r0, #0
 8006880:	f040 8289 	bne.w	8006d96 <_dtoa_r+0x976>
 8006884:	ec5b ab19 	vmov	sl, fp, d9
 8006888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800688a:	2b00      	cmp	r3, #0
 800688c:	f2c0 8148 	blt.w	8006b20 <_dtoa_r+0x700>
 8006890:	9a00      	ldr	r2, [sp, #0]
 8006892:	2a0e      	cmp	r2, #14
 8006894:	f300 8144 	bgt.w	8006b20 <_dtoa_r+0x700>
 8006898:	4b67      	ldr	r3, [pc, #412]	; (8006a38 <_dtoa_r+0x618>)
 800689a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800689e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f280 80d5 	bge.w	8006a54 <_dtoa_r+0x634>
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f300 80d1 	bgt.w	8006a54 <_dtoa_r+0x634>
 80068b2:	f040 826f 	bne.w	8006d94 <_dtoa_r+0x974>
 80068b6:	4b65      	ldr	r3, [pc, #404]	; (8006a4c <_dtoa_r+0x62c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	4640      	mov	r0, r8
 80068bc:	4649      	mov	r1, r9
 80068be:	f7f9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	f7fa f91d 	bl	8000b04 <__aeabi_dcmpge>
 80068ca:	9e03      	ldr	r6, [sp, #12]
 80068cc:	4637      	mov	r7, r6
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f040 8245 	bne.w	8006d5e <_dtoa_r+0x93e>
 80068d4:	9d01      	ldr	r5, [sp, #4]
 80068d6:	2331      	movs	r3, #49	; 0x31
 80068d8:	f805 3b01 	strb.w	r3, [r5], #1
 80068dc:	9b00      	ldr	r3, [sp, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	e240      	b.n	8006d66 <_dtoa_r+0x946>
 80068e4:	07f2      	lsls	r2, r6, #31
 80068e6:	d505      	bpl.n	80068f4 <_dtoa_r+0x4d4>
 80068e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ec:	f7f9 fe84 	bl	80005f8 <__aeabi_dmul>
 80068f0:	3501      	adds	r5, #1
 80068f2:	2301      	movs	r3, #1
 80068f4:	1076      	asrs	r6, r6, #1
 80068f6:	3708      	adds	r7, #8
 80068f8:	e777      	b.n	80067ea <_dtoa_r+0x3ca>
 80068fa:	2502      	movs	r5, #2
 80068fc:	e779      	b.n	80067f2 <_dtoa_r+0x3d2>
 80068fe:	9f00      	ldr	r7, [sp, #0]
 8006900:	9e03      	ldr	r6, [sp, #12]
 8006902:	e794      	b.n	800682e <_dtoa_r+0x40e>
 8006904:	9901      	ldr	r1, [sp, #4]
 8006906:	4b4c      	ldr	r3, [pc, #304]	; (8006a38 <_dtoa_r+0x618>)
 8006908:	4431      	add	r1, r6
 800690a:	910d      	str	r1, [sp, #52]	; 0x34
 800690c:	9908      	ldr	r1, [sp, #32]
 800690e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006916:	2900      	cmp	r1, #0
 8006918:	d043      	beq.n	80069a2 <_dtoa_r+0x582>
 800691a:	494d      	ldr	r1, [pc, #308]	; (8006a50 <_dtoa_r+0x630>)
 800691c:	2000      	movs	r0, #0
 800691e:	f7f9 ff95 	bl	800084c <__aeabi_ddiv>
 8006922:	4652      	mov	r2, sl
 8006924:	465b      	mov	r3, fp
 8006926:	f7f9 fcaf 	bl	8000288 <__aeabi_dsub>
 800692a:	9d01      	ldr	r5, [sp, #4]
 800692c:	4682      	mov	sl, r0
 800692e:	468b      	mov	fp, r1
 8006930:	4649      	mov	r1, r9
 8006932:	4640      	mov	r0, r8
 8006934:	f7fa f910 	bl	8000b58 <__aeabi_d2iz>
 8006938:	4606      	mov	r6, r0
 800693a:	f7f9 fdf3 	bl	8000524 <__aeabi_i2d>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fc9f 	bl	8000288 <__aeabi_dsub>
 800694a:	3630      	adds	r6, #48	; 0x30
 800694c:	f805 6b01 	strb.w	r6, [r5], #1
 8006950:	4652      	mov	r2, sl
 8006952:	465b      	mov	r3, fp
 8006954:	4680      	mov	r8, r0
 8006956:	4689      	mov	r9, r1
 8006958:	f7fa f8c0 	bl	8000adc <__aeabi_dcmplt>
 800695c:	2800      	cmp	r0, #0
 800695e:	d163      	bne.n	8006a28 <_dtoa_r+0x608>
 8006960:	4642      	mov	r2, r8
 8006962:	464b      	mov	r3, r9
 8006964:	4936      	ldr	r1, [pc, #216]	; (8006a40 <_dtoa_r+0x620>)
 8006966:	2000      	movs	r0, #0
 8006968:	f7f9 fc8e 	bl	8000288 <__aeabi_dsub>
 800696c:	4652      	mov	r2, sl
 800696e:	465b      	mov	r3, fp
 8006970:	f7fa f8b4 	bl	8000adc <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	f040 80b5 	bne.w	8006ae4 <_dtoa_r+0x6c4>
 800697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697c:	429d      	cmp	r5, r3
 800697e:	d081      	beq.n	8006884 <_dtoa_r+0x464>
 8006980:	4b30      	ldr	r3, [pc, #192]	; (8006a44 <_dtoa_r+0x624>)
 8006982:	2200      	movs	r2, #0
 8006984:	4650      	mov	r0, sl
 8006986:	4659      	mov	r1, fp
 8006988:	f7f9 fe36 	bl	80005f8 <__aeabi_dmul>
 800698c:	4b2d      	ldr	r3, [pc, #180]	; (8006a44 <_dtoa_r+0x624>)
 800698e:	4682      	mov	sl, r0
 8006990:	468b      	mov	fp, r1
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	2200      	movs	r2, #0
 8006998:	f7f9 fe2e 	bl	80005f8 <__aeabi_dmul>
 800699c:	4680      	mov	r8, r0
 800699e:	4689      	mov	r9, r1
 80069a0:	e7c6      	b.n	8006930 <_dtoa_r+0x510>
 80069a2:	4650      	mov	r0, sl
 80069a4:	4659      	mov	r1, fp
 80069a6:	f7f9 fe27 	bl	80005f8 <__aeabi_dmul>
 80069aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ac:	9d01      	ldr	r5, [sp, #4]
 80069ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80069b0:	4682      	mov	sl, r0
 80069b2:	468b      	mov	fp, r1
 80069b4:	4649      	mov	r1, r9
 80069b6:	4640      	mov	r0, r8
 80069b8:	f7fa f8ce 	bl	8000b58 <__aeabi_d2iz>
 80069bc:	4606      	mov	r6, r0
 80069be:	f7f9 fdb1 	bl	8000524 <__aeabi_i2d>
 80069c2:	3630      	adds	r6, #48	; 0x30
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4640      	mov	r0, r8
 80069ca:	4649      	mov	r1, r9
 80069cc:	f7f9 fc5c 	bl	8000288 <__aeabi_dsub>
 80069d0:	f805 6b01 	strb.w	r6, [r5], #1
 80069d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069d6:	429d      	cmp	r5, r3
 80069d8:	4680      	mov	r8, r0
 80069da:	4689      	mov	r9, r1
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	d124      	bne.n	8006a2c <_dtoa_r+0x60c>
 80069e2:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <_dtoa_r+0x630>)
 80069e4:	4650      	mov	r0, sl
 80069e6:	4659      	mov	r1, fp
 80069e8:	f7f9 fc50 	bl	800028c <__adddf3>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4640      	mov	r0, r8
 80069f2:	4649      	mov	r1, r9
 80069f4:	f7fa f890 	bl	8000b18 <__aeabi_dcmpgt>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d173      	bne.n	8006ae4 <_dtoa_r+0x6c4>
 80069fc:	4652      	mov	r2, sl
 80069fe:	465b      	mov	r3, fp
 8006a00:	4913      	ldr	r1, [pc, #76]	; (8006a50 <_dtoa_r+0x630>)
 8006a02:	2000      	movs	r0, #0
 8006a04:	f7f9 fc40 	bl	8000288 <__aeabi_dsub>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	4649      	mov	r1, r9
 8006a10:	f7fa f864 	bl	8000adc <__aeabi_dcmplt>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	f43f af35 	beq.w	8006884 <_dtoa_r+0x464>
 8006a1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a1c:	1e6b      	subs	r3, r5, #1
 8006a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a24:	2b30      	cmp	r3, #48	; 0x30
 8006a26:	d0f8      	beq.n	8006a1a <_dtoa_r+0x5fa>
 8006a28:	9700      	str	r7, [sp, #0]
 8006a2a:	e049      	b.n	8006ac0 <_dtoa_r+0x6a0>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <_dtoa_r+0x624>)
 8006a2e:	f7f9 fde3 	bl	80005f8 <__aeabi_dmul>
 8006a32:	4680      	mov	r8, r0
 8006a34:	4689      	mov	r9, r1
 8006a36:	e7bd      	b.n	80069b4 <_dtoa_r+0x594>
 8006a38:	0800b738 	.word	0x0800b738
 8006a3c:	0800b710 	.word	0x0800b710
 8006a40:	3ff00000 	.word	0x3ff00000
 8006a44:	40240000 	.word	0x40240000
 8006a48:	401c0000 	.word	0x401c0000
 8006a4c:	40140000 	.word	0x40140000
 8006a50:	3fe00000 	.word	0x3fe00000
 8006a54:	9d01      	ldr	r5, [sp, #4]
 8006a56:	4656      	mov	r6, sl
 8006a58:	465f      	mov	r7, fp
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	4630      	mov	r0, r6
 8006a60:	4639      	mov	r1, r7
 8006a62:	f7f9 fef3 	bl	800084c <__aeabi_ddiv>
 8006a66:	f7fa f877 	bl	8000b58 <__aeabi_d2iz>
 8006a6a:	4682      	mov	sl, r0
 8006a6c:	f7f9 fd5a 	bl	8000524 <__aeabi_i2d>
 8006a70:	4642      	mov	r2, r8
 8006a72:	464b      	mov	r3, r9
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	4639      	mov	r1, r7
 8006a80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a84:	f7f9 fc00 	bl	8000288 <__aeabi_dsub>
 8006a88:	f805 6b01 	strb.w	r6, [r5], #1
 8006a8c:	9e01      	ldr	r6, [sp, #4]
 8006a8e:	9f03      	ldr	r7, [sp, #12]
 8006a90:	1bae      	subs	r6, r5, r6
 8006a92:	42b7      	cmp	r7, r6
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	d135      	bne.n	8006b06 <_dtoa_r+0x6e6>
 8006a9a:	f7f9 fbf7 	bl	800028c <__adddf3>
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	464b      	mov	r3, r9
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	460f      	mov	r7, r1
 8006aa6:	f7fa f837 	bl	8000b18 <__aeabi_dcmpgt>
 8006aaa:	b9d0      	cbnz	r0, 8006ae2 <_dtoa_r+0x6c2>
 8006aac:	4642      	mov	r2, r8
 8006aae:	464b      	mov	r3, r9
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7fa f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ab8:	b110      	cbz	r0, 8006ac0 <_dtoa_r+0x6a0>
 8006aba:	f01a 0f01 	tst.w	sl, #1
 8006abe:	d110      	bne.n	8006ae2 <_dtoa_r+0x6c2>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	ee18 1a10 	vmov	r1, s16
 8006ac6:	f000 faf7 	bl	80070b8 <_Bfree>
 8006aca:	2300      	movs	r3, #0
 8006acc:	9800      	ldr	r0, [sp, #0]
 8006ace:	702b      	strb	r3, [r5, #0]
 8006ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	6018      	str	r0, [r3, #0]
 8006ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f43f acf1 	beq.w	80064c0 <_dtoa_r+0xa0>
 8006ade:	601d      	str	r5, [r3, #0]
 8006ae0:	e4ee      	b.n	80064c0 <_dtoa_r+0xa0>
 8006ae2:	9f00      	ldr	r7, [sp, #0]
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aec:	2a39      	cmp	r2, #57	; 0x39
 8006aee:	d106      	bne.n	8006afe <_dtoa_r+0x6de>
 8006af0:	9a01      	ldr	r2, [sp, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d1f7      	bne.n	8006ae6 <_dtoa_r+0x6c6>
 8006af6:	9901      	ldr	r1, [sp, #4]
 8006af8:	2230      	movs	r2, #48	; 0x30
 8006afa:	3701      	adds	r7, #1
 8006afc:	700a      	strb	r2, [r1, #0]
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	3201      	adds	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	e790      	b.n	8006a28 <_dtoa_r+0x608>
 8006b06:	4ba6      	ldr	r3, [pc, #664]	; (8006da0 <_dtoa_r+0x980>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7f9 fd75 	bl	80005f8 <__aeabi_dmul>
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2300      	movs	r3, #0
 8006b12:	4606      	mov	r6, r0
 8006b14:	460f      	mov	r7, r1
 8006b16:	f7f9 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d09d      	beq.n	8006a5a <_dtoa_r+0x63a>
 8006b1e:	e7cf      	b.n	8006ac0 <_dtoa_r+0x6a0>
 8006b20:	9a08      	ldr	r2, [sp, #32]
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	f000 80d7 	beq.w	8006cd6 <_dtoa_r+0x8b6>
 8006b28:	9a06      	ldr	r2, [sp, #24]
 8006b2a:	2a01      	cmp	r2, #1
 8006b2c:	f300 80ba 	bgt.w	8006ca4 <_dtoa_r+0x884>
 8006b30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b32:	2a00      	cmp	r2, #0
 8006b34:	f000 80b2 	beq.w	8006c9c <_dtoa_r+0x87c>
 8006b38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b3c:	9e07      	ldr	r6, [sp, #28]
 8006b3e:	9d04      	ldr	r5, [sp, #16]
 8006b40:	9a04      	ldr	r2, [sp, #16]
 8006b42:	441a      	add	r2, r3
 8006b44:	9204      	str	r2, [sp, #16]
 8006b46:	9a05      	ldr	r2, [sp, #20]
 8006b48:	2101      	movs	r1, #1
 8006b4a:	441a      	add	r2, r3
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	9205      	str	r2, [sp, #20]
 8006b50:	f000 fb6a 	bl	8007228 <__i2b>
 8006b54:	4607      	mov	r7, r0
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	dd0c      	ble.n	8006b74 <_dtoa_r+0x754>
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dd09      	ble.n	8006b74 <_dtoa_r+0x754>
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	bfa8      	it	ge
 8006b66:	462b      	movge	r3, r5
 8006b68:	1ad2      	subs	r2, r2, r3
 8006b6a:	9204      	str	r2, [sp, #16]
 8006b6c:	9a05      	ldr	r2, [sp, #20]
 8006b6e:	1aed      	subs	r5, r5, r3
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	9305      	str	r3, [sp, #20]
 8006b74:	9b07      	ldr	r3, [sp, #28]
 8006b76:	b31b      	cbz	r3, 8006bc0 <_dtoa_r+0x7a0>
 8006b78:	9b08      	ldr	r3, [sp, #32]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80af 	beq.w	8006cde <_dtoa_r+0x8be>
 8006b80:	2e00      	cmp	r6, #0
 8006b82:	dd13      	ble.n	8006bac <_dtoa_r+0x78c>
 8006b84:	4639      	mov	r1, r7
 8006b86:	4632      	mov	r2, r6
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fc0d 	bl	80073a8 <__pow5mult>
 8006b8e:	ee18 2a10 	vmov	r2, s16
 8006b92:	4601      	mov	r1, r0
 8006b94:	4607      	mov	r7, r0
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fb5c 	bl	8007254 <__multiply>
 8006b9c:	ee18 1a10 	vmov	r1, s16
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fa88 	bl	80070b8 <_Bfree>
 8006ba8:	ee08 8a10 	vmov	s16, r8
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	1b9a      	subs	r2, r3, r6
 8006bb0:	d006      	beq.n	8006bc0 <_dtoa_r+0x7a0>
 8006bb2:	ee18 1a10 	vmov	r1, s16
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 fbf6 	bl	80073a8 <__pow5mult>
 8006bbc:	ee08 0a10 	vmov	s16, r0
 8006bc0:	2101      	movs	r1, #1
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f000 fb30 	bl	8007228 <__i2b>
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	4606      	mov	r6, r0
 8006bce:	f340 8088 	ble.w	8006ce2 <_dtoa_r+0x8c2>
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4601      	mov	r1, r0
 8006bd6:	4620      	mov	r0, r4
 8006bd8:	f000 fbe6 	bl	80073a8 <__pow5mult>
 8006bdc:	9b06      	ldr	r3, [sp, #24]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	4606      	mov	r6, r0
 8006be2:	f340 8081 	ble.w	8006ce8 <_dtoa_r+0x8c8>
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	6933      	ldr	r3, [r6, #16]
 8006bec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bf0:	6918      	ldr	r0, [r3, #16]
 8006bf2:	f000 fac9 	bl	8007188 <__hi0bits>
 8006bf6:	f1c0 0020 	rsb	r0, r0, #32
 8006bfa:	9b05      	ldr	r3, [sp, #20]
 8006bfc:	4418      	add	r0, r3
 8006bfe:	f010 001f 	ands.w	r0, r0, #31
 8006c02:	f000 8092 	beq.w	8006d2a <_dtoa_r+0x90a>
 8006c06:	f1c0 0320 	rsb	r3, r0, #32
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	f340 808a 	ble.w	8006d24 <_dtoa_r+0x904>
 8006c10:	f1c0 001c 	rsb	r0, r0, #28
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	4403      	add	r3, r0
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	4403      	add	r3, r0
 8006c1e:	4405      	add	r5, r0
 8006c20:	9305      	str	r3, [sp, #20]
 8006c22:	9b04      	ldr	r3, [sp, #16]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	dd07      	ble.n	8006c38 <_dtoa_r+0x818>
 8006c28:	ee18 1a10 	vmov	r1, s16
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 fc14 	bl	800745c <__lshift>
 8006c34:	ee08 0a10 	vmov	s16, r0
 8006c38:	9b05      	ldr	r3, [sp, #20]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	dd05      	ble.n	8006c4a <_dtoa_r+0x82a>
 8006c3e:	4631      	mov	r1, r6
 8006c40:	461a      	mov	r2, r3
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 fc0a 	bl	800745c <__lshift>
 8006c48:	4606      	mov	r6, r0
 8006c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d06e      	beq.n	8006d2e <_dtoa_r+0x90e>
 8006c50:	ee18 0a10 	vmov	r0, s16
 8006c54:	4631      	mov	r1, r6
 8006c56:	f000 fc71 	bl	800753c <__mcmp>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	da67      	bge.n	8006d2e <_dtoa_r+0x90e>
 8006c5e:	9b00      	ldr	r3, [sp, #0]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	ee18 1a10 	vmov	r1, s16
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	220a      	movs	r2, #10
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 fa45 	bl	80070fc <__multadd>
 8006c72:	9b08      	ldr	r3, [sp, #32]
 8006c74:	ee08 0a10 	vmov	s16, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 81b1 	beq.w	8006fe0 <_dtoa_r+0xbc0>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4639      	mov	r1, r7
 8006c82:	220a      	movs	r2, #10
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fa39 	bl	80070fc <__multadd>
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	4607      	mov	r7, r0
 8006c90:	f300 808e 	bgt.w	8006db0 <_dtoa_r+0x990>
 8006c94:	9b06      	ldr	r3, [sp, #24]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	dc51      	bgt.n	8006d3e <_dtoa_r+0x91e>
 8006c9a:	e089      	b.n	8006db0 <_dtoa_r+0x990>
 8006c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ca2:	e74b      	b.n	8006b3c <_dtoa_r+0x71c>
 8006ca4:	9b03      	ldr	r3, [sp, #12]
 8006ca6:	1e5e      	subs	r6, r3, #1
 8006ca8:	9b07      	ldr	r3, [sp, #28]
 8006caa:	42b3      	cmp	r3, r6
 8006cac:	bfbf      	itttt	lt
 8006cae:	9b07      	ldrlt	r3, [sp, #28]
 8006cb0:	9607      	strlt	r6, [sp, #28]
 8006cb2:	1af2      	sublt	r2, r6, r3
 8006cb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cb6:	bfb6      	itet	lt
 8006cb8:	189b      	addlt	r3, r3, r2
 8006cba:	1b9e      	subge	r6, r3, r6
 8006cbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	bfb8      	it	lt
 8006cc2:	2600      	movlt	r6, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfb7      	itett	lt
 8006cc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ccc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006cd0:	1a9d      	sublt	r5, r3, r2
 8006cd2:	2300      	movlt	r3, #0
 8006cd4:	e734      	b.n	8006b40 <_dtoa_r+0x720>
 8006cd6:	9e07      	ldr	r6, [sp, #28]
 8006cd8:	9d04      	ldr	r5, [sp, #16]
 8006cda:	9f08      	ldr	r7, [sp, #32]
 8006cdc:	e73b      	b.n	8006b56 <_dtoa_r+0x736>
 8006cde:	9a07      	ldr	r2, [sp, #28]
 8006ce0:	e767      	b.n	8006bb2 <_dtoa_r+0x792>
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	dc18      	bgt.n	8006d1a <_dtoa_r+0x8fa>
 8006ce8:	f1ba 0f00 	cmp.w	sl, #0
 8006cec:	d115      	bne.n	8006d1a <_dtoa_r+0x8fa>
 8006cee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cf2:	b993      	cbnz	r3, 8006d1a <_dtoa_r+0x8fa>
 8006cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cf8:	0d1b      	lsrs	r3, r3, #20
 8006cfa:	051b      	lsls	r3, r3, #20
 8006cfc:	b183      	cbz	r3, 8006d20 <_dtoa_r+0x900>
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	3301      	adds	r3, #1
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	9b05      	ldr	r3, [sp, #20]
 8006d06:	3301      	adds	r3, #1
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	f04f 0801 	mov.w	r8, #1
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f47f af6a 	bne.w	8006bea <_dtoa_r+0x7ca>
 8006d16:	2001      	movs	r0, #1
 8006d18:	e76f      	b.n	8006bfa <_dtoa_r+0x7da>
 8006d1a:	f04f 0800 	mov.w	r8, #0
 8006d1e:	e7f6      	b.n	8006d0e <_dtoa_r+0x8ee>
 8006d20:	4698      	mov	r8, r3
 8006d22:	e7f4      	b.n	8006d0e <_dtoa_r+0x8ee>
 8006d24:	f43f af7d 	beq.w	8006c22 <_dtoa_r+0x802>
 8006d28:	4618      	mov	r0, r3
 8006d2a:	301c      	adds	r0, #28
 8006d2c:	e772      	b.n	8006c14 <_dtoa_r+0x7f4>
 8006d2e:	9b03      	ldr	r3, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	dc37      	bgt.n	8006da4 <_dtoa_r+0x984>
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	dd34      	ble.n	8006da4 <_dtoa_r+0x984>
 8006d3a:	9b03      	ldr	r3, [sp, #12]
 8006d3c:	9302      	str	r3, [sp, #8]
 8006d3e:	9b02      	ldr	r3, [sp, #8]
 8006d40:	b96b      	cbnz	r3, 8006d5e <_dtoa_r+0x93e>
 8006d42:	4631      	mov	r1, r6
 8006d44:	2205      	movs	r2, #5
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f9d8 	bl	80070fc <__multadd>
 8006d4c:	4601      	mov	r1, r0
 8006d4e:	4606      	mov	r6, r0
 8006d50:	ee18 0a10 	vmov	r0, s16
 8006d54:	f000 fbf2 	bl	800753c <__mcmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	f73f adbb 	bgt.w	80068d4 <_dtoa_r+0x4b4>
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	9d01      	ldr	r5, [sp, #4]
 8006d62:	43db      	mvns	r3, r3
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	f04f 0800 	mov.w	r8, #0
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 f9a3 	bl	80070b8 <_Bfree>
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	f43f aea4 	beq.w	8006ac0 <_dtoa_r+0x6a0>
 8006d78:	f1b8 0f00 	cmp.w	r8, #0
 8006d7c:	d005      	beq.n	8006d8a <_dtoa_r+0x96a>
 8006d7e:	45b8      	cmp	r8, r7
 8006d80:	d003      	beq.n	8006d8a <_dtoa_r+0x96a>
 8006d82:	4641      	mov	r1, r8
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 f997 	bl	80070b8 <_Bfree>
 8006d8a:	4639      	mov	r1, r7
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 f993 	bl	80070b8 <_Bfree>
 8006d92:	e695      	b.n	8006ac0 <_dtoa_r+0x6a0>
 8006d94:	2600      	movs	r6, #0
 8006d96:	4637      	mov	r7, r6
 8006d98:	e7e1      	b.n	8006d5e <_dtoa_r+0x93e>
 8006d9a:	9700      	str	r7, [sp, #0]
 8006d9c:	4637      	mov	r7, r6
 8006d9e:	e599      	b.n	80068d4 <_dtoa_r+0x4b4>
 8006da0:	40240000 	.word	0x40240000
 8006da4:	9b08      	ldr	r3, [sp, #32]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 80ca 	beq.w	8006f40 <_dtoa_r+0xb20>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	9302      	str	r3, [sp, #8]
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	dd05      	ble.n	8006dc0 <_dtoa_r+0x9a0>
 8006db4:	4639      	mov	r1, r7
 8006db6:	462a      	mov	r2, r5
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 fb4f 	bl	800745c <__lshift>
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	f1b8 0f00 	cmp.w	r8, #0
 8006dc4:	d05b      	beq.n	8006e7e <_dtoa_r+0xa5e>
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f000 f935 	bl	8007038 <_Balloc>
 8006dce:	4605      	mov	r5, r0
 8006dd0:	b928      	cbnz	r0, 8006dde <_dtoa_r+0x9be>
 8006dd2:	4b87      	ldr	r3, [pc, #540]	; (8006ff0 <_dtoa_r+0xbd0>)
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006dda:	f7ff bb3b 	b.w	8006454 <_dtoa_r+0x34>
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	3202      	adds	r2, #2
 8006de2:	0092      	lsls	r2, r2, #2
 8006de4:	f107 010c 	add.w	r1, r7, #12
 8006de8:	300c      	adds	r0, #12
 8006dea:	f7fe fa4f 	bl	800528c <memcpy>
 8006dee:	2201      	movs	r2, #1
 8006df0:	4629      	mov	r1, r5
 8006df2:	4620      	mov	r0, r4
 8006df4:	f000 fb32 	bl	800745c <__lshift>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	f103 0901 	add.w	r9, r3, #1
 8006dfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	9305      	str	r3, [sp, #20]
 8006e06:	f00a 0301 	and.w	r3, sl, #1
 8006e0a:	46b8      	mov	r8, r7
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	4607      	mov	r7, r0
 8006e10:	4631      	mov	r1, r6
 8006e12:	ee18 0a10 	vmov	r0, s16
 8006e16:	f7ff fa77 	bl	8006308 <quorem>
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	9002      	str	r0, [sp, #8]
 8006e1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e22:	ee18 0a10 	vmov	r0, s16
 8006e26:	f000 fb89 	bl	800753c <__mcmp>
 8006e2a:	463a      	mov	r2, r7
 8006e2c:	9003      	str	r0, [sp, #12]
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fb9f 	bl	8007574 <__mdiff>
 8006e36:	68c2      	ldr	r2, [r0, #12]
 8006e38:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	bb02      	cbnz	r2, 8006e82 <_dtoa_r+0xa62>
 8006e40:	4601      	mov	r1, r0
 8006e42:	ee18 0a10 	vmov	r0, s16
 8006e46:	f000 fb79 	bl	800753c <__mcmp>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	4620      	mov	r0, r4
 8006e50:	9207      	str	r2, [sp, #28]
 8006e52:	f000 f931 	bl	80070b8 <_Bfree>
 8006e56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e5a:	ea43 0102 	orr.w	r1, r3, r2
 8006e5e:	9b04      	ldr	r3, [sp, #16]
 8006e60:	430b      	orrs	r3, r1
 8006e62:	464d      	mov	r5, r9
 8006e64:	d10f      	bne.n	8006e86 <_dtoa_r+0xa66>
 8006e66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e6a:	d02a      	beq.n	8006ec2 <_dtoa_r+0xaa2>
 8006e6c:	9b03      	ldr	r3, [sp, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	dd02      	ble.n	8006e78 <_dtoa_r+0xa58>
 8006e72:	9b02      	ldr	r3, [sp, #8]
 8006e74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e78:	f88b a000 	strb.w	sl, [fp]
 8006e7c:	e775      	b.n	8006d6a <_dtoa_r+0x94a>
 8006e7e:	4638      	mov	r0, r7
 8006e80:	e7ba      	b.n	8006df8 <_dtoa_r+0x9d8>
 8006e82:	2201      	movs	r2, #1
 8006e84:	e7e2      	b.n	8006e4c <_dtoa_r+0xa2c>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	db04      	blt.n	8006e96 <_dtoa_r+0xa76>
 8006e8c:	9906      	ldr	r1, [sp, #24]
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	9904      	ldr	r1, [sp, #16]
 8006e92:	430b      	orrs	r3, r1
 8006e94:	d122      	bne.n	8006edc <_dtoa_r+0xabc>
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	ddee      	ble.n	8006e78 <_dtoa_r+0xa58>
 8006e9a:	ee18 1a10 	vmov	r1, s16
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fadb 	bl	800745c <__lshift>
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	ee08 0a10 	vmov	s16, r0
 8006eac:	f000 fb46 	bl	800753c <__mcmp>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	dc03      	bgt.n	8006ebc <_dtoa_r+0xa9c>
 8006eb4:	d1e0      	bne.n	8006e78 <_dtoa_r+0xa58>
 8006eb6:	f01a 0f01 	tst.w	sl, #1
 8006eba:	d0dd      	beq.n	8006e78 <_dtoa_r+0xa58>
 8006ebc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ec0:	d1d7      	bne.n	8006e72 <_dtoa_r+0xa52>
 8006ec2:	2339      	movs	r3, #57	; 0x39
 8006ec4:	f88b 3000 	strb.w	r3, [fp]
 8006ec8:	462b      	mov	r3, r5
 8006eca:	461d      	mov	r5, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ed2:	2a39      	cmp	r2, #57	; 0x39
 8006ed4:	d071      	beq.n	8006fba <_dtoa_r+0xb9a>
 8006ed6:	3201      	adds	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e746      	b.n	8006d6a <_dtoa_r+0x94a>
 8006edc:	2a00      	cmp	r2, #0
 8006ede:	dd07      	ble.n	8006ef0 <_dtoa_r+0xad0>
 8006ee0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ee4:	d0ed      	beq.n	8006ec2 <_dtoa_r+0xaa2>
 8006ee6:	f10a 0301 	add.w	r3, sl, #1
 8006eea:	f88b 3000 	strb.w	r3, [fp]
 8006eee:	e73c      	b.n	8006d6a <_dtoa_r+0x94a>
 8006ef0:	9b05      	ldr	r3, [sp, #20]
 8006ef2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006ef6:	4599      	cmp	r9, r3
 8006ef8:	d047      	beq.n	8006f8a <_dtoa_r+0xb6a>
 8006efa:	ee18 1a10 	vmov	r1, s16
 8006efe:	2300      	movs	r3, #0
 8006f00:	220a      	movs	r2, #10
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 f8fa 	bl	80070fc <__multadd>
 8006f08:	45b8      	cmp	r8, r7
 8006f0a:	ee08 0a10 	vmov	s16, r0
 8006f0e:	f04f 0300 	mov.w	r3, #0
 8006f12:	f04f 020a 	mov.w	r2, #10
 8006f16:	4641      	mov	r1, r8
 8006f18:	4620      	mov	r0, r4
 8006f1a:	d106      	bne.n	8006f2a <_dtoa_r+0xb0a>
 8006f1c:	f000 f8ee 	bl	80070fc <__multadd>
 8006f20:	4680      	mov	r8, r0
 8006f22:	4607      	mov	r7, r0
 8006f24:	f109 0901 	add.w	r9, r9, #1
 8006f28:	e772      	b.n	8006e10 <_dtoa_r+0x9f0>
 8006f2a:	f000 f8e7 	bl	80070fc <__multadd>
 8006f2e:	4639      	mov	r1, r7
 8006f30:	4680      	mov	r8, r0
 8006f32:	2300      	movs	r3, #0
 8006f34:	220a      	movs	r2, #10
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f8e0 	bl	80070fc <__multadd>
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	e7f1      	b.n	8006f24 <_dtoa_r+0xb04>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	9302      	str	r3, [sp, #8]
 8006f44:	9d01      	ldr	r5, [sp, #4]
 8006f46:	ee18 0a10 	vmov	r0, s16
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	f7ff f9dc 	bl	8006308 <quorem>
 8006f50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	f805 ab01 	strb.w	sl, [r5], #1
 8006f5a:	1aea      	subs	r2, r5, r3
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	dd09      	ble.n	8006f76 <_dtoa_r+0xb56>
 8006f62:	ee18 1a10 	vmov	r1, s16
 8006f66:	2300      	movs	r3, #0
 8006f68:	220a      	movs	r2, #10
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 f8c6 	bl	80070fc <__multadd>
 8006f70:	ee08 0a10 	vmov	s16, r0
 8006f74:	e7e7      	b.n	8006f46 <_dtoa_r+0xb26>
 8006f76:	9b02      	ldr	r3, [sp, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	bfc8      	it	gt
 8006f7c:	461d      	movgt	r5, r3
 8006f7e:	9b01      	ldr	r3, [sp, #4]
 8006f80:	bfd8      	it	le
 8006f82:	2501      	movle	r5, #1
 8006f84:	441d      	add	r5, r3
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	ee18 1a10 	vmov	r1, s16
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4620      	mov	r0, r4
 8006f92:	f000 fa63 	bl	800745c <__lshift>
 8006f96:	4631      	mov	r1, r6
 8006f98:	ee08 0a10 	vmov	s16, r0
 8006f9c:	f000 face 	bl	800753c <__mcmp>
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	dc91      	bgt.n	8006ec8 <_dtoa_r+0xaa8>
 8006fa4:	d102      	bne.n	8006fac <_dtoa_r+0xb8c>
 8006fa6:	f01a 0f01 	tst.w	sl, #1
 8006faa:	d18d      	bne.n	8006ec8 <_dtoa_r+0xaa8>
 8006fac:	462b      	mov	r3, r5
 8006fae:	461d      	mov	r5, r3
 8006fb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fb4:	2a30      	cmp	r2, #48	; 0x30
 8006fb6:	d0fa      	beq.n	8006fae <_dtoa_r+0xb8e>
 8006fb8:	e6d7      	b.n	8006d6a <_dtoa_r+0x94a>
 8006fba:	9a01      	ldr	r2, [sp, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d184      	bne.n	8006eca <_dtoa_r+0xaaa>
 8006fc0:	9b00      	ldr	r3, [sp, #0]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	2331      	movs	r3, #49	; 0x31
 8006fc8:	7013      	strb	r3, [r2, #0]
 8006fca:	e6ce      	b.n	8006d6a <_dtoa_r+0x94a>
 8006fcc:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <_dtoa_r+0xbd4>)
 8006fce:	f7ff ba95 	b.w	80064fc <_dtoa_r+0xdc>
 8006fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f aa6e 	bne.w	80064b6 <_dtoa_r+0x96>
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <_dtoa_r+0xbd8>)
 8006fdc:	f7ff ba8e 	b.w	80064fc <_dtoa_r+0xdc>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dcae      	bgt.n	8006f44 <_dtoa_r+0xb24>
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	f73f aea8 	bgt.w	8006d3e <_dtoa_r+0x91e>
 8006fee:	e7a9      	b.n	8006f44 <_dtoa_r+0xb24>
 8006ff0:	0800b699 	.word	0x0800b699
 8006ff4:	0800b63c 	.word	0x0800b63c
 8006ff8:	0800b62f 	.word	0x0800b62f

08006ffc <_localeconv_r>:
 8006ffc:	4800      	ldr	r0, [pc, #0]	; (8007000 <_localeconv_r+0x4>)
 8006ffe:	4770      	bx	lr
 8007000:	20000168 	.word	0x20000168

08007004 <malloc>:
 8007004:	4b02      	ldr	r3, [pc, #8]	; (8007010 <malloc+0xc>)
 8007006:	4601      	mov	r1, r0
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	f7fe b9c1 	b.w	8005390 <_malloc_r>
 800700e:	bf00      	nop
 8007010:	20000014 	.word	0x20000014

08007014 <__ascii_mbtowc>:
 8007014:	b082      	sub	sp, #8
 8007016:	b901      	cbnz	r1, 800701a <__ascii_mbtowc+0x6>
 8007018:	a901      	add	r1, sp, #4
 800701a:	b142      	cbz	r2, 800702e <__ascii_mbtowc+0x1a>
 800701c:	b14b      	cbz	r3, 8007032 <__ascii_mbtowc+0x1e>
 800701e:	7813      	ldrb	r3, [r2, #0]
 8007020:	600b      	str	r3, [r1, #0]
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	1e10      	subs	r0, r2, #0
 8007026:	bf18      	it	ne
 8007028:	2001      	movne	r0, #1
 800702a:	b002      	add	sp, #8
 800702c:	4770      	bx	lr
 800702e:	4610      	mov	r0, r2
 8007030:	e7fb      	b.n	800702a <__ascii_mbtowc+0x16>
 8007032:	f06f 0001 	mvn.w	r0, #1
 8007036:	e7f8      	b.n	800702a <__ascii_mbtowc+0x16>

08007038 <_Balloc>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800703c:	4604      	mov	r4, r0
 800703e:	460d      	mov	r5, r1
 8007040:	b976      	cbnz	r6, 8007060 <_Balloc+0x28>
 8007042:	2010      	movs	r0, #16
 8007044:	f7ff ffde 	bl	8007004 <malloc>
 8007048:	4602      	mov	r2, r0
 800704a:	6260      	str	r0, [r4, #36]	; 0x24
 800704c:	b920      	cbnz	r0, 8007058 <_Balloc+0x20>
 800704e:	4b18      	ldr	r3, [pc, #96]	; (80070b0 <_Balloc+0x78>)
 8007050:	4818      	ldr	r0, [pc, #96]	; (80070b4 <_Balloc+0x7c>)
 8007052:	2166      	movs	r1, #102	; 0x66
 8007054:	f000 fd86 	bl	8007b64 <__assert_func>
 8007058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800705c:	6006      	str	r6, [r0, #0]
 800705e:	60c6      	str	r6, [r0, #12]
 8007060:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007062:	68f3      	ldr	r3, [r6, #12]
 8007064:	b183      	cbz	r3, 8007088 <_Balloc+0x50>
 8007066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800706e:	b9b8      	cbnz	r0, 80070a0 <_Balloc+0x68>
 8007070:	2101      	movs	r1, #1
 8007072:	fa01 f605 	lsl.w	r6, r1, r5
 8007076:	1d72      	adds	r2, r6, #5
 8007078:	0092      	lsls	r2, r2, #2
 800707a:	4620      	mov	r0, r4
 800707c:	f000 fb60 	bl	8007740 <_calloc_r>
 8007080:	b160      	cbz	r0, 800709c <_Balloc+0x64>
 8007082:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007086:	e00e      	b.n	80070a6 <_Balloc+0x6e>
 8007088:	2221      	movs	r2, #33	; 0x21
 800708a:	2104      	movs	r1, #4
 800708c:	4620      	mov	r0, r4
 800708e:	f000 fb57 	bl	8007740 <_calloc_r>
 8007092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007094:	60f0      	str	r0, [r6, #12]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e4      	bne.n	8007066 <_Balloc+0x2e>
 800709c:	2000      	movs	r0, #0
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	6802      	ldr	r2, [r0, #0]
 80070a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070a6:	2300      	movs	r3, #0
 80070a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070ac:	e7f7      	b.n	800709e <_Balloc+0x66>
 80070ae:	bf00      	nop
 80070b0:	0800b5bc 	.word	0x0800b5bc
 80070b4:	0800b6b4 	.word	0x0800b6b4

080070b8 <_Bfree>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070bc:	4605      	mov	r5, r0
 80070be:	460c      	mov	r4, r1
 80070c0:	b976      	cbnz	r6, 80070e0 <_Bfree+0x28>
 80070c2:	2010      	movs	r0, #16
 80070c4:	f7ff ff9e 	bl	8007004 <malloc>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6268      	str	r0, [r5, #36]	; 0x24
 80070cc:	b920      	cbnz	r0, 80070d8 <_Bfree+0x20>
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <_Bfree+0x3c>)
 80070d0:	4809      	ldr	r0, [pc, #36]	; (80070f8 <_Bfree+0x40>)
 80070d2:	218a      	movs	r1, #138	; 0x8a
 80070d4:	f000 fd46 	bl	8007b64 <__assert_func>
 80070d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070dc:	6006      	str	r6, [r0, #0]
 80070de:	60c6      	str	r6, [r0, #12]
 80070e0:	b13c      	cbz	r4, 80070f2 <_Bfree+0x3a>
 80070e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070e4:	6862      	ldr	r2, [r4, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070ec:	6021      	str	r1, [r4, #0]
 80070ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	0800b5bc 	.word	0x0800b5bc
 80070f8:	0800b6b4 	.word	0x0800b6b4

080070fc <__multadd>:
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	690d      	ldr	r5, [r1, #16]
 8007102:	4607      	mov	r7, r0
 8007104:	460c      	mov	r4, r1
 8007106:	461e      	mov	r6, r3
 8007108:	f101 0c14 	add.w	ip, r1, #20
 800710c:	2000      	movs	r0, #0
 800710e:	f8dc 3000 	ldr.w	r3, [ip]
 8007112:	b299      	uxth	r1, r3
 8007114:	fb02 6101 	mla	r1, r2, r1, r6
 8007118:	0c1e      	lsrs	r6, r3, #16
 800711a:	0c0b      	lsrs	r3, r1, #16
 800711c:	fb02 3306 	mla	r3, r2, r6, r3
 8007120:	b289      	uxth	r1, r1
 8007122:	3001      	adds	r0, #1
 8007124:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007128:	4285      	cmp	r5, r0
 800712a:	f84c 1b04 	str.w	r1, [ip], #4
 800712e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007132:	dcec      	bgt.n	800710e <__multadd+0x12>
 8007134:	b30e      	cbz	r6, 800717a <__multadd+0x7e>
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	42ab      	cmp	r3, r5
 800713a:	dc19      	bgt.n	8007170 <__multadd+0x74>
 800713c:	6861      	ldr	r1, [r4, #4]
 800713e:	4638      	mov	r0, r7
 8007140:	3101      	adds	r1, #1
 8007142:	f7ff ff79 	bl	8007038 <_Balloc>
 8007146:	4680      	mov	r8, r0
 8007148:	b928      	cbnz	r0, 8007156 <__multadd+0x5a>
 800714a:	4602      	mov	r2, r0
 800714c:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <__multadd+0x84>)
 800714e:	480d      	ldr	r0, [pc, #52]	; (8007184 <__multadd+0x88>)
 8007150:	21b5      	movs	r1, #181	; 0xb5
 8007152:	f000 fd07 	bl	8007b64 <__assert_func>
 8007156:	6922      	ldr	r2, [r4, #16]
 8007158:	3202      	adds	r2, #2
 800715a:	f104 010c 	add.w	r1, r4, #12
 800715e:	0092      	lsls	r2, r2, #2
 8007160:	300c      	adds	r0, #12
 8007162:	f7fe f893 	bl	800528c <memcpy>
 8007166:	4621      	mov	r1, r4
 8007168:	4638      	mov	r0, r7
 800716a:	f7ff ffa5 	bl	80070b8 <_Bfree>
 800716e:	4644      	mov	r4, r8
 8007170:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007174:	3501      	adds	r5, #1
 8007176:	615e      	str	r6, [r3, #20]
 8007178:	6125      	str	r5, [r4, #16]
 800717a:	4620      	mov	r0, r4
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	0800b699 	.word	0x0800b699
 8007184:	0800b6b4 	.word	0x0800b6b4

08007188 <__hi0bits>:
 8007188:	0c03      	lsrs	r3, r0, #16
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	b9d3      	cbnz	r3, 80071c4 <__hi0bits+0x3c>
 800718e:	0400      	lsls	r0, r0, #16
 8007190:	2310      	movs	r3, #16
 8007192:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007196:	bf04      	itt	eq
 8007198:	0200      	lsleq	r0, r0, #8
 800719a:	3308      	addeq	r3, #8
 800719c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071a0:	bf04      	itt	eq
 80071a2:	0100      	lsleq	r0, r0, #4
 80071a4:	3304      	addeq	r3, #4
 80071a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071aa:	bf04      	itt	eq
 80071ac:	0080      	lsleq	r0, r0, #2
 80071ae:	3302      	addeq	r3, #2
 80071b0:	2800      	cmp	r0, #0
 80071b2:	db05      	blt.n	80071c0 <__hi0bits+0x38>
 80071b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071b8:	f103 0301 	add.w	r3, r3, #1
 80071bc:	bf08      	it	eq
 80071be:	2320      	moveq	r3, #32
 80071c0:	4618      	mov	r0, r3
 80071c2:	4770      	bx	lr
 80071c4:	2300      	movs	r3, #0
 80071c6:	e7e4      	b.n	8007192 <__hi0bits+0xa>

080071c8 <__lo0bits>:
 80071c8:	6803      	ldr	r3, [r0, #0]
 80071ca:	f013 0207 	ands.w	r2, r3, #7
 80071ce:	4601      	mov	r1, r0
 80071d0:	d00b      	beq.n	80071ea <__lo0bits+0x22>
 80071d2:	07da      	lsls	r2, r3, #31
 80071d4:	d423      	bmi.n	800721e <__lo0bits+0x56>
 80071d6:	0798      	lsls	r0, r3, #30
 80071d8:	bf49      	itett	mi
 80071da:	085b      	lsrmi	r3, r3, #1
 80071dc:	089b      	lsrpl	r3, r3, #2
 80071de:	2001      	movmi	r0, #1
 80071e0:	600b      	strmi	r3, [r1, #0]
 80071e2:	bf5c      	itt	pl
 80071e4:	600b      	strpl	r3, [r1, #0]
 80071e6:	2002      	movpl	r0, #2
 80071e8:	4770      	bx	lr
 80071ea:	b298      	uxth	r0, r3
 80071ec:	b9a8      	cbnz	r0, 800721a <__lo0bits+0x52>
 80071ee:	0c1b      	lsrs	r3, r3, #16
 80071f0:	2010      	movs	r0, #16
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	b90a      	cbnz	r2, 80071fa <__lo0bits+0x32>
 80071f6:	3008      	adds	r0, #8
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	071a      	lsls	r2, r3, #28
 80071fc:	bf04      	itt	eq
 80071fe:	091b      	lsreq	r3, r3, #4
 8007200:	3004      	addeq	r0, #4
 8007202:	079a      	lsls	r2, r3, #30
 8007204:	bf04      	itt	eq
 8007206:	089b      	lsreq	r3, r3, #2
 8007208:	3002      	addeq	r0, #2
 800720a:	07da      	lsls	r2, r3, #31
 800720c:	d403      	bmi.n	8007216 <__lo0bits+0x4e>
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f100 0001 	add.w	r0, r0, #1
 8007214:	d005      	beq.n	8007222 <__lo0bits+0x5a>
 8007216:	600b      	str	r3, [r1, #0]
 8007218:	4770      	bx	lr
 800721a:	4610      	mov	r0, r2
 800721c:	e7e9      	b.n	80071f2 <__lo0bits+0x2a>
 800721e:	2000      	movs	r0, #0
 8007220:	4770      	bx	lr
 8007222:	2020      	movs	r0, #32
 8007224:	4770      	bx	lr
	...

08007228 <__i2b>:
 8007228:	b510      	push	{r4, lr}
 800722a:	460c      	mov	r4, r1
 800722c:	2101      	movs	r1, #1
 800722e:	f7ff ff03 	bl	8007038 <_Balloc>
 8007232:	4602      	mov	r2, r0
 8007234:	b928      	cbnz	r0, 8007242 <__i2b+0x1a>
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <__i2b+0x24>)
 8007238:	4805      	ldr	r0, [pc, #20]	; (8007250 <__i2b+0x28>)
 800723a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800723e:	f000 fc91 	bl	8007b64 <__assert_func>
 8007242:	2301      	movs	r3, #1
 8007244:	6144      	str	r4, [r0, #20]
 8007246:	6103      	str	r3, [r0, #16]
 8007248:	bd10      	pop	{r4, pc}
 800724a:	bf00      	nop
 800724c:	0800b699 	.word	0x0800b699
 8007250:	0800b6b4 	.word	0x0800b6b4

08007254 <__multiply>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4691      	mov	r9, r2
 800725a:	690a      	ldr	r2, [r1, #16]
 800725c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007260:	429a      	cmp	r2, r3
 8007262:	bfb8      	it	lt
 8007264:	460b      	movlt	r3, r1
 8007266:	460c      	mov	r4, r1
 8007268:	bfbc      	itt	lt
 800726a:	464c      	movlt	r4, r9
 800726c:	4699      	movlt	r9, r3
 800726e:	6927      	ldr	r7, [r4, #16]
 8007270:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	6861      	ldr	r1, [r4, #4]
 8007278:	eb07 060a 	add.w	r6, r7, sl
 800727c:	42b3      	cmp	r3, r6
 800727e:	b085      	sub	sp, #20
 8007280:	bfb8      	it	lt
 8007282:	3101      	addlt	r1, #1
 8007284:	f7ff fed8 	bl	8007038 <_Balloc>
 8007288:	b930      	cbnz	r0, 8007298 <__multiply+0x44>
 800728a:	4602      	mov	r2, r0
 800728c:	4b44      	ldr	r3, [pc, #272]	; (80073a0 <__multiply+0x14c>)
 800728e:	4845      	ldr	r0, [pc, #276]	; (80073a4 <__multiply+0x150>)
 8007290:	f240 115d 	movw	r1, #349	; 0x15d
 8007294:	f000 fc66 	bl	8007b64 <__assert_func>
 8007298:	f100 0514 	add.w	r5, r0, #20
 800729c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072a0:	462b      	mov	r3, r5
 80072a2:	2200      	movs	r2, #0
 80072a4:	4543      	cmp	r3, r8
 80072a6:	d321      	bcc.n	80072ec <__multiply+0x98>
 80072a8:	f104 0314 	add.w	r3, r4, #20
 80072ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072b0:	f109 0314 	add.w	r3, r9, #20
 80072b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	1b3a      	subs	r2, r7, r4
 80072bc:	3a15      	subs	r2, #21
 80072be:	f022 0203 	bic.w	r2, r2, #3
 80072c2:	3204      	adds	r2, #4
 80072c4:	f104 0115 	add.w	r1, r4, #21
 80072c8:	428f      	cmp	r7, r1
 80072ca:	bf38      	it	cc
 80072cc:	2204      	movcc	r2, #4
 80072ce:	9201      	str	r2, [sp, #4]
 80072d0:	9a02      	ldr	r2, [sp, #8]
 80072d2:	9303      	str	r3, [sp, #12]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d80c      	bhi.n	80072f2 <__multiply+0x9e>
 80072d8:	2e00      	cmp	r6, #0
 80072da:	dd03      	ble.n	80072e4 <__multiply+0x90>
 80072dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d05a      	beq.n	800739a <__multiply+0x146>
 80072e4:	6106      	str	r6, [r0, #16]
 80072e6:	b005      	add	sp, #20
 80072e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ec:	f843 2b04 	str.w	r2, [r3], #4
 80072f0:	e7d8      	b.n	80072a4 <__multiply+0x50>
 80072f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80072f6:	f1ba 0f00 	cmp.w	sl, #0
 80072fa:	d024      	beq.n	8007346 <__multiply+0xf2>
 80072fc:	f104 0e14 	add.w	lr, r4, #20
 8007300:	46a9      	mov	r9, r5
 8007302:	f04f 0c00 	mov.w	ip, #0
 8007306:	f85e 2b04 	ldr.w	r2, [lr], #4
 800730a:	f8d9 1000 	ldr.w	r1, [r9]
 800730e:	fa1f fb82 	uxth.w	fp, r2
 8007312:	b289      	uxth	r1, r1
 8007314:	fb0a 110b 	mla	r1, sl, fp, r1
 8007318:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800731c:	f8d9 2000 	ldr.w	r2, [r9]
 8007320:	4461      	add	r1, ip
 8007322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007326:	fb0a c20b 	mla	r2, sl, fp, ip
 800732a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800732e:	b289      	uxth	r1, r1
 8007330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007334:	4577      	cmp	r7, lr
 8007336:	f849 1b04 	str.w	r1, [r9], #4
 800733a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800733e:	d8e2      	bhi.n	8007306 <__multiply+0xb2>
 8007340:	9a01      	ldr	r2, [sp, #4]
 8007342:	f845 c002 	str.w	ip, [r5, r2]
 8007346:	9a03      	ldr	r2, [sp, #12]
 8007348:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800734c:	3304      	adds	r3, #4
 800734e:	f1b9 0f00 	cmp.w	r9, #0
 8007352:	d020      	beq.n	8007396 <__multiply+0x142>
 8007354:	6829      	ldr	r1, [r5, #0]
 8007356:	f104 0c14 	add.w	ip, r4, #20
 800735a:	46ae      	mov	lr, r5
 800735c:	f04f 0a00 	mov.w	sl, #0
 8007360:	f8bc b000 	ldrh.w	fp, [ip]
 8007364:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007368:	fb09 220b 	mla	r2, r9, fp, r2
 800736c:	4492      	add	sl, r2
 800736e:	b289      	uxth	r1, r1
 8007370:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007374:	f84e 1b04 	str.w	r1, [lr], #4
 8007378:	f85c 2b04 	ldr.w	r2, [ip], #4
 800737c:	f8be 1000 	ldrh.w	r1, [lr]
 8007380:	0c12      	lsrs	r2, r2, #16
 8007382:	fb09 1102 	mla	r1, r9, r2, r1
 8007386:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800738a:	4567      	cmp	r7, ip
 800738c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007390:	d8e6      	bhi.n	8007360 <__multiply+0x10c>
 8007392:	9a01      	ldr	r2, [sp, #4]
 8007394:	50a9      	str	r1, [r5, r2]
 8007396:	3504      	adds	r5, #4
 8007398:	e79a      	b.n	80072d0 <__multiply+0x7c>
 800739a:	3e01      	subs	r6, #1
 800739c:	e79c      	b.n	80072d8 <__multiply+0x84>
 800739e:	bf00      	nop
 80073a0:	0800b699 	.word	0x0800b699
 80073a4:	0800b6b4 	.word	0x0800b6b4

080073a8 <__pow5mult>:
 80073a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073ac:	4615      	mov	r5, r2
 80073ae:	f012 0203 	ands.w	r2, r2, #3
 80073b2:	4606      	mov	r6, r0
 80073b4:	460f      	mov	r7, r1
 80073b6:	d007      	beq.n	80073c8 <__pow5mult+0x20>
 80073b8:	4c25      	ldr	r4, [pc, #148]	; (8007450 <__pow5mult+0xa8>)
 80073ba:	3a01      	subs	r2, #1
 80073bc:	2300      	movs	r3, #0
 80073be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073c2:	f7ff fe9b 	bl	80070fc <__multadd>
 80073c6:	4607      	mov	r7, r0
 80073c8:	10ad      	asrs	r5, r5, #2
 80073ca:	d03d      	beq.n	8007448 <__pow5mult+0xa0>
 80073cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073ce:	b97c      	cbnz	r4, 80073f0 <__pow5mult+0x48>
 80073d0:	2010      	movs	r0, #16
 80073d2:	f7ff fe17 	bl	8007004 <malloc>
 80073d6:	4602      	mov	r2, r0
 80073d8:	6270      	str	r0, [r6, #36]	; 0x24
 80073da:	b928      	cbnz	r0, 80073e8 <__pow5mult+0x40>
 80073dc:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <__pow5mult+0xac>)
 80073de:	481e      	ldr	r0, [pc, #120]	; (8007458 <__pow5mult+0xb0>)
 80073e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073e4:	f000 fbbe 	bl	8007b64 <__assert_func>
 80073e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073ec:	6004      	str	r4, [r0, #0]
 80073ee:	60c4      	str	r4, [r0, #12]
 80073f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073f8:	b94c      	cbnz	r4, 800740e <__pow5mult+0x66>
 80073fa:	f240 2171 	movw	r1, #625	; 0x271
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff ff12 	bl	8007228 <__i2b>
 8007404:	2300      	movs	r3, #0
 8007406:	f8c8 0008 	str.w	r0, [r8, #8]
 800740a:	4604      	mov	r4, r0
 800740c:	6003      	str	r3, [r0, #0]
 800740e:	f04f 0900 	mov.w	r9, #0
 8007412:	07eb      	lsls	r3, r5, #31
 8007414:	d50a      	bpl.n	800742c <__pow5mult+0x84>
 8007416:	4639      	mov	r1, r7
 8007418:	4622      	mov	r2, r4
 800741a:	4630      	mov	r0, r6
 800741c:	f7ff ff1a 	bl	8007254 <__multiply>
 8007420:	4639      	mov	r1, r7
 8007422:	4680      	mov	r8, r0
 8007424:	4630      	mov	r0, r6
 8007426:	f7ff fe47 	bl	80070b8 <_Bfree>
 800742a:	4647      	mov	r7, r8
 800742c:	106d      	asrs	r5, r5, #1
 800742e:	d00b      	beq.n	8007448 <__pow5mult+0xa0>
 8007430:	6820      	ldr	r0, [r4, #0]
 8007432:	b938      	cbnz	r0, 8007444 <__pow5mult+0x9c>
 8007434:	4622      	mov	r2, r4
 8007436:	4621      	mov	r1, r4
 8007438:	4630      	mov	r0, r6
 800743a:	f7ff ff0b 	bl	8007254 <__multiply>
 800743e:	6020      	str	r0, [r4, #0]
 8007440:	f8c0 9000 	str.w	r9, [r0]
 8007444:	4604      	mov	r4, r0
 8007446:	e7e4      	b.n	8007412 <__pow5mult+0x6a>
 8007448:	4638      	mov	r0, r7
 800744a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744e:	bf00      	nop
 8007450:	0800b800 	.word	0x0800b800
 8007454:	0800b5bc 	.word	0x0800b5bc
 8007458:	0800b6b4 	.word	0x0800b6b4

0800745c <__lshift>:
 800745c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007460:	460c      	mov	r4, r1
 8007462:	6849      	ldr	r1, [r1, #4]
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	4607      	mov	r7, r0
 800746e:	4691      	mov	r9, r2
 8007470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007474:	f108 0601 	add.w	r6, r8, #1
 8007478:	42b3      	cmp	r3, r6
 800747a:	db0b      	blt.n	8007494 <__lshift+0x38>
 800747c:	4638      	mov	r0, r7
 800747e:	f7ff fddb 	bl	8007038 <_Balloc>
 8007482:	4605      	mov	r5, r0
 8007484:	b948      	cbnz	r0, 800749a <__lshift+0x3e>
 8007486:	4602      	mov	r2, r0
 8007488:	4b2a      	ldr	r3, [pc, #168]	; (8007534 <__lshift+0xd8>)
 800748a:	482b      	ldr	r0, [pc, #172]	; (8007538 <__lshift+0xdc>)
 800748c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007490:	f000 fb68 	bl	8007b64 <__assert_func>
 8007494:	3101      	adds	r1, #1
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	e7ee      	b.n	8007478 <__lshift+0x1c>
 800749a:	2300      	movs	r3, #0
 800749c:	f100 0114 	add.w	r1, r0, #20
 80074a0:	f100 0210 	add.w	r2, r0, #16
 80074a4:	4618      	mov	r0, r3
 80074a6:	4553      	cmp	r3, sl
 80074a8:	db37      	blt.n	800751a <__lshift+0xbe>
 80074aa:	6920      	ldr	r0, [r4, #16]
 80074ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	f019 091f 	ands.w	r9, r9, #31
 80074b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074c0:	d02f      	beq.n	8007522 <__lshift+0xc6>
 80074c2:	f1c9 0e20 	rsb	lr, r9, #32
 80074c6:	468a      	mov	sl, r1
 80074c8:	f04f 0c00 	mov.w	ip, #0
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	fa02 f209 	lsl.w	r2, r2, r9
 80074d2:	ea42 020c 	orr.w	r2, r2, ip
 80074d6:	f84a 2b04 	str.w	r2, [sl], #4
 80074da:	f853 2b04 	ldr.w	r2, [r3], #4
 80074de:	4298      	cmp	r0, r3
 80074e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074e4:	d8f2      	bhi.n	80074cc <__lshift+0x70>
 80074e6:	1b03      	subs	r3, r0, r4
 80074e8:	3b15      	subs	r3, #21
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	3304      	adds	r3, #4
 80074f0:	f104 0215 	add.w	r2, r4, #21
 80074f4:	4290      	cmp	r0, r2
 80074f6:	bf38      	it	cc
 80074f8:	2304      	movcc	r3, #4
 80074fa:	f841 c003 	str.w	ip, [r1, r3]
 80074fe:	f1bc 0f00 	cmp.w	ip, #0
 8007502:	d001      	beq.n	8007508 <__lshift+0xac>
 8007504:	f108 0602 	add.w	r6, r8, #2
 8007508:	3e01      	subs	r6, #1
 800750a:	4638      	mov	r0, r7
 800750c:	612e      	str	r6, [r5, #16]
 800750e:	4621      	mov	r1, r4
 8007510:	f7ff fdd2 	bl	80070b8 <_Bfree>
 8007514:	4628      	mov	r0, r5
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	f842 0f04 	str.w	r0, [r2, #4]!
 800751e:	3301      	adds	r3, #1
 8007520:	e7c1      	b.n	80074a6 <__lshift+0x4a>
 8007522:	3904      	subs	r1, #4
 8007524:	f853 2b04 	ldr.w	r2, [r3], #4
 8007528:	f841 2f04 	str.w	r2, [r1, #4]!
 800752c:	4298      	cmp	r0, r3
 800752e:	d8f9      	bhi.n	8007524 <__lshift+0xc8>
 8007530:	e7ea      	b.n	8007508 <__lshift+0xac>
 8007532:	bf00      	nop
 8007534:	0800b699 	.word	0x0800b699
 8007538:	0800b6b4 	.word	0x0800b6b4

0800753c <__mcmp>:
 800753c:	b530      	push	{r4, r5, lr}
 800753e:	6902      	ldr	r2, [r0, #16]
 8007540:	690c      	ldr	r4, [r1, #16]
 8007542:	1b12      	subs	r2, r2, r4
 8007544:	d10e      	bne.n	8007564 <__mcmp+0x28>
 8007546:	f100 0314 	add.w	r3, r0, #20
 800754a:	3114      	adds	r1, #20
 800754c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800755c:	42a5      	cmp	r5, r4
 800755e:	d003      	beq.n	8007568 <__mcmp+0x2c>
 8007560:	d305      	bcc.n	800756e <__mcmp+0x32>
 8007562:	2201      	movs	r2, #1
 8007564:	4610      	mov	r0, r2
 8007566:	bd30      	pop	{r4, r5, pc}
 8007568:	4283      	cmp	r3, r0
 800756a:	d3f3      	bcc.n	8007554 <__mcmp+0x18>
 800756c:	e7fa      	b.n	8007564 <__mcmp+0x28>
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	e7f7      	b.n	8007564 <__mcmp+0x28>

08007574 <__mdiff>:
 8007574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	4606      	mov	r6, r0
 800757c:	4611      	mov	r1, r2
 800757e:	4620      	mov	r0, r4
 8007580:	4690      	mov	r8, r2
 8007582:	f7ff ffdb 	bl	800753c <__mcmp>
 8007586:	1e05      	subs	r5, r0, #0
 8007588:	d110      	bne.n	80075ac <__mdiff+0x38>
 800758a:	4629      	mov	r1, r5
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fd53 	bl	8007038 <_Balloc>
 8007592:	b930      	cbnz	r0, 80075a2 <__mdiff+0x2e>
 8007594:	4b3a      	ldr	r3, [pc, #232]	; (8007680 <__mdiff+0x10c>)
 8007596:	4602      	mov	r2, r0
 8007598:	f240 2132 	movw	r1, #562	; 0x232
 800759c:	4839      	ldr	r0, [pc, #228]	; (8007684 <__mdiff+0x110>)
 800759e:	f000 fae1 	bl	8007b64 <__assert_func>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ac:	bfa4      	itt	ge
 80075ae:	4643      	movge	r3, r8
 80075b0:	46a0      	movge	r8, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075b8:	bfa6      	itte	ge
 80075ba:	461c      	movge	r4, r3
 80075bc:	2500      	movge	r5, #0
 80075be:	2501      	movlt	r5, #1
 80075c0:	f7ff fd3a 	bl	8007038 <_Balloc>
 80075c4:	b920      	cbnz	r0, 80075d0 <__mdiff+0x5c>
 80075c6:	4b2e      	ldr	r3, [pc, #184]	; (8007680 <__mdiff+0x10c>)
 80075c8:	4602      	mov	r2, r0
 80075ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075ce:	e7e5      	b.n	800759c <__mdiff+0x28>
 80075d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075d4:	6926      	ldr	r6, [r4, #16]
 80075d6:	60c5      	str	r5, [r0, #12]
 80075d8:	f104 0914 	add.w	r9, r4, #20
 80075dc:	f108 0514 	add.w	r5, r8, #20
 80075e0:	f100 0e14 	add.w	lr, r0, #20
 80075e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075ec:	f108 0210 	add.w	r2, r8, #16
 80075f0:	46f2      	mov	sl, lr
 80075f2:	2100      	movs	r1, #0
 80075f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80075f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075fc:	fa1f f883 	uxth.w	r8, r3
 8007600:	fa11 f18b 	uxtah	r1, r1, fp
 8007604:	0c1b      	lsrs	r3, r3, #16
 8007606:	eba1 0808 	sub.w	r8, r1, r8
 800760a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800760e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007612:	fa1f f888 	uxth.w	r8, r8
 8007616:	1419      	asrs	r1, r3, #16
 8007618:	454e      	cmp	r6, r9
 800761a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800761e:	f84a 3b04 	str.w	r3, [sl], #4
 8007622:	d8e7      	bhi.n	80075f4 <__mdiff+0x80>
 8007624:	1b33      	subs	r3, r6, r4
 8007626:	3b15      	subs	r3, #21
 8007628:	f023 0303 	bic.w	r3, r3, #3
 800762c:	3304      	adds	r3, #4
 800762e:	3415      	adds	r4, #21
 8007630:	42a6      	cmp	r6, r4
 8007632:	bf38      	it	cc
 8007634:	2304      	movcc	r3, #4
 8007636:	441d      	add	r5, r3
 8007638:	4473      	add	r3, lr
 800763a:	469e      	mov	lr, r3
 800763c:	462e      	mov	r6, r5
 800763e:	4566      	cmp	r6, ip
 8007640:	d30e      	bcc.n	8007660 <__mdiff+0xec>
 8007642:	f10c 0203 	add.w	r2, ip, #3
 8007646:	1b52      	subs	r2, r2, r5
 8007648:	f022 0203 	bic.w	r2, r2, #3
 800764c:	3d03      	subs	r5, #3
 800764e:	45ac      	cmp	ip, r5
 8007650:	bf38      	it	cc
 8007652:	2200      	movcc	r2, #0
 8007654:	441a      	add	r2, r3
 8007656:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800765a:	b17b      	cbz	r3, 800767c <__mdiff+0x108>
 800765c:	6107      	str	r7, [r0, #16]
 800765e:	e7a3      	b.n	80075a8 <__mdiff+0x34>
 8007660:	f856 8b04 	ldr.w	r8, [r6], #4
 8007664:	fa11 f288 	uxtah	r2, r1, r8
 8007668:	1414      	asrs	r4, r2, #16
 800766a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800766e:	b292      	uxth	r2, r2
 8007670:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007674:	f84e 2b04 	str.w	r2, [lr], #4
 8007678:	1421      	asrs	r1, r4, #16
 800767a:	e7e0      	b.n	800763e <__mdiff+0xca>
 800767c:	3f01      	subs	r7, #1
 800767e:	e7ea      	b.n	8007656 <__mdiff+0xe2>
 8007680:	0800b699 	.word	0x0800b699
 8007684:	0800b6b4 	.word	0x0800b6b4

08007688 <__d2b>:
 8007688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800768c:	4689      	mov	r9, r1
 800768e:	2101      	movs	r1, #1
 8007690:	ec57 6b10 	vmov	r6, r7, d0
 8007694:	4690      	mov	r8, r2
 8007696:	f7ff fccf 	bl	8007038 <_Balloc>
 800769a:	4604      	mov	r4, r0
 800769c:	b930      	cbnz	r0, 80076ac <__d2b+0x24>
 800769e:	4602      	mov	r2, r0
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <__d2b+0xb0>)
 80076a2:	4826      	ldr	r0, [pc, #152]	; (800773c <__d2b+0xb4>)
 80076a4:	f240 310a 	movw	r1, #778	; 0x30a
 80076a8:	f000 fa5c 	bl	8007b64 <__assert_func>
 80076ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076b4:	bb35      	cbnz	r5, 8007704 <__d2b+0x7c>
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	9301      	str	r3, [sp, #4]
 80076ba:	d028      	beq.n	800770e <__d2b+0x86>
 80076bc:	4668      	mov	r0, sp
 80076be:	9600      	str	r6, [sp, #0]
 80076c0:	f7ff fd82 	bl	80071c8 <__lo0bits>
 80076c4:	9900      	ldr	r1, [sp, #0]
 80076c6:	b300      	cbz	r0, 800770a <__d2b+0x82>
 80076c8:	9a01      	ldr	r2, [sp, #4]
 80076ca:	f1c0 0320 	rsb	r3, r0, #32
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	430b      	orrs	r3, r1
 80076d4:	40c2      	lsrs	r2, r0
 80076d6:	6163      	str	r3, [r4, #20]
 80076d8:	9201      	str	r2, [sp, #4]
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	61a3      	str	r3, [r4, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bf14      	ite	ne
 80076e2:	2202      	movne	r2, #2
 80076e4:	2201      	moveq	r2, #1
 80076e6:	6122      	str	r2, [r4, #16]
 80076e8:	b1d5      	cbz	r5, 8007720 <__d2b+0x98>
 80076ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076ee:	4405      	add	r5, r0
 80076f0:	f8c9 5000 	str.w	r5, [r9]
 80076f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076f8:	f8c8 0000 	str.w	r0, [r8]
 80076fc:	4620      	mov	r0, r4
 80076fe:	b003      	add	sp, #12
 8007700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007708:	e7d5      	b.n	80076b6 <__d2b+0x2e>
 800770a:	6161      	str	r1, [r4, #20]
 800770c:	e7e5      	b.n	80076da <__d2b+0x52>
 800770e:	a801      	add	r0, sp, #4
 8007710:	f7ff fd5a 	bl	80071c8 <__lo0bits>
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	6163      	str	r3, [r4, #20]
 8007718:	2201      	movs	r2, #1
 800771a:	6122      	str	r2, [r4, #16]
 800771c:	3020      	adds	r0, #32
 800771e:	e7e3      	b.n	80076e8 <__d2b+0x60>
 8007720:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007724:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007728:	f8c9 0000 	str.w	r0, [r9]
 800772c:	6918      	ldr	r0, [r3, #16]
 800772e:	f7ff fd2b 	bl	8007188 <__hi0bits>
 8007732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007736:	e7df      	b.n	80076f8 <__d2b+0x70>
 8007738:	0800b699 	.word	0x0800b699
 800773c:	0800b6b4 	.word	0x0800b6b4

08007740 <_calloc_r>:
 8007740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007742:	fba1 2402 	umull	r2, r4, r1, r2
 8007746:	b94c      	cbnz	r4, 800775c <_calloc_r+0x1c>
 8007748:	4611      	mov	r1, r2
 800774a:	9201      	str	r2, [sp, #4]
 800774c:	f7fd fe20 	bl	8005390 <_malloc_r>
 8007750:	9a01      	ldr	r2, [sp, #4]
 8007752:	4605      	mov	r5, r0
 8007754:	b930      	cbnz	r0, 8007764 <_calloc_r+0x24>
 8007756:	4628      	mov	r0, r5
 8007758:	b003      	add	sp, #12
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	220c      	movs	r2, #12
 800775e:	6002      	str	r2, [r0, #0]
 8007760:	2500      	movs	r5, #0
 8007762:	e7f8      	b.n	8007756 <_calloc_r+0x16>
 8007764:	4621      	mov	r1, r4
 8007766:	f7fd fd9f 	bl	80052a8 <memset>
 800776a:	e7f4      	b.n	8007756 <_calloc_r+0x16>

0800776c <__ssputs_r>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	688e      	ldr	r6, [r1, #8]
 8007772:	429e      	cmp	r6, r3
 8007774:	4682      	mov	sl, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4690      	mov	r8, r2
 800777a:	461f      	mov	r7, r3
 800777c:	d838      	bhi.n	80077f0 <__ssputs_r+0x84>
 800777e:	898a      	ldrh	r2, [r1, #12]
 8007780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007784:	d032      	beq.n	80077ec <__ssputs_r+0x80>
 8007786:	6825      	ldr	r5, [r4, #0]
 8007788:	6909      	ldr	r1, [r1, #16]
 800778a:	eba5 0901 	sub.w	r9, r5, r1
 800778e:	6965      	ldr	r5, [r4, #20]
 8007790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007798:	3301      	adds	r3, #1
 800779a:	444b      	add	r3, r9
 800779c:	106d      	asrs	r5, r5, #1
 800779e:	429d      	cmp	r5, r3
 80077a0:	bf38      	it	cc
 80077a2:	461d      	movcc	r5, r3
 80077a4:	0553      	lsls	r3, r2, #21
 80077a6:	d531      	bpl.n	800780c <__ssputs_r+0xa0>
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7fd fdf1 	bl	8005390 <_malloc_r>
 80077ae:	4606      	mov	r6, r0
 80077b0:	b950      	cbnz	r0, 80077c8 <__ssputs_r+0x5c>
 80077b2:	230c      	movs	r3, #12
 80077b4:	f8ca 3000 	str.w	r3, [sl]
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c8:	6921      	ldr	r1, [r4, #16]
 80077ca:	464a      	mov	r2, r9
 80077cc:	f7fd fd5e 	bl	800528c <memcpy>
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	81a3      	strh	r3, [r4, #12]
 80077dc:	6126      	str	r6, [r4, #16]
 80077de:	6165      	str	r5, [r4, #20]
 80077e0:	444e      	add	r6, r9
 80077e2:	eba5 0509 	sub.w	r5, r5, r9
 80077e6:	6026      	str	r6, [r4, #0]
 80077e8:	60a5      	str	r5, [r4, #8]
 80077ea:	463e      	mov	r6, r7
 80077ec:	42be      	cmp	r6, r7
 80077ee:	d900      	bls.n	80077f2 <__ssputs_r+0x86>
 80077f0:	463e      	mov	r6, r7
 80077f2:	6820      	ldr	r0, [r4, #0]
 80077f4:	4632      	mov	r2, r6
 80077f6:	4641      	mov	r1, r8
 80077f8:	f000 f9e4 	bl	8007bc4 <memmove>
 80077fc:	68a3      	ldr	r3, [r4, #8]
 80077fe:	1b9b      	subs	r3, r3, r6
 8007800:	60a3      	str	r3, [r4, #8]
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	4433      	add	r3, r6
 8007806:	6023      	str	r3, [r4, #0]
 8007808:	2000      	movs	r0, #0
 800780a:	e7db      	b.n	80077c4 <__ssputs_r+0x58>
 800780c:	462a      	mov	r2, r5
 800780e:	f000 f9f3 	bl	8007bf8 <_realloc_r>
 8007812:	4606      	mov	r6, r0
 8007814:	2800      	cmp	r0, #0
 8007816:	d1e1      	bne.n	80077dc <__ssputs_r+0x70>
 8007818:	6921      	ldr	r1, [r4, #16]
 800781a:	4650      	mov	r0, sl
 800781c:	f7fd fd4c 	bl	80052b8 <_free_r>
 8007820:	e7c7      	b.n	80077b2 <__ssputs_r+0x46>

08007822 <_printf_common>:
 8007822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007826:	4616      	mov	r6, r2
 8007828:	4699      	mov	r9, r3
 800782a:	688a      	ldr	r2, [r1, #8]
 800782c:	690b      	ldr	r3, [r1, #16]
 800782e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007832:	4293      	cmp	r3, r2
 8007834:	bfb8      	it	lt
 8007836:	4613      	movlt	r3, r2
 8007838:	6033      	str	r3, [r6, #0]
 800783a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800783e:	4607      	mov	r7, r0
 8007840:	460c      	mov	r4, r1
 8007842:	b10a      	cbz	r2, 8007848 <_printf_common+0x26>
 8007844:	3301      	adds	r3, #1
 8007846:	6033      	str	r3, [r6, #0]
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	0699      	lsls	r1, r3, #26
 800784c:	bf42      	ittt	mi
 800784e:	6833      	ldrmi	r3, [r6, #0]
 8007850:	3302      	addmi	r3, #2
 8007852:	6033      	strmi	r3, [r6, #0]
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	f015 0506 	ands.w	r5, r5, #6
 800785a:	d106      	bne.n	800786a <_printf_common+0x48>
 800785c:	f104 0a19 	add.w	sl, r4, #25
 8007860:	68e3      	ldr	r3, [r4, #12]
 8007862:	6832      	ldr	r2, [r6, #0]
 8007864:	1a9b      	subs	r3, r3, r2
 8007866:	42ab      	cmp	r3, r5
 8007868:	dc26      	bgt.n	80078b8 <_printf_common+0x96>
 800786a:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800786e:	1e13      	subs	r3, r2, #0
 8007870:	6822      	ldr	r2, [r4, #0]
 8007872:	bf18      	it	ne
 8007874:	2301      	movne	r3, #1
 8007876:	0692      	lsls	r2, r2, #26
 8007878:	d42b      	bmi.n	80078d2 <_printf_common+0xb0>
 800787a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800787e:	4649      	mov	r1, r9
 8007880:	4638      	mov	r0, r7
 8007882:	47c0      	blx	r8
 8007884:	3001      	adds	r0, #1
 8007886:	d01e      	beq.n	80078c6 <_printf_common+0xa4>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	68e5      	ldr	r5, [r4, #12]
 800788c:	6832      	ldr	r2, [r6, #0]
 800788e:	f003 0306 	and.w	r3, r3, #6
 8007892:	2b04      	cmp	r3, #4
 8007894:	bf08      	it	eq
 8007896:	1aad      	subeq	r5, r5, r2
 8007898:	68a3      	ldr	r3, [r4, #8]
 800789a:	6922      	ldr	r2, [r4, #16]
 800789c:	bf0c      	ite	eq
 800789e:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078a2:	2500      	movne	r5, #0
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfc4      	itt	gt
 80078a8:	1a9b      	subgt	r3, r3, r2
 80078aa:	18ed      	addgt	r5, r5, r3
 80078ac:	2600      	movs	r6, #0
 80078ae:	341a      	adds	r4, #26
 80078b0:	42b5      	cmp	r5, r6
 80078b2:	d11a      	bne.n	80078ea <_printf_common+0xc8>
 80078b4:	2000      	movs	r0, #0
 80078b6:	e008      	b.n	80078ca <_printf_common+0xa8>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4652      	mov	r2, sl
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d103      	bne.n	80078ce <_printf_common+0xac>
 80078c6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ce:	3501      	adds	r5, #1
 80078d0:	e7c6      	b.n	8007860 <_printf_common+0x3e>
 80078d2:	18e1      	adds	r1, r4, r3
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	2030      	movs	r0, #48	; 0x30
 80078d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078dc:	4422      	add	r2, r4
 80078de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80078e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078e6:	3302      	adds	r3, #2
 80078e8:	e7c7      	b.n	800787a <_printf_common+0x58>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4622      	mov	r2, r4
 80078ee:	4649      	mov	r1, r9
 80078f0:	4638      	mov	r0, r7
 80078f2:	47c0      	blx	r8
 80078f4:	3001      	adds	r0, #1
 80078f6:	d0e6      	beq.n	80078c6 <_printf_common+0xa4>
 80078f8:	3601      	adds	r6, #1
 80078fa:	e7d9      	b.n	80078b0 <_printf_common+0x8e>

080078fc <_printf_i>:
 80078fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007900:	7e0f      	ldrb	r7, [r1, #24]
 8007902:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007904:	2f78      	cmp	r7, #120	; 0x78
 8007906:	4691      	mov	r9, r2
 8007908:	4680      	mov	r8, r0
 800790a:	460c      	mov	r4, r1
 800790c:	469a      	mov	sl, r3
 800790e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007912:	d807      	bhi.n	8007924 <_printf_i+0x28>
 8007914:	2f62      	cmp	r7, #98	; 0x62
 8007916:	d80a      	bhi.n	800792e <_printf_i+0x32>
 8007918:	2f00      	cmp	r7, #0
 800791a:	f000 80d8 	beq.w	8007ace <_printf_i+0x1d2>
 800791e:	2f58      	cmp	r7, #88	; 0x58
 8007920:	f000 80a3 	beq.w	8007a6a <_printf_i+0x16e>
 8007924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007928:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800792c:	e03a      	b.n	80079a4 <_printf_i+0xa8>
 800792e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007932:	2b15      	cmp	r3, #21
 8007934:	d8f6      	bhi.n	8007924 <_printf_i+0x28>
 8007936:	a101      	add	r1, pc, #4	; (adr r1, 800793c <_printf_i+0x40>)
 8007938:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800793c:	08007995 	.word	0x08007995
 8007940:	080079a9 	.word	0x080079a9
 8007944:	08007925 	.word	0x08007925
 8007948:	08007925 	.word	0x08007925
 800794c:	08007925 	.word	0x08007925
 8007950:	08007925 	.word	0x08007925
 8007954:	080079a9 	.word	0x080079a9
 8007958:	08007925 	.word	0x08007925
 800795c:	08007925 	.word	0x08007925
 8007960:	08007925 	.word	0x08007925
 8007964:	08007925 	.word	0x08007925
 8007968:	08007ab5 	.word	0x08007ab5
 800796c:	080079d9 	.word	0x080079d9
 8007970:	08007a97 	.word	0x08007a97
 8007974:	08007925 	.word	0x08007925
 8007978:	08007925 	.word	0x08007925
 800797c:	08007ad7 	.word	0x08007ad7
 8007980:	08007925 	.word	0x08007925
 8007984:	080079d9 	.word	0x080079d9
 8007988:	08007925 	.word	0x08007925
 800798c:	08007925 	.word	0x08007925
 8007990:	08007a9f 	.word	0x08007a9f
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	1d1a      	adds	r2, r3, #4
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	602a      	str	r2, [r5, #0]
 800799c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079a4:	2301      	movs	r3, #1
 80079a6:	e0a3      	b.n	8007af0 <_printf_i+0x1f4>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	6829      	ldr	r1, [r5, #0]
 80079ac:	0606      	lsls	r6, r0, #24
 80079ae:	f101 0304 	add.w	r3, r1, #4
 80079b2:	d50a      	bpl.n	80079ca <_printf_i+0xce>
 80079b4:	680e      	ldr	r6, [r1, #0]
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	2e00      	cmp	r6, #0
 80079ba:	da03      	bge.n	80079c4 <_printf_i+0xc8>
 80079bc:	232d      	movs	r3, #45	; 0x2d
 80079be:	4276      	negs	r6, r6
 80079c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c4:	485e      	ldr	r0, [pc, #376]	; (8007b40 <_printf_i+0x244>)
 80079c6:	230a      	movs	r3, #10
 80079c8:	e019      	b.n	80079fe <_printf_i+0x102>
 80079ca:	680e      	ldr	r6, [r1, #0]
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079d2:	bf18      	it	ne
 80079d4:	b236      	sxthne	r6, r6
 80079d6:	e7ef      	b.n	80079b8 <_printf_i+0xbc>
 80079d8:	682b      	ldr	r3, [r5, #0]
 80079da:	6820      	ldr	r0, [r4, #0]
 80079dc:	1d19      	adds	r1, r3, #4
 80079de:	6029      	str	r1, [r5, #0]
 80079e0:	0601      	lsls	r1, r0, #24
 80079e2:	d501      	bpl.n	80079e8 <_printf_i+0xec>
 80079e4:	681e      	ldr	r6, [r3, #0]
 80079e6:	e002      	b.n	80079ee <_printf_i+0xf2>
 80079e8:	0646      	lsls	r6, r0, #25
 80079ea:	d5fb      	bpl.n	80079e4 <_printf_i+0xe8>
 80079ec:	881e      	ldrh	r6, [r3, #0]
 80079ee:	4854      	ldr	r0, [pc, #336]	; (8007b40 <_printf_i+0x244>)
 80079f0:	2f6f      	cmp	r7, #111	; 0x6f
 80079f2:	bf0c      	ite	eq
 80079f4:	2308      	moveq	r3, #8
 80079f6:	230a      	movne	r3, #10
 80079f8:	2100      	movs	r1, #0
 80079fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079fe:	6865      	ldr	r5, [r4, #4]
 8007a00:	60a5      	str	r5, [r4, #8]
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	bfa2      	ittt	ge
 8007a06:	6821      	ldrge	r1, [r4, #0]
 8007a08:	f021 0104 	bicge.w	r1, r1, #4
 8007a0c:	6021      	strge	r1, [r4, #0]
 8007a0e:	b90e      	cbnz	r6, 8007a14 <_printf_i+0x118>
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	d04d      	beq.n	8007ab0 <_printf_i+0x1b4>
 8007a14:	4615      	mov	r5, r2
 8007a16:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a1a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a1e:	5dc7      	ldrb	r7, [r0, r7]
 8007a20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a24:	4637      	mov	r7, r6
 8007a26:	42bb      	cmp	r3, r7
 8007a28:	460e      	mov	r6, r1
 8007a2a:	d9f4      	bls.n	8007a16 <_printf_i+0x11a>
 8007a2c:	2b08      	cmp	r3, #8
 8007a2e:	d10b      	bne.n	8007a48 <_printf_i+0x14c>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	07de      	lsls	r6, r3, #31
 8007a34:	d508      	bpl.n	8007a48 <_printf_i+0x14c>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	6861      	ldr	r1, [r4, #4]
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	bfde      	ittt	le
 8007a3e:	2330      	movle	r3, #48	; 0x30
 8007a40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a48:	1b52      	subs	r2, r2, r5
 8007a4a:	6122      	str	r2, [r4, #16]
 8007a4c:	f8cd a000 	str.w	sl, [sp]
 8007a50:	464b      	mov	r3, r9
 8007a52:	aa03      	add	r2, sp, #12
 8007a54:	4621      	mov	r1, r4
 8007a56:	4640      	mov	r0, r8
 8007a58:	f7ff fee3 	bl	8007822 <_printf_common>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	d14c      	bne.n	8007afa <_printf_i+0x1fe>
 8007a60:	f04f 30ff 	mov.w	r0, #4294967295
 8007a64:	b004      	add	sp, #16
 8007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6a:	4835      	ldr	r0, [pc, #212]	; (8007b40 <_printf_i+0x244>)
 8007a6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a70:	6829      	ldr	r1, [r5, #0]
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a78:	6029      	str	r1, [r5, #0]
 8007a7a:	061d      	lsls	r5, r3, #24
 8007a7c:	d514      	bpl.n	8007aa8 <_printf_i+0x1ac>
 8007a7e:	07df      	lsls	r7, r3, #31
 8007a80:	bf44      	itt	mi
 8007a82:	f043 0320 	orrmi.w	r3, r3, #32
 8007a86:	6023      	strmi	r3, [r4, #0]
 8007a88:	b91e      	cbnz	r6, 8007a92 <_printf_i+0x196>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	f023 0320 	bic.w	r3, r3, #32
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	2310      	movs	r3, #16
 8007a94:	e7b0      	b.n	80079f8 <_printf_i+0xfc>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f043 0320 	orr.w	r3, r3, #32
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	2378      	movs	r3, #120	; 0x78
 8007aa0:	4828      	ldr	r0, [pc, #160]	; (8007b44 <_printf_i+0x248>)
 8007aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007aa6:	e7e3      	b.n	8007a70 <_printf_i+0x174>
 8007aa8:	0659      	lsls	r1, r3, #25
 8007aaa:	bf48      	it	mi
 8007aac:	b2b6      	uxthmi	r6, r6
 8007aae:	e7e6      	b.n	8007a7e <_printf_i+0x182>
 8007ab0:	4615      	mov	r5, r2
 8007ab2:	e7bb      	b.n	8007a2c <_printf_i+0x130>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	6826      	ldr	r6, [r4, #0]
 8007ab8:	6961      	ldr	r1, [r4, #20]
 8007aba:	1d18      	adds	r0, r3, #4
 8007abc:	6028      	str	r0, [r5, #0]
 8007abe:	0635      	lsls	r5, r6, #24
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_i+0x1cc>
 8007ac4:	6019      	str	r1, [r3, #0]
 8007ac6:	e002      	b.n	8007ace <_printf_i+0x1d2>
 8007ac8:	0670      	lsls	r0, r6, #25
 8007aca:	d5fb      	bpl.n	8007ac4 <_printf_i+0x1c8>
 8007acc:	8019      	strh	r1, [r3, #0]
 8007ace:	2300      	movs	r3, #0
 8007ad0:	6123      	str	r3, [r4, #16]
 8007ad2:	4615      	mov	r5, r2
 8007ad4:	e7ba      	b.n	8007a4c <_printf_i+0x150>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	1d1a      	adds	r2, r3, #4
 8007ada:	602a      	str	r2, [r5, #0]
 8007adc:	681d      	ldr	r5, [r3, #0]
 8007ade:	6862      	ldr	r2, [r4, #4]
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7f8 fb74 	bl	80001d0 <memchr>
 8007ae8:	b108      	cbz	r0, 8007aee <_printf_i+0x1f2>
 8007aea:	1b40      	subs	r0, r0, r5
 8007aec:	6060      	str	r0, [r4, #4]
 8007aee:	6863      	ldr	r3, [r4, #4]
 8007af0:	6123      	str	r3, [r4, #16]
 8007af2:	2300      	movs	r3, #0
 8007af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007af8:	e7a8      	b.n	8007a4c <_printf_i+0x150>
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4649      	mov	r1, r9
 8007b00:	4640      	mov	r0, r8
 8007b02:	47d0      	blx	sl
 8007b04:	3001      	adds	r0, #1
 8007b06:	d0ab      	beq.n	8007a60 <_printf_i+0x164>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	079b      	lsls	r3, r3, #30
 8007b0c:	d413      	bmi.n	8007b36 <_printf_i+0x23a>
 8007b0e:	68e0      	ldr	r0, [r4, #12]
 8007b10:	9b03      	ldr	r3, [sp, #12]
 8007b12:	4298      	cmp	r0, r3
 8007b14:	bfb8      	it	lt
 8007b16:	4618      	movlt	r0, r3
 8007b18:	e7a4      	b.n	8007a64 <_printf_i+0x168>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4649      	mov	r1, r9
 8007b20:	4640      	mov	r0, r8
 8007b22:	47d0      	blx	sl
 8007b24:	3001      	adds	r0, #1
 8007b26:	d09b      	beq.n	8007a60 <_printf_i+0x164>
 8007b28:	3501      	adds	r5, #1
 8007b2a:	68e3      	ldr	r3, [r4, #12]
 8007b2c:	9903      	ldr	r1, [sp, #12]
 8007b2e:	1a5b      	subs	r3, r3, r1
 8007b30:	42ab      	cmp	r3, r5
 8007b32:	dcf2      	bgt.n	8007b1a <_printf_i+0x21e>
 8007b34:	e7eb      	b.n	8007b0e <_printf_i+0x212>
 8007b36:	2500      	movs	r5, #0
 8007b38:	f104 0619 	add.w	r6, r4, #25
 8007b3c:	e7f5      	b.n	8007b2a <_printf_i+0x22e>
 8007b3e:	bf00      	nop
 8007b40:	0800b80c 	.word	0x0800b80c
 8007b44:	0800b81d 	.word	0x0800b81d

08007b48 <__ascii_wctomb>:
 8007b48:	b149      	cbz	r1, 8007b5e <__ascii_wctomb+0x16>
 8007b4a:	2aff      	cmp	r2, #255	; 0xff
 8007b4c:	bf85      	ittet	hi
 8007b4e:	238a      	movhi	r3, #138	; 0x8a
 8007b50:	6003      	strhi	r3, [r0, #0]
 8007b52:	700a      	strbls	r2, [r1, #0]
 8007b54:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b58:	bf98      	it	ls
 8007b5a:	2001      	movls	r0, #1
 8007b5c:	4770      	bx	lr
 8007b5e:	4608      	mov	r0, r1
 8007b60:	4770      	bx	lr
	...

08007b64 <__assert_func>:
 8007b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b66:	4614      	mov	r4, r2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <__assert_func+0x2c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4605      	mov	r5, r0
 8007b70:	68d8      	ldr	r0, [r3, #12]
 8007b72:	b14c      	cbz	r4, 8007b88 <__assert_func+0x24>
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <__assert_func+0x30>)
 8007b76:	9100      	str	r1, [sp, #0]
 8007b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b7c:	4906      	ldr	r1, [pc, #24]	; (8007b98 <__assert_func+0x34>)
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f000 f80e 	bl	8007ba0 <fiprintf>
 8007b84:	f000 fa80 	bl	8008088 <abort>
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <__assert_func+0x38>)
 8007b8a:	461c      	mov	r4, r3
 8007b8c:	e7f3      	b.n	8007b76 <__assert_func+0x12>
 8007b8e:	bf00      	nop
 8007b90:	20000014 	.word	0x20000014
 8007b94:	0800b82e 	.word	0x0800b82e
 8007b98:	0800b83b 	.word	0x0800b83b
 8007b9c:	0800b869 	.word	0x0800b869

08007ba0 <fiprintf>:
 8007ba0:	b40e      	push	{r1, r2, r3}
 8007ba2:	b503      	push	{r0, r1, lr}
 8007ba4:	4601      	mov	r1, r0
 8007ba6:	ab03      	add	r3, sp, #12
 8007ba8:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <fiprintf+0x20>)
 8007baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bae:	6800      	ldr	r0, [r0, #0]
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	f000 f879 	bl	8007ca8 <_vfiprintf_r>
 8007bb6:	b002      	add	sp, #8
 8007bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bbc:	b003      	add	sp, #12
 8007bbe:	4770      	bx	lr
 8007bc0:	20000014 	.word	0x20000014

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4402      	add	r2, r0
 8007be6:	4601      	mov	r1, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <_realloc_r>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4614      	mov	r4, r2
 8007c00:	460e      	mov	r6, r1
 8007c02:	b921      	cbnz	r1, 8007c0e <_realloc_r+0x16>
 8007c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c08:	4611      	mov	r1, r2
 8007c0a:	f7fd bbc1 	b.w	8005390 <_malloc_r>
 8007c0e:	b92a      	cbnz	r2, 8007c1c <_realloc_r+0x24>
 8007c10:	f7fd fb52 	bl	80052b8 <_free_r>
 8007c14:	4625      	mov	r5, r4
 8007c16:	4628      	mov	r0, r5
 8007c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c1c:	f000 fa3b 	bl	8008096 <_malloc_usable_size_r>
 8007c20:	4284      	cmp	r4, r0
 8007c22:	4607      	mov	r7, r0
 8007c24:	d802      	bhi.n	8007c2c <_realloc_r+0x34>
 8007c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c2a:	d812      	bhi.n	8007c52 <_realloc_r+0x5a>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4640      	mov	r0, r8
 8007c30:	f7fd fbae 	bl	8005390 <_malloc_r>
 8007c34:	4605      	mov	r5, r0
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0ed      	beq.n	8007c16 <_realloc_r+0x1e>
 8007c3a:	42bc      	cmp	r4, r7
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	4631      	mov	r1, r6
 8007c40:	bf28      	it	cs
 8007c42:	463a      	movcs	r2, r7
 8007c44:	f7fd fb22 	bl	800528c <memcpy>
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	f7fd fb34 	bl	80052b8 <_free_r>
 8007c50:	e7e1      	b.n	8007c16 <_realloc_r+0x1e>
 8007c52:	4635      	mov	r5, r6
 8007c54:	e7df      	b.n	8007c16 <_realloc_r+0x1e>

08007c56 <__sfputc_r>:
 8007c56:	6893      	ldr	r3, [r2, #8]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	b410      	push	{r4}
 8007c5e:	6093      	str	r3, [r2, #8]
 8007c60:	da08      	bge.n	8007c74 <__sfputc_r+0x1e>
 8007c62:	6994      	ldr	r4, [r2, #24]
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	db01      	blt.n	8007c6c <__sfputc_r+0x16>
 8007c68:	290a      	cmp	r1, #10
 8007c6a:	d103      	bne.n	8007c74 <__sfputc_r+0x1e>
 8007c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c70:	f000 b94a 	b.w	8007f08 <__swbuf_r>
 8007c74:	6813      	ldr	r3, [r2, #0]
 8007c76:	1c58      	adds	r0, r3, #1
 8007c78:	6010      	str	r0, [r2, #0]
 8007c7a:	7019      	strb	r1, [r3, #0]
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <__sfputs_r>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	4606      	mov	r6, r0
 8007c88:	460f      	mov	r7, r1
 8007c8a:	4614      	mov	r4, r2
 8007c8c:	18d5      	adds	r5, r2, r3
 8007c8e:	42ac      	cmp	r4, r5
 8007c90:	d101      	bne.n	8007c96 <__sfputs_r+0x12>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e007      	b.n	8007ca6 <__sfputs_r+0x22>
 8007c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9a:	463a      	mov	r2, r7
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff ffda 	bl	8007c56 <__sfputc_r>
 8007ca2:	1c43      	adds	r3, r0, #1
 8007ca4:	d1f3      	bne.n	8007c8e <__sfputs_r+0xa>
 8007ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ca8 <_vfiprintf_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	460d      	mov	r5, r1
 8007cae:	b09d      	sub	sp, #116	; 0x74
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	4698      	mov	r8, r3
 8007cb4:	4606      	mov	r6, r0
 8007cb6:	b118      	cbz	r0, 8007cc0 <_vfiprintf_r+0x18>
 8007cb8:	6983      	ldr	r3, [r0, #24]
 8007cba:	b90b      	cbnz	r3, 8007cc0 <_vfiprintf_r+0x18>
 8007cbc:	f7fd f9bc 	bl	8005038 <__sinit>
 8007cc0:	4b89      	ldr	r3, [pc, #548]	; (8007ee8 <_vfiprintf_r+0x240>)
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	d11b      	bne.n	8007cfe <_vfiprintf_r+0x56>
 8007cc6:	6875      	ldr	r5, [r6, #4]
 8007cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cca:	07d9      	lsls	r1, r3, #31
 8007ccc:	d405      	bmi.n	8007cda <_vfiprintf_r+0x32>
 8007cce:	89ab      	ldrh	r3, [r5, #12]
 8007cd0:	059a      	lsls	r2, r3, #22
 8007cd2:	d402      	bmi.n	8007cda <_vfiprintf_r+0x32>
 8007cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cd6:	f7fd fa72 	bl	80051be <__retarget_lock_acquire_recursive>
 8007cda:	89ab      	ldrh	r3, [r5, #12]
 8007cdc:	071b      	lsls	r3, r3, #28
 8007cde:	d501      	bpl.n	8007ce4 <_vfiprintf_r+0x3c>
 8007ce0:	692b      	ldr	r3, [r5, #16]
 8007ce2:	b9eb      	cbnz	r3, 8007d20 <_vfiprintf_r+0x78>
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 f960 	bl	8007fac <__swsetup_r>
 8007cec:	b1c0      	cbz	r0, 8007d20 <_vfiprintf_r+0x78>
 8007cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cf0:	07dc      	lsls	r4, r3, #31
 8007cf2:	d50e      	bpl.n	8007d12 <_vfiprintf_r+0x6a>
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	b01d      	add	sp, #116	; 0x74
 8007cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfe:	4b7b      	ldr	r3, [pc, #492]	; (8007eec <_vfiprintf_r+0x244>)
 8007d00:	429d      	cmp	r5, r3
 8007d02:	d101      	bne.n	8007d08 <_vfiprintf_r+0x60>
 8007d04:	68b5      	ldr	r5, [r6, #8]
 8007d06:	e7df      	b.n	8007cc8 <_vfiprintf_r+0x20>
 8007d08:	4b79      	ldr	r3, [pc, #484]	; (8007ef0 <_vfiprintf_r+0x248>)
 8007d0a:	429d      	cmp	r5, r3
 8007d0c:	bf08      	it	eq
 8007d0e:	68f5      	ldreq	r5, [r6, #12]
 8007d10:	e7da      	b.n	8007cc8 <_vfiprintf_r+0x20>
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	0598      	lsls	r0, r3, #22
 8007d16:	d4ed      	bmi.n	8007cf4 <_vfiprintf_r+0x4c>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f7fd fa51 	bl	80051c0 <__retarget_lock_release_recursive>
 8007d1e:	e7e9      	b.n	8007cf4 <_vfiprintf_r+0x4c>
 8007d20:	2300      	movs	r3, #0
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	2320      	movs	r3, #32
 8007d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2e:	2330      	movs	r3, #48	; 0x30
 8007d30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ef4 <_vfiprintf_r+0x24c>
 8007d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d38:	f04f 0901 	mov.w	r9, #1
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	469a      	mov	sl, r3
 8007d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d44:	b10a      	cbz	r2, 8007d4a <_vfiprintf_r+0xa2>
 8007d46:	2a25      	cmp	r2, #37	; 0x25
 8007d48:	d1f9      	bne.n	8007d3e <_vfiprintf_r+0x96>
 8007d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4e:	d00b      	beq.n	8007d68 <_vfiprintf_r+0xc0>
 8007d50:	465b      	mov	r3, fp
 8007d52:	4622      	mov	r2, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ff94 	bl	8007c84 <__sfputs_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f000 80aa 	beq.w	8007eb6 <_vfiprintf_r+0x20e>
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	445a      	add	r2, fp
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80a2 	beq.w	8007eb6 <_vfiprintf_r+0x20e>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d88:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8a:	4654      	mov	r4, sl
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4858      	ldr	r0, [pc, #352]	; (8007ef4 <_vfiprintf_r+0x24c>)
 8007d94:	f7f8 fa1c 	bl	80001d0 <memchr>
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	b9d8      	cbnz	r0, 8007dd4 <_vfiprintf_r+0x12c>
 8007d9c:	06d1      	lsls	r1, r2, #27
 8007d9e:	bf44      	itt	mi
 8007da0:	2320      	movmi	r3, #32
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da6:	0713      	lsls	r3, r2, #28
 8007da8:	bf44      	itt	mi
 8007daa:	232b      	movmi	r3, #43	; 0x2b
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	f89a 3000 	ldrb.w	r3, [sl]
 8007db4:	2b2a      	cmp	r3, #42	; 0x2a
 8007db6:	d015      	beq.n	8007de4 <_vfiprintf_r+0x13c>
 8007db8:	9a07      	ldr	r2, [sp, #28]
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d94e      	bls.n	8007e6c <_vfiprintf_r+0x1c4>
 8007dce:	b1b0      	cbz	r0, 8007dfe <_vfiprintf_r+0x156>
 8007dd0:	9207      	str	r2, [sp, #28]
 8007dd2:	e014      	b.n	8007dfe <_vfiprintf_r+0x156>
 8007dd4:	eba0 0308 	sub.w	r3, r0, r8
 8007dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	46a2      	mov	sl, r4
 8007de2:	e7d2      	b.n	8007d8a <_vfiprintf_r+0xe2>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d19      	adds	r1, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9103      	str	r1, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbb      	ittet	lt
 8007df0:	425b      	neglt	r3, r3
 8007df2:	f042 0202 	orrlt.w	r2, r2, #2
 8007df6:	9307      	strge	r3, [sp, #28]
 8007df8:	9307      	strlt	r3, [sp, #28]
 8007dfa:	bfb8      	it	lt
 8007dfc:	9204      	strlt	r2, [sp, #16]
 8007dfe:	7823      	ldrb	r3, [r4, #0]
 8007e00:	2b2e      	cmp	r3, #46	; 0x2e
 8007e02:	d10c      	bne.n	8007e1e <_vfiprintf_r+0x176>
 8007e04:	7863      	ldrb	r3, [r4, #1]
 8007e06:	2b2a      	cmp	r3, #42	; 0x2a
 8007e08:	d135      	bne.n	8007e76 <_vfiprintf_r+0x1ce>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9203      	str	r2, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfb8      	it	lt
 8007e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1a:	3402      	adds	r4, #2
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f04 <_vfiprintf_r+0x25c>
 8007e22:	7821      	ldrb	r1, [r4, #0]
 8007e24:	2203      	movs	r2, #3
 8007e26:	4650      	mov	r0, sl
 8007e28:	f7f8 f9d2 	bl	80001d0 <memchr>
 8007e2c:	b140      	cbz	r0, 8007e40 <_vfiprintf_r+0x198>
 8007e2e:	2340      	movs	r3, #64	; 0x40
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	fa03 f000 	lsl.w	r0, r3, r0
 8007e38:	9b04      	ldr	r3, [sp, #16]
 8007e3a:	4303      	orrs	r3, r0
 8007e3c:	3401      	adds	r4, #1
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e44:	482c      	ldr	r0, [pc, #176]	; (8007ef8 <_vfiprintf_r+0x250>)
 8007e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e4a:	2206      	movs	r2, #6
 8007e4c:	f7f8 f9c0 	bl	80001d0 <memchr>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d03f      	beq.n	8007ed4 <_vfiprintf_r+0x22c>
 8007e54:	4b29      	ldr	r3, [pc, #164]	; (8007efc <_vfiprintf_r+0x254>)
 8007e56:	bb1b      	cbnz	r3, 8007ea0 <_vfiprintf_r+0x1f8>
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	3307      	adds	r3, #7
 8007e5c:	f023 0307 	bic.w	r3, r3, #7
 8007e60:	3308      	adds	r3, #8
 8007e62:	9303      	str	r3, [sp, #12]
 8007e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e66:	443b      	add	r3, r7
 8007e68:	9309      	str	r3, [sp, #36]	; 0x24
 8007e6a:	e767      	b.n	8007d3c <_vfiprintf_r+0x94>
 8007e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e70:	460c      	mov	r4, r1
 8007e72:	2001      	movs	r0, #1
 8007e74:	e7a5      	b.n	8007dc2 <_vfiprintf_r+0x11a>
 8007e76:	2300      	movs	r3, #0
 8007e78:	3401      	adds	r4, #1
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	4620      	mov	r0, r4
 8007e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e88:	3a30      	subs	r2, #48	; 0x30
 8007e8a:	2a09      	cmp	r2, #9
 8007e8c:	d903      	bls.n	8007e96 <_vfiprintf_r+0x1ee>
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d0c5      	beq.n	8007e1e <_vfiprintf_r+0x176>
 8007e92:	9105      	str	r1, [sp, #20]
 8007e94:	e7c3      	b.n	8007e1e <_vfiprintf_r+0x176>
 8007e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e7f0      	b.n	8007e82 <_vfiprintf_r+0x1da>
 8007ea0:	ab03      	add	r3, sp, #12
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <_vfiprintf_r+0x258>)
 8007ea8:	a904      	add	r1, sp, #16
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f3af 8000 	nop.w
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	1c78      	adds	r0, r7, #1
 8007eb4:	d1d6      	bne.n	8007e64 <_vfiprintf_r+0x1bc>
 8007eb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb8:	07d9      	lsls	r1, r3, #31
 8007eba:	d405      	bmi.n	8007ec8 <_vfiprintf_r+0x220>
 8007ebc:	89ab      	ldrh	r3, [r5, #12]
 8007ebe:	059a      	lsls	r2, r3, #22
 8007ec0:	d402      	bmi.n	8007ec8 <_vfiprintf_r+0x220>
 8007ec2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec4:	f7fd f97c 	bl	80051c0 <__retarget_lock_release_recursive>
 8007ec8:	89ab      	ldrh	r3, [r5, #12]
 8007eca:	065b      	lsls	r3, r3, #25
 8007ecc:	f53f af12 	bmi.w	8007cf4 <_vfiprintf_r+0x4c>
 8007ed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed2:	e711      	b.n	8007cf8 <_vfiprintf_r+0x50>
 8007ed4:	ab03      	add	r3, sp, #12
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <_vfiprintf_r+0x258>)
 8007edc:	a904      	add	r1, sp, #16
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7ff fd0c 	bl	80078fc <_printf_i>
 8007ee4:	e7e4      	b.n	8007eb0 <_vfiprintf_r+0x208>
 8007ee6:	bf00      	nop
 8007ee8:	0800b428 	.word	0x0800b428
 8007eec:	0800b448 	.word	0x0800b448
 8007ef0:	0800b408 	.word	0x0800b408
 8007ef4:	0800b96b 	.word	0x0800b96b
 8007ef8:	0800b975 	.word	0x0800b975
 8007efc:	00000000 	.word	0x00000000
 8007f00:	08007c85 	.word	0x08007c85
 8007f04:	0800b971 	.word	0x0800b971

08007f08 <__swbuf_r>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	460e      	mov	r6, r1
 8007f0c:	4614      	mov	r4, r2
 8007f0e:	4605      	mov	r5, r0
 8007f10:	b118      	cbz	r0, 8007f1a <__swbuf_r+0x12>
 8007f12:	6983      	ldr	r3, [r0, #24]
 8007f14:	b90b      	cbnz	r3, 8007f1a <__swbuf_r+0x12>
 8007f16:	f7fd f88f 	bl	8005038 <__sinit>
 8007f1a:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <__swbuf_r+0x98>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	d12b      	bne.n	8007f78 <__swbuf_r+0x70>
 8007f20:	686c      	ldr	r4, [r5, #4]
 8007f22:	69a3      	ldr	r3, [r4, #24]
 8007f24:	60a3      	str	r3, [r4, #8]
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	071a      	lsls	r2, r3, #28
 8007f2a:	d52f      	bpl.n	8007f8c <__swbuf_r+0x84>
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	b36b      	cbz	r3, 8007f8c <__swbuf_r+0x84>
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	6820      	ldr	r0, [r4, #0]
 8007f34:	1ac0      	subs	r0, r0, r3
 8007f36:	6963      	ldr	r3, [r4, #20]
 8007f38:	b2f6      	uxtb	r6, r6
 8007f3a:	4283      	cmp	r3, r0
 8007f3c:	4637      	mov	r7, r6
 8007f3e:	dc04      	bgt.n	8007f4a <__swbuf_r+0x42>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7fc ffe4 	bl	8004f10 <_fflush_r>
 8007f48:	bb30      	cbnz	r0, 8007f98 <__swbuf_r+0x90>
 8007f4a:	68a3      	ldr	r3, [r4, #8]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	60a3      	str	r3, [r4, #8]
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	6022      	str	r2, [r4, #0]
 8007f56:	701e      	strb	r6, [r3, #0]
 8007f58:	6963      	ldr	r3, [r4, #20]
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	4283      	cmp	r3, r0
 8007f5e:	d004      	beq.n	8007f6a <__swbuf_r+0x62>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	07db      	lsls	r3, r3, #31
 8007f64:	d506      	bpl.n	8007f74 <__swbuf_r+0x6c>
 8007f66:	2e0a      	cmp	r6, #10
 8007f68:	d104      	bne.n	8007f74 <__swbuf_r+0x6c>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f7fc ffcf 	bl	8004f10 <_fflush_r>
 8007f72:	b988      	cbnz	r0, 8007f98 <__swbuf_r+0x90>
 8007f74:	4638      	mov	r0, r7
 8007f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f78:	4b0a      	ldr	r3, [pc, #40]	; (8007fa4 <__swbuf_r+0x9c>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	d101      	bne.n	8007f82 <__swbuf_r+0x7a>
 8007f7e:	68ac      	ldr	r4, [r5, #8]
 8007f80:	e7cf      	b.n	8007f22 <__swbuf_r+0x1a>
 8007f82:	4b09      	ldr	r3, [pc, #36]	; (8007fa8 <__swbuf_r+0xa0>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	bf08      	it	eq
 8007f88:	68ec      	ldreq	r4, [r5, #12]
 8007f8a:	e7ca      	b.n	8007f22 <__swbuf_r+0x1a>
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f80c 	bl	8007fac <__swsetup_r>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d0cb      	beq.n	8007f30 <__swbuf_r+0x28>
 8007f98:	f04f 37ff 	mov.w	r7, #4294967295
 8007f9c:	e7ea      	b.n	8007f74 <__swbuf_r+0x6c>
 8007f9e:	bf00      	nop
 8007fa0:	0800b428 	.word	0x0800b428
 8007fa4:	0800b448 	.word	0x0800b448
 8007fa8:	0800b408 	.word	0x0800b408

08007fac <__swsetup_r>:
 8007fac:	4b32      	ldr	r3, [pc, #200]	; (8008078 <__swsetup_r+0xcc>)
 8007fae:	b570      	push	{r4, r5, r6, lr}
 8007fb0:	681d      	ldr	r5, [r3, #0]
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	b125      	cbz	r5, 8007fc2 <__swsetup_r+0x16>
 8007fb8:	69ab      	ldr	r3, [r5, #24]
 8007fba:	b913      	cbnz	r3, 8007fc2 <__swsetup_r+0x16>
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f7fd f83b 	bl	8005038 <__sinit>
 8007fc2:	4b2e      	ldr	r3, [pc, #184]	; (800807c <__swsetup_r+0xd0>)
 8007fc4:	429c      	cmp	r4, r3
 8007fc6:	d10f      	bne.n	8007fe8 <__swsetup_r+0x3c>
 8007fc8:	686c      	ldr	r4, [r5, #4]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd0:	0719      	lsls	r1, r3, #28
 8007fd2:	d42c      	bmi.n	800802e <__swsetup_r+0x82>
 8007fd4:	06dd      	lsls	r5, r3, #27
 8007fd6:	d411      	bmi.n	8007ffc <__swsetup_r+0x50>
 8007fd8:	2309      	movs	r3, #9
 8007fda:	6033      	str	r3, [r6, #0]
 8007fdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe6:	e03e      	b.n	8008066 <__swsetup_r+0xba>
 8007fe8:	4b25      	ldr	r3, [pc, #148]	; (8008080 <__swsetup_r+0xd4>)
 8007fea:	429c      	cmp	r4, r3
 8007fec:	d101      	bne.n	8007ff2 <__swsetup_r+0x46>
 8007fee:	68ac      	ldr	r4, [r5, #8]
 8007ff0:	e7eb      	b.n	8007fca <__swsetup_r+0x1e>
 8007ff2:	4b24      	ldr	r3, [pc, #144]	; (8008084 <__swsetup_r+0xd8>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	bf08      	it	eq
 8007ff8:	68ec      	ldreq	r4, [r5, #12]
 8007ffa:	e7e6      	b.n	8007fca <__swsetup_r+0x1e>
 8007ffc:	0758      	lsls	r0, r3, #29
 8007ffe:	d512      	bpl.n	8008026 <__swsetup_r+0x7a>
 8008000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008002:	b141      	cbz	r1, 8008016 <__swsetup_r+0x6a>
 8008004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008008:	4299      	cmp	r1, r3
 800800a:	d002      	beq.n	8008012 <__swsetup_r+0x66>
 800800c:	4630      	mov	r0, r6
 800800e:	f7fd f953 	bl	80052b8 <_free_r>
 8008012:	2300      	movs	r3, #0
 8008014:	6363      	str	r3, [r4, #52]	; 0x34
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	2300      	movs	r3, #0
 8008020:	6063      	str	r3, [r4, #4]
 8008022:	6923      	ldr	r3, [r4, #16]
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	89a3      	ldrh	r3, [r4, #12]
 8008028:	f043 0308 	orr.w	r3, r3, #8
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	b94b      	cbnz	r3, 8008046 <__swsetup_r+0x9a>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800803c:	d003      	beq.n	8008046 <__swsetup_r+0x9a>
 800803e:	4621      	mov	r1, r4
 8008040:	4630      	mov	r0, r6
 8008042:	f7fd f8e3 	bl	800520c <__smakebuf_r>
 8008046:	89a0      	ldrh	r0, [r4, #12]
 8008048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800804c:	f010 0301 	ands.w	r3, r0, #1
 8008050:	d00a      	beq.n	8008068 <__swsetup_r+0xbc>
 8008052:	2300      	movs	r3, #0
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	6963      	ldr	r3, [r4, #20]
 8008058:	425b      	negs	r3, r3
 800805a:	61a3      	str	r3, [r4, #24]
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b943      	cbnz	r3, 8008072 <__swsetup_r+0xc6>
 8008060:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008064:	d1ba      	bne.n	8007fdc <__swsetup_r+0x30>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	0781      	lsls	r1, r0, #30
 800806a:	bf58      	it	pl
 800806c:	6963      	ldrpl	r3, [r4, #20]
 800806e:	60a3      	str	r3, [r4, #8]
 8008070:	e7f4      	b.n	800805c <__swsetup_r+0xb0>
 8008072:	2000      	movs	r0, #0
 8008074:	e7f7      	b.n	8008066 <__swsetup_r+0xba>
 8008076:	bf00      	nop
 8008078:	20000014 	.word	0x20000014
 800807c:	0800b428 	.word	0x0800b428
 8008080:	0800b448 	.word	0x0800b448
 8008084:	0800b408 	.word	0x0800b408

08008088 <abort>:
 8008088:	b508      	push	{r3, lr}
 800808a:	2006      	movs	r0, #6
 800808c:	f000 f834 	bl	80080f8 <raise>
 8008090:	2001      	movs	r0, #1
 8008092:	f7f9 fb33 	bl	80016fc <_exit>

08008096 <_malloc_usable_size_r>:
 8008096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809a:	1f18      	subs	r0, r3, #4
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfbc      	itt	lt
 80080a0:	580b      	ldrlt	r3, [r1, r0]
 80080a2:	18c0      	addlt	r0, r0, r3
 80080a4:	4770      	bx	lr

080080a6 <_raise_r>:
 80080a6:	291f      	cmp	r1, #31
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4604      	mov	r4, r0
 80080ac:	460d      	mov	r5, r1
 80080ae:	d904      	bls.n	80080ba <_raise_r+0x14>
 80080b0:	2316      	movs	r3, #22
 80080b2:	6003      	str	r3, [r0, #0]
 80080b4:	f04f 30ff 	mov.w	r0, #4294967295
 80080b8:	bd38      	pop	{r3, r4, r5, pc}
 80080ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080bc:	b112      	cbz	r2, 80080c4 <_raise_r+0x1e>
 80080be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c2:	b94b      	cbnz	r3, 80080d8 <_raise_r+0x32>
 80080c4:	4620      	mov	r0, r4
 80080c6:	f000 f831 	bl	800812c <_getpid_r>
 80080ca:	462a      	mov	r2, r5
 80080cc:	4601      	mov	r1, r0
 80080ce:	4620      	mov	r0, r4
 80080d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d4:	f000 b818 	b.w	8008108 <_kill_r>
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d00a      	beq.n	80080f2 <_raise_r+0x4c>
 80080dc:	1c59      	adds	r1, r3, #1
 80080de:	d103      	bne.n	80080e8 <_raise_r+0x42>
 80080e0:	2316      	movs	r3, #22
 80080e2:	6003      	str	r3, [r0, #0]
 80080e4:	2001      	movs	r0, #1
 80080e6:	e7e7      	b.n	80080b8 <_raise_r+0x12>
 80080e8:	2400      	movs	r4, #0
 80080ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080ee:	4628      	mov	r0, r5
 80080f0:	4798      	blx	r3
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7e0      	b.n	80080b8 <_raise_r+0x12>
	...

080080f8 <raise>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <raise+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff bfd2 	b.w	80080a6 <_raise_r>
 8008102:	bf00      	nop
 8008104:	20000014 	.word	0x20000014

08008108 <_kill_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_kill_r+0x20>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f9 fae1 	bl	80016dc <_kill>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_kill_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_kill_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	2000a2f0 	.word	0x2000a2f0

0800812c <_getpid_r>:
 800812c:	f7f9 bace 	b.w	80016cc <_getpid>

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
