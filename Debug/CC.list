
CC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030c4  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e4  080060e4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080060e4  080060e4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060e4  080060e4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080060ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a084  20000014  08006100  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a098  08006100  0002a098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a23d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f09  00000000  00000000  0002a281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0002c190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259a0  00000000  00000000  0002d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfa7  00000000  00000000  00052df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6249  00000000  00000000  0005ed9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144fe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000260c  00000000  00000000  00145038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003008 	.word	0x08003008

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003008 	.word	0x08003008

080001c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001de:	4b1e      	ldr	r3, [pc, #120]	; (8000258 <MX_GPIO_Init+0x90>)
 80001e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e2:	4a1d      	ldr	r2, [pc, #116]	; (8000258 <MX_GPIO_Init+0x90>)
 80001e4:	f043 0304 	orr.w	r3, r3, #4
 80001e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ea:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <MX_GPIO_Init+0x90>)
 80001ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001ee:	f003 0304 	and.w	r3, r3, #4
 80001f2:	60bb      	str	r3, [r7, #8]
 80001f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <MX_GPIO_Init+0x90>)
 80001f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fa:	4a17      	ldr	r2, [pc, #92]	; (8000258 <MX_GPIO_Init+0x90>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000202:	4b15      	ldr	r3, [pc, #84]	; (8000258 <MX_GPIO_Init+0x90>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	f003 0302 	and.w	r3, r3, #2
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <MX_GPIO_Init+0x90>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	4a11      	ldr	r2, [pc, #68]	; (8000258 <MX_GPIO_Init+0x90>)
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_GPIO_Init+0x90>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	f003 0301 	and.w	r3, r3, #1
 8000222:	603b      	str	r3, [r7, #0]
 8000224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	f641 0104 	movw	r1, #6148	; 0x1804
 800022c:	480b      	ldr	r0, [pc, #44]	; (800025c <MX_GPIO_Init+0x94>)
 800022e:	f000 fe49 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000232:	f641 0304 	movw	r3, #6148	; 0x1804
 8000236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000238:	2301      	movs	r3, #1
 800023a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023c:	2300      	movs	r3, #0
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	4619      	mov	r1, r3
 800024a:	4804      	ldr	r0, [pc, #16]	; (800025c <MX_GPIO_Init+0x94>)
 800024c:	f000 fc90 	bl	8000b70 <HAL_GPIO_Init>

}
 8000250:	bf00      	nop
 8000252:	3720      	adds	r7, #32
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	40021000 	.word	0x40021000
 800025c:	48000400 	.word	0x48000400

08000260 <lcd_cmd>:
#define ST7735S_VMCTR1			0xc5
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1

static void lcd_cmd(uint8_t cmd)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000270:	480c      	ldr	r0, [pc, #48]	; (80002a4 <lcd_cmd+0x44>)
 8000272:	f000 fe27 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800027c:	4809      	ldr	r0, [pc, #36]	; (80002a4 <lcd_cmd+0x44>)
 800027e:	f000 fe21 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000282:	1df9      	adds	r1, r7, #7
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
 8000288:	2201      	movs	r2, #1
 800028a:	4807      	ldr	r0, [pc, #28]	; (80002a8 <lcd_cmd+0x48>)
 800028c:	f001 fd01 	bl	8001c92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000290:	2201      	movs	r2, #1
 8000292:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000296:	4803      	ldr	r0, [pc, #12]	; (80002a4 <lcd_cmd+0x44>)
 8000298:	f000 fe14 	bl	8000ec4 <HAL_GPIO_WritePin>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	48000400 	.word	0x48000400
 80002a8:	2000a030 	.word	0x2000a030

080002ac <lcd_data>:

static void lcd_data(uint8_t data)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <lcd_data+0x44>)
 80002be:	f000 fe01 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <lcd_data+0x44>)
 80002ca:	f000 fdfb 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80002ce:	1df9      	adds	r1, r7, #7
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	2201      	movs	r2, #1
 80002d6:	4807      	ldr	r0, [pc, #28]	; (80002f4 <lcd_data+0x48>)
 80002d8:	f001 fcdb 	bl	8001c92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <lcd_data+0x44>)
 80002e4:	f000 fdee 	bl	8000ec4 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	48000400 	.word	0x48000400
 80002f4:	2000a030 	.word	0x2000a030

080002f8 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(
  uint16_t value)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000302:	88fb      	ldrh	r3, [r7, #6]
 8000304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000308:	2b00      	cmp	r3, #0
 800030a:	d005      	beq.n	8000318 <lcd_send+0x20>
		lcd_cmd(value);
 800030c:	88fb      	ldrh	r3, [r7, #6]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ffa5 	bl	8000260 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000316:	e004      	b.n	8000322 <lcd_send+0x2a>
		lcd_data(value);
 8000318:	88fb      	ldrh	r3, [r7, #6]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ffc5 	bl	80002ac <lcd_data>
}
 8000322:	bf00      	nop
 8000324:	3708      	adds	r7, #8
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <lcd_init>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

void lcd_init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2104      	movs	r1, #4
 8000336:	4817      	ldr	r0, [pc, #92]	; (8000394 <lcd_init+0x68>)
 8000338:	f000 fdc4 	bl	8000ec4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800033c:	2064      	movs	r0, #100	; 0x64
 800033e:	f000 fb0d 	bl	800095c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2104      	movs	r1, #4
 8000346:	4813      	ldr	r0, [pc, #76]	; (8000394 <lcd_init+0x68>)
 8000348:	f000 fdbc 	bl	8000ec4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800034c:	2064      	movs	r0, #100	; 0x64
 800034e:	f000 fb05 	bl	800095c <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e009      	b.n	800036c <lcd_init+0x40>
    lcd_send(init_table[i]);
 8000358:	4a0f      	ldr	r2, [pc, #60]	; (8000398 <lcd_init+0x6c>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffc9 	bl	80002f8 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b4b      	cmp	r3, #75	; 0x4b
 8000370:	d9f2      	bls.n	8000358 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000372:	20c8      	movs	r0, #200	; 0xc8
 8000374:	f000 faf2 	bl	800095c <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8000378:	2011      	movs	r0, #17
 800037a:	f7ff ff71 	bl	8000260 <lcd_cmd>
  HAL_Delay(120);
 800037e:	2078      	movs	r0, #120	; 0x78
 8000380:	f000 faec 	bl	800095c <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000384:	2029      	movs	r0, #41	; 0x29
 8000386:	f7ff ff6b 	bl	8000260 <lcd_cmd>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	48000400 	.word	0x48000400
 8000398:	08003054 	.word	0x08003054

0800039c <lcd_data16>:




static void lcd_data16(uint16_t value)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 80003a6:	88fb      	ldrh	r3, [r7, #6]
 80003a8:	0a1b      	lsrs	r3, r3, #8
 80003aa:	b29b      	uxth	r3, r3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff7c 	bl	80002ac <lcd_data>
	lcd_data(value);
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff77 	bl	80002ac <lcd_data>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <lcd_set_window>:
#define LCD_OFFSET_Y  2
#define LCD_OFFSET_X  1
#define LCD_OFFSET_Y  2

static void lcd_set_window(int x, int y, int width, int height)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b084      	sub	sp, #16
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
 80003d2:	603b      	str	r3, [r7, #0]
  lcd_cmd(ST7735S_CASET);
 80003d4:	202a      	movs	r0, #42	; 0x2a
 80003d6:	f7ff ff43 	bl	8000260 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	b29b      	uxth	r3, r3
 80003de:	3301      	adds	r3, #1
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ffda 	bl	800039c <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	4413      	add	r3, r2
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ffd1 	bl	800039c <lcd_data16>
 
  lcd_cmd(ST7735S_RASET);
 80003fa:	202b      	movs	r0, #43	; 0x2b
 80003fc:	f7ff ff30 	bl	8000260 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	b29b      	uxth	r3, r3
 8000404:	3302      	adds	r3, #2
 8000406:	b29b      	uxth	r3, r3
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ffc7 	bl	800039c <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	b29a      	uxth	r2, r3
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	b29b      	uxth	r3, r3
 8000416:	4413      	add	r3, r2
 8000418:	b29b      	uxth	r3, r3
 800041a:	3301      	adds	r3, #1
 800041c:	b29b      	uxth	r3, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ffbc 	bl	800039c <lcd_data16>
}
 8000424:	bf00      	nop
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}

0800042c <lcd_put_pixel>:
		lcd_data16(color);
}


void lcd_put_pixel(int x, int y, uint16_t color)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	4613      	mov	r3, r2
 8000438:	80fb      	strh	r3, [r7, #6]
	frame_buffer[x + y * LCD_WIDTH] = color;
 800043a:	68ba      	ldr	r2, [r7, #8]
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	015b      	lsls	r3, r3, #5
 8000444:	461a      	mov	r2, r3
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	4413      	add	r3, r2
 800044a:	4905      	ldr	r1, [pc, #20]	; (8000460 <lcd_put_pixel+0x34>)
 800044c:	88fa      	ldrh	r2, [r7, #6]
 800044e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000030 	.word	0x20000030

08000464 <lcd_copy>:
//bufor
static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];


void lcd_copy(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	22a0      	movs	r2, #160	; 0xa0
 800046c:	2100      	movs	r1, #0
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ffa9 	bl	80003c6 <lcd_set_window>
	lcd_cmd(ST7735S_RAMWR);
 8000474:	202c      	movs	r0, #44	; 0x2c
 8000476:	f7ff fef3 	bl	8000260 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <lcd_copy+0x50>)
 8000482:	f000 fd1f 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <lcd_copy+0x50>)
 800048e:	f000 fd19 	bl	8000ec4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer), HAL_MAX_DELAY);
 8000492:	f04f 33ff 	mov.w	r3, #4294967295
 8000496:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800049a:	4907      	ldr	r1, [pc, #28]	; (80004b8 <lcd_copy+0x54>)
 800049c:	4807      	ldr	r0, [pc, #28]	; (80004bc <lcd_copy+0x58>)
 800049e:	f001 fbf8 	bl	8001c92 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80004a2:	2201      	movs	r2, #1
 80004a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <lcd_copy+0x50>)
 80004aa:	f000 fd0b 	bl	8000ec4 <HAL_GPIO_WritePin>
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	48000400 	.word	0x48000400
 80004b8:	20000030 	.word	0x20000030
 80004bc:	2000a030 	.word	0x2000a030

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9d3 	bl	8000872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f850 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f7ff fe7a 	bl	80001c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004d4:	f000 f8a4 	bl	8000620 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
lcd_init();
 80004d8:	f7ff ff28 	bl	800032c <lcd_init>
 

for (int i = 0; i < 8; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	e032      	b.n	8000548 <main+0x88>
  hagl_draw_rounded_rectangle(2+i, 2+i, 158-i, 126-i, 8-i, rgb565(0, 0, i*16));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	3302      	adds	r3, #2
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	b21d      	sxth	r5, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	3302      	adds	r3, #2
 80004f2:	b29b      	uxth	r3, r3
 80004f4:	b21e      	sxth	r6, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	f1c3 039e 	rsb	r3, r3, #158	; 0x9e
 80004fe:	b29b      	uxth	r3, r3
 8000500:	fa0f f883 	sxth.w	r8, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	b29b      	uxth	r3, r3
 8000508:	f1c3 037e 	rsb	r3, r3, #126	; 0x7e
 800050c:	b29b      	uxth	r3, r3
 800050e:	fa0f f983 	sxth.w	r9, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	b29b      	uxth	r3, r3
 8000516:	f1c3 0308 	rsb	r3, r3, #8
 800051a:	b29b      	uxth	r3, r3
 800051c:	b21c      	sxth	r4, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	011b      	lsls	r3, r3, #4
 8000524:	b2db      	uxtb	r3, r3
 8000526:	461a      	mov	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	2000      	movs	r0, #0
 800052c:	f002 fd00 	bl	8002f30 <rgb565>
 8000530:	4603      	mov	r3, r0
 8000532:	9301      	str	r3, [sp, #4]
 8000534:	9400      	str	r4, [sp, #0]
 8000536:	464b      	mov	r3, r9
 8000538:	4642      	mov	r2, r8
 800053a:	4631      	mov	r1, r6
 800053c:	4628      	mov	r0, r5
 800053e:	f002 fb5d 	bl	8002bfc <hagl_draw_rounded_rectangle>
for (int i = 0; i < 8; i++) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3301      	adds	r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b07      	cmp	r3, #7
 800054c:	ddc9      	ble.n	80004e2 <main+0x22>
}

hagl_put_text(L"Hello World!", 40, 55, YELLOW, font6x9);
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <main+0xa8>)
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 8000556:	2237      	movs	r2, #55	; 0x37
 8000558:	2128      	movs	r1, #40	; 0x28
 800055a:	4804      	ldr	r0, [pc, #16]	; (800056c <main+0xac>)
 800055c:	f002 fac6 	bl	8002aec <hagl_put_text>
 
lcd_copy();
 8000560:	f7ff ff80 	bl	8000464 <lcd_copy>
  while (1)
 8000564:	e7fe      	b.n	8000564 <main+0xa4>
 8000566:	bf00      	nop
 8000568:	080030ec 	.word	0x080030ec
 800056c:	08003020 	.word	0x08003020

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	; 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fd3a 	bl	8002ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000596:	f000 fcbb 	bl	8000f10 <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 f838 	bl	8000614 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	; 0x60
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c0:	2328      	movs	r3, #40	; 0x28
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fcf1 	bl	8000fbc <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005e0:	f000 f818 	bl	8000614 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 f8b9 	bl	8001774 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000608:	f000 f804 	bl	8000614 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3758      	adds	r7, #88	; 0x58
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000618:	b672      	cpsid	i
}
 800061a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061c:	e7fe      	b.n	800061c <Error_Handler+0x8>
	...

08000620 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_SPI2_Init+0x74>)
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_SPI2_Init+0x78>)
 8000628:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_SPI2_Init+0x74>)
 800062c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000630:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_SPI2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_SPI2_Init+0x74>)
 800063a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800063e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_SPI2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_SPI2_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_SPI2_Init+0x74>)
 800064e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000652:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_SPI2_Init+0x74>)
 8000656:	2210      	movs	r2, #16
 8000658:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_SPI2_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_SPI2_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_SPI2_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_SPI2_Init+0x74>)
 800066e:	2207      	movs	r2, #7
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_SPI2_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_SPI2_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_SPI2_Init+0x74>)
 8000680:	f001 fa64 	bl	8001b4c <HAL_SPI_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800068a:	f7ff ffc3 	bl	8000614 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000a030 	.word	0x2000a030
 8000698:	40003800 	.word	0x40003800

0800069c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a25      	ldr	r2, [pc, #148]	; (8000750 <HAL_SPI_MspInit+0xb4>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d144      	bne.n	8000748 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c2:	4a24      	ldr	r2, [pc, #144]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6593      	str	r3, [r2, #88]	; 0x58
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a18      	ldr	r2, [pc, #96]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <HAL_SPI_MspInit+0xb8>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000706:	2308      	movs	r3, #8
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000716:	2305      	movs	r3, #5
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <HAL_SPI_MspInit+0xbc>)
 8000722:	f000 fa25 	bl	8000b70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000734:	2303      	movs	r3, #3
 8000736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000738:	2305      	movs	r3, #5
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <HAL_SPI_MspInit+0xc0>)
 8000744:	f000 fa14 	bl	8000b70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	; 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40003800 	.word	0x40003800
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x44>)
 8000768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076a:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <HAL_MspInit+0x44>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6613      	str	r3, [r2, #96]	; 0x60
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <HAL_MspInit+0x44>)
 8000774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <HAL_MspInit+0x44>)
 8000780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <HAL_MspInit+0x44>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6593      	str	r3, [r2, #88]	; 0x58
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_MspInit+0x44>)
 800078c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <NMI_Handler+0x4>

080007ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <MemManage_Handler+0x4>

080007ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <BusFault_Handler+0x4>

080007c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <UsageFault_Handler+0x4>

080007c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f892 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	; (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000824:	f7ff ffea 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopForever+0x6>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopForever+0xe>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopForever+0x16>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f002 fba1 	bl	8002f94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000852:	f7ff fe35 	bl	80004c0 <main>

08000856 <LoopForever>:

LoopForever:
    b LoopForever
 8000856:	e7fe      	b.n	8000856 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000858:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800085c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000860:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000864:	080060ec 	.word	0x080060ec
  ldr r2, =_sbss
 8000868:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800086c:	2000a098 	.word	0x2000a098

08000870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC1_2_IRQHandler>

08000872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f943 	bl	8000b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	200f      	movs	r0, #15
 8000884:	f000 f80e 	bl	80008a4 <HAL_InitTick>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d002      	beq.n	8000894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	71fb      	strb	r3, [r7, #7]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000894:	f7ff ff64 	bl	8000760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ac:	2300      	movs	r3, #0
 80008ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_InitTick+0x6c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d023      	beq.n	8000900 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_InitTick+0x70>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_InitTick+0x6c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f941 	bl	8000b56 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10f      	bne.n	80008fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d809      	bhi.n	80008f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f919 	bl	8000b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_InitTick+0x74>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
 80008f2:	e007      	b.n	8000904 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e004      	b.n	8000904 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	73fb      	strb	r3, [r7, #15]
 80008fe:	e001      	b.n	8000904 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000904:	7bfb      	ldrb	r3, [r7, #15]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000008 	.word	0x20000008
 8000914:	20000000 	.word	0x20000000
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	2000a094 	.word	0x2000a094

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000a094 	.word	0x2000a094

0800095c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000964:	f7ff ffee 	bl	8000944 <HAL_GetTick>
 8000968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000974:	d005      	beq.n	8000982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_Delay+0x44>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	4413      	add	r3, r2
 8000980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000982:	bf00      	nop
 8000984:	f7ff ffde 	bl	8000944 <HAL_GetTick>
 8000988:	4602      	mov	r2, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	429a      	cmp	r2, r3
 8000992:	d8f7      	bhi.n	8000984 <HAL_Delay+0x28>
  {
  }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	6039      	str	r1, [r7, #0]
 8000a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	db0a      	blt.n	8000a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	490c      	ldr	r1, [pc, #48]	; (8000a54 <__NVIC_SetPriority+0x4c>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	0112      	lsls	r2, r2, #4
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	440b      	add	r3, r1
 8000a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a30:	e00a      	b.n	8000a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4908      	ldr	r1, [pc, #32]	; (8000a58 <__NVIC_SetPriority+0x50>)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	f003 030f 	and.w	r3, r3, #15
 8000a3e:	3b04      	subs	r3, #4
 8000a40:	0112      	lsls	r2, r2, #4
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	440b      	add	r3, r1
 8000a46:	761a      	strb	r2, [r3, #24]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000e100 	.word	0xe000e100
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b089      	sub	sp, #36	; 0x24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f003 0307 	and.w	r3, r3, #7
 8000a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	f1c3 0307 	rsb	r3, r3, #7
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	bf28      	it	cs
 8000a7a:	2304      	movcs	r3, #4
 8000a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3304      	adds	r3, #4
 8000a82:	2b06      	cmp	r3, #6
 8000a84:	d902      	bls.n	8000a8c <NVIC_EncodePriority+0x30>
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	e000      	b.n	8000a8e <NVIC_EncodePriority+0x32>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	f04f 32ff 	mov.w	r2, #4294967295
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9a:	43da      	mvns	r2, r3
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000aae:	43d9      	mvns	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	4313      	orrs	r3, r2
         );
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3724      	adds	r7, #36	; 0x24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ad4:	d301      	bcc.n	8000ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e00f      	b.n	8000afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <SysTick_Config+0x40>)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae2:	210f      	movs	r1, #15
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	f7ff ff8e 	bl	8000a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <SysTick_Config+0x40>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SysTick_Config+0x40>)
 8000af4:	2207      	movs	r2, #7
 8000af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	e000e010 	.word	0xe000e010

08000b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff47 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
 8000b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b30:	f7ff ff5c 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	68b9      	ldr	r1, [r7, #8]
 8000b3a:	6978      	ldr	r0, [r7, #20]
 8000b3c:	f7ff ff8e 	bl	8000a5c <NVIC_EncodePriority>
 8000b40:	4602      	mov	r2, r0
 8000b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff ff5d 	bl	8000a08 <__NVIC_SetPriority>
}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff ffb0 	bl	8000ac4 <SysTick_Config>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	e17f      	b.n	8000e80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 8171 	beq.w	8000e7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d005      	beq.n	8000bb0 <HAL_GPIO_Init+0x40>
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	f003 0201 	and.w	r2, r3, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d118      	bne.n	8000c50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c24:	2201      	movs	r2, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	08db      	lsrs	r3, r3, #3
 8000c3a:	f003 0201 	and.w	r2, r3, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d017      	beq.n	8000c8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	2203      	movs	r2, #3
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0303 	and.w	r3, r3, #3
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d123      	bne.n	8000ce0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	08da      	lsrs	r2, r3, #3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3208      	adds	r2, #8
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f003 0307 	and.w	r3, r3, #7
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	220f      	movs	r2, #15
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	08da      	lsrs	r2, r3, #3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3208      	adds	r2, #8
 8000cda:	6939      	ldr	r1, [r7, #16]
 8000cdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f003 0203 	and.w	r2, r3, #3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 80ac 	beq.w	8000e7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <HAL_GPIO_Init+0x330>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	4a5e      	ldr	r2, [pc, #376]	; (8000ea0 <HAL_GPIO_Init+0x330>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2e:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <HAL_GPIO_Init+0x330>)
 8000d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ea4 <HAL_GPIO_Init+0x334>)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	220f      	movs	r2, #15
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d64:	d025      	beq.n	8000db2 <HAL_GPIO_Init+0x242>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <HAL_GPIO_Init+0x338>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d01f      	beq.n	8000dae <HAL_GPIO_Init+0x23e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	; (8000eac <HAL_GPIO_Init+0x33c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d019      	beq.n	8000daa <HAL_GPIO_Init+0x23a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	; (8000eb0 <HAL_GPIO_Init+0x340>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x236>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <HAL_GPIO_Init+0x344>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x232>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	; (8000eb8 <HAL_GPIO_Init+0x348>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x22e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4a      	ldr	r2, [pc, #296]	; (8000ebc <HAL_GPIO_Init+0x34c>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x22a>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00c      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	e00a      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000d9e:	2305      	movs	r3, #5
 8000da0:	e008      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000da2:	2304      	movs	r3, #4
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000da6:	2303      	movs	r3, #3
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x244>
 8000db2:	2300      	movs	r3, #0
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dc4:	4937      	ldr	r1, [pc, #220]	; (8000ea4 <HAL_GPIO_Init+0x334>)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000df6:	4a32      	ldr	r2, [pc, #200]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000dfc:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e20:	4a27      	ldr	r2, [pc, #156]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_GPIO_Init+0x350>)
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f ae78 	bne.w	8000b80 <HAL_GPIO_Init+0x10>
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	371c      	adds	r7, #28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48000c00 	.word	0x48000c00
 8000eb4:	48001000 	.word	0x48001000
 8000eb8:	48001400 	.word	0x48001400
 8000ebc:	48001800 	.word	0x48001800
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee0:	e002      	b.n	8000ee8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ef8:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <HAL_PWREx_GetVoltageRange+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40007000 	.word	0x40007000

08000f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f1e:	d130      	bne.n	8000f82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f2c:	d038      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f2e:	4b20      	ldr	r3, [pc, #128]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f36:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2232      	movs	r2, #50	; 0x32
 8000f44:	fb02 f303 	mul.w	r3, r2, r3
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4e:	0c9b      	lsrs	r3, r3, #18
 8000f50:	3301      	adds	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f54:	e002      	b.n	8000f5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	695b      	ldr	r3, [r3, #20]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f68:	d102      	bne.n	8000f70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f2      	bne.n	8000f56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7c:	d110      	bne.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e00f      	b.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d007      	beq.n	8000fa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f98:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40007000 	.word	0x40007000
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e3ca      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fce:	4b97      	ldr	r3, [pc, #604]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd8:	4b94      	ldr	r3, [pc, #592]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80e4 	beq.w	80011b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <HAL_RCC_OscConfig+0x4a>
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b0c      	cmp	r3, #12
 8000ffa:	f040 808b 	bne.w	8001114 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2b01      	cmp	r3, #1
 8001002:	f040 8087 	bne.w	8001114 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001006:	4b89      	ldr	r3, [pc, #548]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x62>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	699b      	ldr	r3, [r3, #24]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3a2      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a1a      	ldr	r2, [r3, #32]
 8001022:	4b82      	ldr	r3, [pc, #520]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <HAL_RCC_OscConfig+0x7c>
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001036:	e005      	b.n	8001044 <HAL_RCC_OscConfig+0x88>
 8001038:	4b7c      	ldr	r3, [pc, #496]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800103a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001044:	4293      	cmp	r3, r2
 8001046:	d223      	bcs.n	8001090 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd1d 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e383      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800105c:	4b73      	ldr	r3, [pc, #460]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a72      	ldr	r2, [pc, #456]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b70      	ldr	r3, [pc, #448]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	496d      	ldr	r1, [pc, #436]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001076:	4313      	orrs	r3, r2
 8001078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800107a:	4b6c      	ldr	r3, [pc, #432]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	4968      	ldr	r1, [pc, #416]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e025      	b.n	80010dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001090:	4b66      	ldr	r3, [pc, #408]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a65      	ldr	r2, [pc, #404]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6013      	str	r3, [r2, #0]
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4960      	ldr	r1, [pc, #384]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ae:	4b5f      	ldr	r3, [pc, #380]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	495b      	ldr	r1, [pc, #364]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d109      	bne.n	80010dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fcdd 	bl	8001a8c <RCC_SetFlashLatencyFromMSIRange>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e343      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010dc:	f000 fc4a 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 80010e0:	4602      	mov	r2, r0
 80010e2:	4b52      	ldr	r3, [pc, #328]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	091b      	lsrs	r3, r3, #4
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	4950      	ldr	r1, [pc, #320]	; (8001230 <HAL_RCC_OscConfig+0x274>)
 80010ee:	5ccb      	ldrb	r3, [r1, r3]
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	fa22 f303 	lsr.w	r3, r2, r3
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <HAL_RCC_OscConfig+0x278>)
 80010fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010fc:	4b4e      	ldr	r3, [pc, #312]	; (8001238 <HAL_RCC_OscConfig+0x27c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fbcf 	bl	80008a4 <HAL_InitTick>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d052      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	e327      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d032      	beq.n	8001182 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a42      	ldr	r2, [pc, #264]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc0c 	bl	8000944 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001130:	f7ff fc08 	bl	8000944 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e310      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001142:	4b3a      	ldr	r3, [pc, #232]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a36      	ldr	r2, [pc, #216]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	4b34      	ldr	r3, [pc, #208]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4931      	ldr	r1, [pc, #196]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800116c:	4b2f      	ldr	r3, [pc, #188]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	492c      	ldr	r1, [pc, #176]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800117c:	4313      	orrs	r3, r2
 800117e:	604b      	str	r3, [r1, #4]
 8001180:	e01a      	b.n	80011b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001188:	f023 0301 	bic.w	r3, r3, #1
 800118c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800118e:	f7ff fbd9 	bl	8000944 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001196:	f7ff fbd5 	bl	8000944 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e2dd      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a8:	4b20      	ldr	r3, [pc, #128]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x1da>
 80011b4:	e000      	b.n	80011b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d074      	beq.n	80012ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x21a>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2b0c      	cmp	r3, #12
 80011ce:	d10e      	bne.n	80011ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d10b      	bne.n	80011ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d064      	beq.n	80012ac <HAL_RCC_OscConfig+0x2f0>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d160      	bne.n	80012ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e2ba      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x24a>
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_RCC_OscConfig+0x270>)
 80011fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	e026      	b.n	8001254 <HAL_RCC_OscConfig+0x298>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800120e:	d115      	bne.n	800123c <HAL_RCC_OscConfig+0x280>
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a05      	ldr	r2, [pc, #20]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001216:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a02      	ldr	r2, [pc, #8]	; (800122c <HAL_RCC_OscConfig+0x270>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x298>
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	080060a4 	.word	0x080060a4
 8001234:	20000000 	.word	0x20000000
 8001238:	20000004 	.word	0x20000004
 800123c:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a9f      	ldr	r2, [pc, #636]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b9d      	ldr	r3, [pc, #628]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a9c      	ldr	r2, [pc, #624]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fb72 	bl	8000944 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fb6e 	bl	8000944 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e276      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001276:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x2a8>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fb5e 	bl	8000944 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fb5a 	bl	8000944 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e262      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x2d0>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d060      	beq.n	800137c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d005      	beq.n	80012cc <HAL_RCC_OscConfig+0x310>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b0c      	cmp	r3, #12
 80012c4:	d119      	bne.n	80012fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d116      	bne.n	80012fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012cc:	4b7c      	ldr	r3, [pc, #496]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x328>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e23f      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e4:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	061b      	lsls	r3, r3, #24
 80012f2:	4973      	ldr	r1, [pc, #460]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f8:	e040      	b.n	800137c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d023      	beq.n	800134a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001302:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a6e      	ldr	r2, [pc, #440]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130e:	f7ff fb19 	bl	8000944 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001316:	f7ff fb15 	bl	8000944 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e21d      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	495f      	ldr	r1, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
 8001348:	e018      	b.n	800137c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800134a:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001356:	f7ff faf5 	bl	8000944 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135e:	f7ff faf1 	bl	8000944 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e1f9      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001370:	4b53      	ldr	r3, [pc, #332]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d03c      	beq.n	8001402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01c      	beq.n	80013ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001390:	4b4b      	ldr	r3, [pc, #300]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001396:	4a4a      	ldr	r2, [pc, #296]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fad0 	bl	8000944 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff facc 	bl	8000944 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e1d4      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ba:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ef      	beq.n	80013a8 <HAL_RCC_OscConfig+0x3ec>
 80013c8:	e01b      	b.n	8001402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80013cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d0:	4a3b      	ldr	r2, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013da:	f7ff fab3 	bl	8000944 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e2:	f7ff faaf 	bl	8000944 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1b7      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1ef      	bne.n	80013e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 80a6 	beq.w	800155c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10d      	bne.n	800143c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001420:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001424:	4a26      	ldr	r2, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6593      	str	r3, [r2, #88]	; 0x58
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800142e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001438:	2301      	movs	r3, #1
 800143a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800143c:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <HAL_RCC_OscConfig+0x508>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d118      	bne.n	800147a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <HAL_RCC_OscConfig+0x508>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1d      	ldr	r2, [pc, #116]	; (80014c4 <HAL_RCC_OscConfig+0x508>)
 800144e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001454:	f7ff fa76 	bl	8000944 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145c:	f7ff fa72 	bl	8000944 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e17a      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_RCC_OscConfig+0x508>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x4d8>
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 8001484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001492:	e029      	b.n	80014e8 <HAL_RCC_OscConfig+0x52c>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d115      	bne.n	80014c8 <HAL_RCC_OscConfig+0x50c>
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 800149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a2:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80014a4:	f043 0304 	orr.w	r3, r3, #4
 80014a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80014ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b2:	4a03      	ldr	r2, [pc, #12]	; (80014c0 <HAL_RCC_OscConfig+0x504>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x52c>
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40007000 	.word	0x40007000
 80014c8:	4b9c      	ldr	r3, [pc, #624]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80014ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ce:	4a9b      	ldr	r2, [pc, #620]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d8:	4b98      	ldr	r3, [pc, #608]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	4a97      	ldr	r2, [pc, #604]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d016      	beq.n	800151e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f0:	f7ff fa28 	bl	8000944 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f6:	e00a      	b.n	800150e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff fa24 	bl	8000944 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	; 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e12a      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800150e:	4b8b      	ldr	r3, [pc, #556]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0ed      	beq.n	80014f8 <HAL_RCC_OscConfig+0x53c>
 800151c:	e015      	b.n	800154a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151e:	f7ff fa11 	bl	8000944 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff fa0d 	bl	8000944 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e113      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153c:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1ed      	bne.n	8001526 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800154a:	7ffb      	ldrb	r3, [r7, #31]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d105      	bne.n	800155c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001550:	4b7a      	ldr	r3, [pc, #488]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	4a79      	ldr	r2, [pc, #484]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80fe 	beq.w	8001762 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	2b02      	cmp	r3, #2
 800156c:	f040 80d0 	bne.w	8001710 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001570:	4b72      	ldr	r3, [pc, #456]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	429a      	cmp	r2, r3
 8001582:	d130      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	3b01      	subs	r3, #1
 8001590:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d127      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d11f      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015b0:	2a07      	cmp	r2, #7
 80015b2:	bf14      	ite	ne
 80015b4:	2201      	movne	r2, #1
 80015b6:	2200      	moveq	r2, #0
 80015b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d113      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	3b01      	subs	r3, #1
 80015cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d109      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	3b01      	subs	r3, #1
 80015e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d06e      	beq.n	80016c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	2b0c      	cmp	r3, #12
 80015ea:	d069      	beq.n	80016c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015ec:	4b53      	ldr	r3, [pc, #332]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0ad      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001608:	4b4c      	ldr	r3, [pc, #304]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a4b      	ldr	r2, [pc, #300]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800160e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001614:	f7ff f996 	bl	8000944 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff f992 	bl	8000944 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e09a      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800162e:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800163c:	68da      	ldr	r2, [r3, #12]
 800163e:	4b40      	ldr	r3, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x784>)
 8001640:	4013      	ands	r3, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800164a:	3a01      	subs	r2, #1
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001654:	0212      	lsls	r2, r2, #8
 8001656:	4311      	orrs	r1, r2
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800165c:	0852      	lsrs	r2, r2, #1
 800165e:	3a01      	subs	r2, #1
 8001660:	0552      	lsls	r2, r2, #21
 8001662:	4311      	orrs	r1, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001668:	0852      	lsrs	r2, r2, #1
 800166a:	3a01      	subs	r2, #1
 800166c:	0652      	lsls	r2, r2, #25
 800166e:	4311      	orrs	r1, r2
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001674:	0912      	lsrs	r2, r2, #4
 8001676:	0452      	lsls	r2, r2, #17
 8001678:	430a      	orrs	r2, r1
 800167a:	4930      	ldr	r1, [pc, #192]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800167c:	4313      	orrs	r3, r2
 800167e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2d      	ldr	r2, [pc, #180]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001686:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800168c:	4b2b      	ldr	r3, [pc, #172]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001696:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001698:	f7ff f954 	bl	8000944 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff f950 	bl	8000944 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e058      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b2:	4b22      	ldr	r3, [pc, #136]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016be:	e050      	b.n	8001762 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e04f      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d148      	bne.n	8001762 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_RCC_OscConfig+0x780>)
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016e8:	f7ff f92c 	bl	8000944 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f928 	bl	8000944 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e030      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x734>
 800170e:	e028      	b.n	8001762 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b0c      	cmp	r3, #12
 8001714:	d023      	beq.n	800175e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_RCC_OscConfig+0x780>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <HAL_RCC_OscConfig+0x780>)
 800171c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff f90f 	bl	8000944 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001728:	e00c      	b.n	8001744 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172a:	f7ff f90b 	bl	8000944 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d905      	bls.n	8001744 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
 800173c:	40021000 	.word	0x40021000
 8001740:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x7b0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1ec      	bne.n	800172a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x7b0>)
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	4905      	ldr	r1, [pc, #20]	; (800176c <HAL_RCC_OscConfig+0x7b0>)
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_RCC_OscConfig+0x7b4>)
 8001758:	4013      	ands	r3, r2
 800175a:	60cb      	str	r3, [r1, #12]
 800175c:	e001      	b.n	8001762 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40021000 	.word	0x40021000
 8001770:	feeefffc 	.word	0xfeeefffc

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0e7      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b75      	ldr	r3, [pc, #468]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d910      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b72      	ldr	r3, [pc, #456]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0207 	bic.w	r2, r3, #7
 800179e:	4970      	ldr	r1, [pc, #448]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b6e      	ldr	r3, [pc, #440]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0cf      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d908      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4960      	ldr	r1, [pc, #384]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04c      	beq.n	800188c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017fa:	4b5a      	ldr	r3, [pc, #360]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d121      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0a6      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e09a      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182a:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e08e      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183a:	4b4a      	ldr	r3, [pc, #296]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e086      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4943      	ldr	r1, [pc, #268]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800185c:	f7ff f872 	bl	8000944 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f86e 	bl	8000944 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e06e      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d208      	bcs.n	80018ba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b2e      	ldr	r3, [pc, #184]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	492b      	ldr	r1, [pc, #172]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018ba:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d210      	bcs.n	80018ea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
 80018d0:	4923      	ldr	r1, [pc, #140]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_RCC_ClockConfig+0x1ec>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e036      	b.n	8001958 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	4918      	ldr	r1, [pc, #96]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d009      	beq.n	8001928 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4910      	ldr	r1, [pc, #64]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001924:	4313      	orrs	r3, r2
 8001926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001928:	f000 f824 	bl	8001974 <HAL_RCC_GetSysClockFreq>
 800192c:	4602      	mov	r2, r0
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_ClockConfig+0x1f0>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 030f 	and.w	r3, r3, #15
 8001938:	490b      	ldr	r1, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1f4>)
 800193a:	5ccb      	ldrb	r3, [r1, r3]
 800193c:	f003 031f 	and.w	r3, r3, #31
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a09      	ldr	r2, [pc, #36]	; (800196c <HAL_RCC_ClockConfig+0x1f8>)
 8001946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1fc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe ffa9 	bl	80008a4 <HAL_InitTick>
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]

  return status;
 8001956:	7afb      	ldrb	r3, [r7, #11]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40022000 	.word	0x40022000
 8001964:	40021000 	.word	0x40021000
 8001968:	080060a4 	.word	0x080060a4
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004

08001974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x34>
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d121      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11e      	bne.n	80019e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019b4:	4b31      	ldr	r3, [pc, #196]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e005      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80019d0:	4a2b      	ldr	r2, [pc, #172]	; (8001a80 <HAL_RCC_GetSysClockFreq+0x10c>)
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019e4:	e00a      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019ec:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x110>)
 80019ee:	61bb      	str	r3, [r7, #24]
 80019f0:	e004      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x114>)
 80019fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d134      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d003      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d003      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0xac>
 8001a18:	e005      	b.n	8001a26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a1c:	617b      	str	r3, [r7, #20]
      break;
 8001a1e:	e005      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a22:	617b      	str	r3, [r7, #20]
      break;
 8001a24:	e002      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	617b      	str	r3, [r7, #20]
      break;
 8001a2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	3301      	adds	r3, #1
 8001a38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	fb03 f202 	mul.w	r2, r3, r2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	0e5b      	lsrs	r3, r3, #25
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a6c:	69bb      	ldr	r3, [r7, #24]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3724      	adds	r7, #36	; 0x24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080060b4 	.word	0x080060b4
 8001a84:	00f42400 	.word	0x00f42400
 8001a88:	007a1200 	.word	0x007a1200

08001a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001aa4:	f7ff fa26 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001aa8:	6178      	str	r0, [r7, #20]
 8001aaa:	e014      	b.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ac4:	f7ff fa16 	bl	8000ef4 <HAL_PWREx_GetVoltageRange>
 8001ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001adc:	d10b      	bne.n	8001af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b80      	cmp	r3, #128	; 0x80
 8001ae2:	d919      	bls.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ae8:	d902      	bls.n	8001af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e013      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001af0:	2301      	movs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e010      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b80      	cmp	r3, #128	; 0x80
 8001afa:	d902      	bls.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001afc:	2303      	movs	r3, #3
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e00a      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b80      	cmp	r3, #128	; 0x80
 8001b06:	d102      	bne.n	8001b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	e004      	b.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b70      	cmp	r3, #112	; 0x70
 8001b12:	d101      	bne.n	8001b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001b14:	2301      	movs	r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 0207 	bic.w	r2, r3, #7
 8001b20:	4909      	ldr	r1, [pc, #36]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40022000 	.word	0x40022000

08001b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e095      	b.n	8001c8a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d108      	bne.n	8001b78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b6e:	d009      	beq.n	8001b84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
 8001b76:	e005      	b.n	8001b84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fd7c 	bl	800069c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bc4:	d902      	bls.n	8001bcc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e002      	b.n	8001bd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001bda:	d007      	beq.n	8001bec <HAL_SPI_Init+0xa0>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001be4:	d002      	beq.n	8001bec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	ea42 0103 	orr.w	r1, r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	0c1b      	lsrs	r3, r3, #16
 8001c48:	f003 0204 	and.w	r2, r3, #4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001c68:	ea42 0103 	orr.w	r1, r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b088      	sub	sp, #32
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_SPI_Transmit+0x22>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e158      	b.n	8001f66 <HAL_SPI_Transmit+0x2d4>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001cbc:	f7fe fe42 	bl	8000944 <HAL_GetTick>
 8001cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d002      	beq.n	8001cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001cd6:	e13d      	b.n	8001f54 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_SPI_Transmit+0x52>
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ce8:	e134      	b.n	8001f54 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	88fa      	ldrh	r2, [r7, #6]
 8001d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	88fa      	ldrh	r2, [r7, #6]
 8001d08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d34:	d10f      	bne.n	8001d56 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d60:	2b40      	cmp	r3, #64	; 0x40
 8001d62:	d007      	beq.n	8001d74 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001d7c:	d94b      	bls.n	8001e16 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_SPI_Transmit+0xfa>
 8001d86:	8afb      	ldrh	r3, [r7, #22]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d13e      	bne.n	8001e0a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	1c9a      	adds	r2, r3, #2
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001db0:	e02b      	b.n	8001e0a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d112      	bne.n	8001de6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd0:	1c9a      	adds	r2, r3, #2
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001de4:	e011      	b.n	8001e0a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001de6:	f7fe fdad 	bl	8000944 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d803      	bhi.n	8001dfe <HAL_SPI_Transmit+0x16c>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d102      	bne.n	8001e04 <HAL_SPI_Transmit+0x172>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e08:	e0a4      	b.n	8001f54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ce      	bne.n	8001db2 <HAL_SPI_Transmit+0x120>
 8001e14:	e07c      	b.n	8001f10 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_SPI_Transmit+0x192>
 8001e1e:	8afb      	ldrh	r3, [r7, #22]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d170      	bne.n	8001f06 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d912      	bls.n	8001e54 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	881a      	ldrh	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3e:	1c9a      	adds	r2, r3, #2
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b02      	subs	r3, #2
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e52:	e058      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	7812      	ldrb	r2, [r2, #0]
 8001e60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001e7a:	e044      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d12b      	bne.n	8001ee2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d912      	bls.n	8001eba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e98:	881a      	ldrh	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eb8:	e025      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ecc:	1c5a      	adds	r2, r3, #1
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ee0:	e011      	b.n	8001f06 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ee2:	f7fe fd2f 	bl	8000944 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d803      	bhi.n	8001efa <HAL_SPI_Transmit+0x268>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d102      	bne.n	8001f00 <HAL_SPI_Transmit+0x26e>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f04:	e026      	b.n	8001f54 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1b5      	bne.n	8001e7c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	6839      	ldr	r1, [r7, #0]
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f949 	bl	80021ac <SPI_EndRxTxTransaction>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
 8001f50:	e000      	b.n	8001f54 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001f52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f80:	f7fe fce0 	bl	8000944 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f90:	f7fe fcd8 	bl	8000944 <HAL_GetTick>
 8001f94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	0d1b      	lsrs	r3, r3, #20
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fa6:	e054      	b.n	8002052 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d050      	beq.n	8002052 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fb0:	f7fe fcc8 	bl	8000944 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d902      	bls.n	8001fc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13d      	bne.n	8002042 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001fd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fde:	d111      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fe8:	d004      	beq.n	8001ff4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d107      	bne.n	8002004 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002002:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200c:	d10f      	bne.n	800202e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e017      	b.n	8002072 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3b01      	subs	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4013      	ands	r3, r2
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	461a      	mov	r2, r3
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	429a      	cmp	r2, r3
 800206e:	d19b      	bne.n	8001fa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000

08002080 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002092:	f7fe fc57 	bl	8000944 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	4413      	add	r3, r2
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80020a2:	f7fe fc4f 	bl	8000944 <HAL_GetTick>
 80020a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	330c      	adds	r3, #12
 80020ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00da      	lsls	r2, r3, #3
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	0d1b      	lsrs	r3, r3, #20
 80020c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80020c8:	e060      	b.n	800218c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020d0:	d107      	bne.n	80020e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d050      	beq.n	800218c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020ea:	f7fe fc2b 	bl	8000944 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d902      	bls.n	8002100 <SPI_WaitFifoStateUntilTimeout+0x80>
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d13d      	bne.n	800217c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800210e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002118:	d111      	bne.n	800213e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002122:	d004      	beq.n	800212e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	d107      	bne.n	800213e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002146:	d10f      	bne.n	8002168 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e010      	b.n	800219e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	3b01      	subs	r3, #1
 800218a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	d196      	bne.n	80020ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000

080021ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff ff5b 	bl	8002080 <SPI_WaitFifoStateUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e027      	b.n	8002230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f7ff fec0 	bl	8001f70 <SPI_WaitFlagStateUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	f043 0220 	orr.w	r2, r3, #32
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e014      	b.n	8002230 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f7ff ff34 	bl	8002080 <SPI_WaitFifoStateUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f043 0220 	orr.w	r2, r3, #32
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e000      	b.n	8002230 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <bitmap_init>:
    return bitmap->width * (bitmap->depth / 8) * bitmap->height;
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	799b      	ldrb	r3, [r3, #6]
 800224a:	08db      	lsrs	r3, r3, #3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	b29b      	uxth	r3, r3
 8002250:	fb12 f303 	smulbb	r3, r2, r3
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	809a      	strh	r2, [r3, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	461a      	mov	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	885b      	ldrh	r3, [r3, #2]
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	609a      	str	r2, [r3, #8]
    bitmap->buffer = buffer;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	60da      	str	r2, [r3, #12]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <code>:
static const uint8_t RIGHT = 0b0010;
static const uint8_t BOTTOM = 0b0100;
static const uint8_t TOP = 0b1000;

static uint8_t code(int16_t x0, int16_t y0, window_t window)
{
 8002280:	b490      	push	{r4, r7}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	4604      	mov	r4, r0
 8002288:	4608      	mov	r0, r1
 800228a:	1d39      	adds	r1, r7, #4
 800228c:	e881 000c 	stmia.w	r1, {r2, r3}
 8002290:	4623      	mov	r3, r4
 8002292:	81fb      	strh	r3, [r7, #14]
 8002294:	4603      	mov	r3, r0
 8002296:	81bb      	strh	r3, [r7, #12]
    uint8_t code = INSIDE;
 8002298:	2300      	movs	r3, #0
 800229a:	75fb      	strb	r3, [r7, #23]

    if (x0 < window.x0) {
 800229c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022a0:	88ba      	ldrh	r2, [r7, #4]
 80022a2:	4293      	cmp	r3, r2
 80022a4:	da04      	bge.n	80022b0 <code+0x30>
        code |= LEFT;
 80022a6:	2201      	movs	r2, #1
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	75fb      	strb	r3, [r7, #23]
 80022ae:	e008      	b.n	80022c2 <code+0x42>
    } else if (x0 > window.x1) {
 80022b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b4:	893a      	ldrh	r2, [r7, #8]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	dd03      	ble.n	80022c2 <code+0x42>
        code |= RIGHT;
 80022ba:	2202      	movs	r2, #2
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
 80022be:	4313      	orrs	r3, r2
 80022c0:	75fb      	strb	r3, [r7, #23]
    } if (y0 < window.y0) {
 80022c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	4293      	cmp	r3, r2
 80022ca:	da04      	bge.n	80022d6 <code+0x56>
        code |= BOTTOM;
 80022cc:	2204      	movs	r2, #4
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	75fb      	strb	r3, [r7, #23]
 80022d4:	e008      	b.n	80022e8 <code+0x68>
    } else if (y0 > window.y1) {
 80022d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022da:	897a      	ldrh	r2, [r7, #10]
 80022dc:	4293      	cmp	r3, r2
 80022de:	dd03      	ble.n	80022e8 <code+0x68>
        code |= TOP;
 80022e0:	2208      	movs	r2, #8
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	75fb      	strb	r3, [r7, #23]
    }

    return code;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc90      	pop	{r4, r7}
 80022f2:	4770      	bx	lr

080022f4 <clip_line>:

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
    uint8_t code0 = code(*x0, *y0, window);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800230e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002312:	cb0c      	ldmia	r3, {r2, r3}
 8002314:	f7ff ffb4 	bl	8002280 <code>
 8002318:	4603      	mov	r3, r0
 800231a:	77fb      	strb	r3, [r7, #31]
    uint8_t code1 = code(*x1, *y1, window);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232c:	cb0c      	ldmia	r3, {r2, r3}
 800232e:	f7ff ffa7 	bl	8002280 <code>
 8002332:	4603      	mov	r3, r0
 8002334:	77bb      	strb	r3, [r7, #30]

    bool accept = false;
 8002336:	2300      	movs	r3, #0
 8002338:	777b      	strb	r3, [r7, #29]

    while (true) {
        if (!(code0 | code1)) {
 800233a:	7ffa      	ldrb	r2, [r7, #31]
 800233c:	7fbb      	ldrb	r3, [r7, #30]
 800233e:	4313      	orrs	r3, r2
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d102      	bne.n	800234c <clip_line+0x58>
            /* Both endpoints inside clipping window, trivial accept. */
            accept = true;
 8002346:	2301      	movs	r3, #1
 8002348:	777b      	strb	r3, [r7, #29]
            break;
 800234a:	e0e9      	b.n	8002520 <clip_line+0x22c>
        } else if (code0 & code1) {
 800234c:	7ffa      	ldrb	r2, [r7, #31]
 800234e:	7fbb      	ldrb	r3, [r7, #30]
 8002350:	4013      	ands	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 80e2 	bne.w	800251e <clip_line+0x22a>
            /* Both endpoints outside clipping window, trivial reject. */
            break;
        } else {
            /* Part of line inside clipping window, nontrivial situation. */

            int16_t x = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	837b      	strh	r3, [r7, #26]
            int16_t y = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	833b      	strh	r3, [r7, #24]
            uint8_t code3 = code0 ? code0 : code1;
 8002362:	7ffb      	ldrb	r3, [r7, #31]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <clip_line+0x78>
 8002368:	7ffb      	ldrb	r3, [r7, #31]
 800236a:	e000      	b.n	800236e <clip_line+0x7a>
 800236c:	7fbb      	ldrb	r3, [r7, #30]
 800236e:	75fb      	strb	r3, [r7, #23]

            /* Find intersection point. */
            /* slope = (y1 - y0) / (x1 - x0) */
            /* x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax */
            /* y = y0 + slope * (xm - x0), where xm is xmin or xmax */
            if (code3 & TOP) {
 8002370:	2208      	movs	r2, #8
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	4013      	ands	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d024      	beq.n	80023c6 <clip_line+0xd2>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002382:	b29a      	uxth	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	4619      	mov	r1, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	1acb      	subs	r3, r1, r3
 8002394:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8002396:	4608      	mov	r0, r1
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	f9b1 1000 	ldrsh.w	r1, [r1]
 800239e:	1a41      	subs	r1, r0, r1
 80023a0:	fb03 f101 	mul.w	r1, r3, r1
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023aa:	4618      	mov	r0, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b2:	1ac3      	subs	r3, r0, r3
 80023b4:	fb91 f3f3 	sdiv	r3, r1, r3
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4413      	add	r3, r2
 80023bc:	b29b      	uxth	r3, r3
 80023be:	837b      	strh	r3, [r7, #26]
                y = window.y1;
 80023c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023c2:	833b      	strh	r3, [r7, #24]
 80023c4:	e07f      	b.n	80024c6 <clip_line+0x1d2>
            } else if (code3 & BOTTOM) {
 80023c6:	2204      	movs	r2, #4
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	4013      	ands	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <clip_line+0x128>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d8:	b29a      	uxth	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e0:	4619      	mov	r1, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	1acb      	subs	r3, r1, r3
 80023ea:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80023ec:	4608      	mov	r0, r1
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	f9b1 1000 	ldrsh.w	r1, [r1]
 80023f4:	1a41      	subs	r1, r0, r1
 80023f6:	fb03 f101 	mul.w	r1, r3, r1
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002400:	4618      	mov	r0, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002408:	1ac3      	subs	r3, r0, r3
 800240a:	fb91 f3f3 	sdiv	r3, r1, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	4413      	add	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	837b      	strh	r3, [r7, #26]
                y = window.y0;
 8002416:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002418:	833b      	strh	r3, [r7, #24]
 800241a:	e054      	b.n	80024c6 <clip_line+0x1d2>
            } else if (code3 & RIGHT) {
 800241c:	2202      	movs	r2, #2
 800241e:	7dfb      	ldrb	r3, [r7, #23]
 8002420:	4013      	ands	r3, r2
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b00      	cmp	r3, #0
 8002426:	d024      	beq.n	8002472 <clip_line+0x17e>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242e:	b29a      	uxth	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002436:	4619      	mov	r1, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	1acb      	subs	r3, r1, r3
 8002440:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8002442:	4608      	mov	r0, r1
 8002444:	68f9      	ldr	r1, [r7, #12]
 8002446:	f9b1 1000 	ldrsh.w	r1, [r1]
 800244a:	1a41      	subs	r1, r0, r1
 800244c:	fb03 f101 	mul.w	r1, r3, r1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	4618      	mov	r0, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245e:	1ac3      	subs	r3, r0, r3
 8002460:	fb91 f3f3 	sdiv	r3, r1, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	4413      	add	r3, r2
 8002468:	b29b      	uxth	r3, r3
 800246a:	833b      	strh	r3, [r7, #24]
                x = window.x1;
 800246c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800246e:	837b      	strh	r3, [r7, #26]
 8002470:	e029      	b.n	80024c6 <clip_line+0x1d2>
            }  else if (code3 & LEFT) {
 8002472:	2201      	movs	r2, #1
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	4013      	ands	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d023      	beq.n	80024c6 <clip_line+0x1d2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002484:	b29a      	uxth	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800248c:	4619      	mov	r1, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002494:	1acb      	subs	r3, r1, r3
 8002496:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002498:	4608      	mov	r0, r1
 800249a:	68f9      	ldr	r1, [r7, #12]
 800249c:	f9b1 1000 	ldrsh.w	r1, [r1]
 80024a0:	1a41      	subs	r1, r0, r1
 80024a2:	fb03 f101 	mul.w	r1, r3, r1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ac:	4618      	mov	r0, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b4:	1ac3      	subs	r3, r0, r3
 80024b6:	fb91 f3f3 	sdiv	r3, r1, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4413      	add	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	833b      	strh	r3, [r7, #24]
                x = window.x0;
 80024c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80024c4:	837b      	strh	r3, [r7, #26]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 80024c6:	7dfa      	ldrb	r2, [r7, #23]
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d113      	bne.n	80024f6 <clip_line+0x202>
                *x0 = x;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8b7a      	ldrh	r2, [r7, #26]
 80024d2:	801a      	strh	r2, [r3, #0]
                *y0 = y;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	8b3a      	ldrh	r2, [r7, #24]
 80024d8:	801a      	strh	r2, [r3, #0]
                code0 = code(*x0, *y0, window);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f9b3 0000 	ldrsh.w	r0, [r3]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80024e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ea:	cb0c      	ldmia	r3, {r2, r3}
 80024ec:	f7ff fec8 	bl	8002280 <code>
 80024f0:	4603      	mov	r3, r0
 80024f2:	77fb      	strb	r3, [r7, #31]
 80024f4:	e721      	b.n	800233a <clip_line+0x46>
            } else {
                *x1 = x;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	8b7a      	ldrh	r2, [r7, #26]
 80024fa:	801a      	strh	r2, [r3, #0]
                *y1 = y;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	8b3a      	ldrh	r2, [r7, #24]
 8002500:	801a      	strh	r2, [r3, #0]
                code1 = code(*x1, *y1, window);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800250e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002512:	cb0c      	ldmia	r3, {r2, r3}
 8002514:	f7ff feb4 	bl	8002280 <code>
 8002518:	4603      	mov	r3, r0
 800251a:	77bb      	strb	r3, [r7, #30]
        if (!(code0 | code1)) {
 800251c:	e70d      	b.n	800233a <clip_line+0x46>
            break;
 800251e:	bf00      	nop
            }
        }
    }

    return accept;
 8002520:	7f7b      	ldrb	r3, [r7, #29]
 8002522:	4618      	mov	r0, r3
 8002524:	3720      	adds	r7, #32
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <fontx_meta>:
#include <stddef.h>
#include <string.h>

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	3306      	adds	r3, #6
 800253a:	2208      	movs	r2, #8
 800253c:	4619      	mov	r1, r3
 800253e:	f000 fd4d 	bl	8002fdc <memcpy>
    meta->width = font[FONTX_WIDTH];
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7b9a      	ldrb	r2, [r3, #14]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	725a      	strb	r2, [r3, #9]
    meta->height = font[FONTX_HEIGHT];
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7bda      	ldrb	r2, [r3, #15]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	729a      	strb	r2, [r3, #10]
    meta->type = font[FONTX_TYPE];
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7c1a      	ldrb	r2, [r3, #16]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	72da      	strb	r2, [r3, #11]

    return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ffd7 	bl	800252a <fontx_meta>
 800257c:	4603      	mov	r3, r0
 800257e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (0 != status) {
 8002582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <fontx_glyph+0x2c>
        return status;
 800258a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800258e:	e077      	b.n	8002680 <fontx_glyph+0x11c>
    }

    glyph->width = meta.width;
 8002590:	7f7a      	ldrb	r2, [r7, #29]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	701a      	strb	r2, [r3, #0]
    glyph->height = meta.height;
 8002596:	7fba      	ldrb	r2, [r7, #30]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	705a      	strb	r2, [r3, #1]
    glyph->pitch = (meta.width + 7) / 8;
 800259c:	7f7b      	ldrb	r3, [r7, #29]
 800259e:	3307      	adds	r3, #7
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da00      	bge.n	80025a6 <fontx_glyph+0x42>
 80025a4:	3307      	adds	r3, #7
 80025a6:	10db      	asrs	r3, r3, #3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	70da      	strb	r2, [r3, #3]
    glyph->size = glyph->pitch * meta.height;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	78da      	ldrb	r2, [r3, #3]
 80025b2:	7fbb      	ldrb	r3, [r7, #30]
 80025b4:	fb12 f303 	smulbb	r3, r2, r3
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	709a      	strb	r2, [r3, #2]

    if (FONTX_TYPE_SBCS == meta.type) {
 80025be:	7ffb      	ldrb	r3, [r7, #31]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10f      	bne.n	80025e4 <fontx_glyph+0x80>
        if (code < 0x100) {
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d859      	bhi.n	800267e <fontx_glyph+0x11a>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	789b      	ldrb	r3, [r3, #2]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	fb02 f303 	mul.w	r3, r2, r3
 80025d6:	3311      	adds	r3, #17
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	441a      	add	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
            return FONTX_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e04d      	b.n	8002680 <fontx_glyph+0x11c>
        }
    } else {
        block_table = &font[FONTX_BLOCK_TABLE_START];
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3312      	adds	r3, #18
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        nc = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3311      	adds	r3, #17
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30
        while (bc--) {
 80025f6:	e03d      	b.n	8002674 <fontx_glyph+0x110>
            /* Get range of the code block_table. */
            sb = block_table[0] + block_table[1] * 0x100;
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	3301      	adds	r3, #1
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4413      	add	r3, r2
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
            eb = block_table[2] + block_table[3] * 0x100;
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	3302      	adds	r3, #2
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	461a      	mov	r2, r3
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	3303      	adds	r3, #3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	4413      	add	r3, r2
 800261c:	623b      	str	r3, [r7, #32]

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	429a      	cmp	r2, r3
 8002624:	d31c      	bcc.n	8002660 <fontx_glyph+0xfc>
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	429a      	cmp	r2, r3
 800262c:	d818      	bhi.n	8002660 <fontx_glyph+0xfc>
                /* Number of codes from top of the block_table. */
                nc += code - sb;
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002636:	4413      	add	r3, r2
 8002638:	637b      	str	r3, [r7, #52]	; 0x34
                glyph->buffer = &font[
                    FONTX_BLOCK_TABLE_START +
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3311      	adds	r3, #17
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	461a      	mov	r2, r3
                    nc * glyph->size
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	4619      	mov	r1, r3
 800264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264c:	fb01 f303 	mul.w	r3, r1, r3
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8002650:	4413      	add	r3, r2
 8002652:	3312      	adds	r3, #18
                glyph->buffer = &font[
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	441a      	add	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	605a      	str	r2, [r3, #4]
                ];
                return FONTX_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	e00f      	b.n	8002680 <fontx_glyph+0x11c>
            }
            /* Number of codes in the previous block_tables. */
            nc += eb - sb + 1;
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad2      	subs	r2, r2, r3
 8002666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002668:	4413      	add	r3, r2
 800266a:	3301      	adds	r3, #1
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Next code block_table. */
            block_table += 4;
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	3304      	adds	r3, #4
 8002672:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (bc--) {
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	633a      	str	r2, [r7, #48]	; 0x30
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1bc      	bne.n	80025f8 <fontx_glyph+0x94>
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800267e:	2301      	movs	r3, #1
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	; 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <min>:
#include "hsl.h"

hsl_t rgb888_to_hsl(rgb_t *rgb);
uint16_t rgb888_to_rgb565(rgb_t *input);

static inline int min(int a, int b) {
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
    if (a > b) {
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	dd01      	ble.n	800269e <min+0x16>
        return b;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	e000      	b.n	80026a0 <min+0x18>
    };
    return a;
 800269e:	687b      	ldr	r3, [r7, #4]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
 80026b6:	460b      	mov	r3, r1
 80026b8:	80bb      	strh	r3, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	807b      	strh	r3, [r7, #2]
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80026be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <hagl_put_pixel+0x60>)
 80026c4:	8812      	ldrh	r2, [r2, #0]
 80026c6:	4293      	cmp	r3, r2
 80026c8:	db1a      	blt.n	8002700 <hagl_put_pixel+0x54>
 80026ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026ce:	4a0f      	ldr	r2, [pc, #60]	; (800270c <hagl_put_pixel+0x60>)
 80026d0:	8852      	ldrh	r2, [r2, #2]
 80026d2:	4293      	cmp	r3, r2
 80026d4:	db14      	blt.n	8002700 <hagl_put_pixel+0x54>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80026d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026da:	4a0c      	ldr	r2, [pc, #48]	; (800270c <hagl_put_pixel+0x60>)
 80026dc:	8892      	ldrh	r2, [r2, #4]
 80026de:	4293      	cmp	r3, r2
 80026e0:	dc10      	bgt.n	8002704 <hagl_put_pixel+0x58>
 80026e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026e6:	4a09      	ldr	r2, [pc, #36]	; (800270c <hagl_put_pixel+0x60>)
 80026e8:	88d2      	ldrh	r2, [r2, #6]
 80026ea:	4293      	cmp	r3, r2
 80026ec:	dc0a      	bgt.n	8002704 <hagl_put_pixel+0x58>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
 80026ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fe97 	bl	800042c <lcd_put_pixel>
 80026fe:	e002      	b.n	8002706 <hagl_put_pixel+0x5a>
        return;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <hagl_put_pixel+0x5a>
        return;
 8002704:	bf00      	nop
}
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000000c 	.word	0x2000000c

08002710 <hagl_draw_hline>:
#else
    return hagl_color(0, 0, 0);
#endif /* HAGL_HAS_HAL_GET_PIXEL */
}

void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af02      	add	r7, sp, #8
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	4603      	mov	r3, r0
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
 800272a:	4613      	mov	r3, r2
 800272c:	803b      	strh	r3, [r7, #0]
        width = width - (x0 + width - clip_window.x1);
    }

    hagl_hal_hline(x0, y0, width, color);
#else
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	887b      	ldrh	r3, [r7, #2]
 8002732:	4413      	add	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	b21a      	sxth	r2, r3
 8002738:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800273c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002740:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002744:	883b      	ldrh	r3, [r7, #0]
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4623      	mov	r3, r4
 800274a:	f000 f827 	bl	800279c <hagl_draw_line>
#endif
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}

08002756 <hagl_draw_vline>:

/*
 * Draw a vertical line with given color. If HAL supports it uses
 * hardware vline drawing. If not falls back to vanilla line drawing.
 */
void hagl_draw_vline(int16_t x0, int16_t y0, uint16_t h, color_t color) {
 8002756:	b590      	push	{r4, r7, lr}
 8002758:	b085      	sub	sp, #20
 800275a:	af02      	add	r7, sp, #8
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	461a      	mov	r2, r3
 8002764:	4623      	mov	r3, r4
 8002766:	80fb      	strh	r3, [r7, #6]
 8002768:	4603      	mov	r3, r0
 800276a:	80bb      	strh	r3, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
 8002770:	4613      	mov	r3, r2
 8002772:	803b      	strh	r3, [r7, #0]
        height = height - (y0 + height - clip_window.y1);
    }

    hagl_hal_vline(x0, y0, height, color);
#else
    hagl_draw_line(x0, y0, x0, y0 + h, color);
 8002774:	88ba      	ldrh	r2, [r7, #4]
 8002776:	887b      	ldrh	r3, [r7, #2]
 8002778:	4413      	add	r3, r2
 800277a:	b29b      	uxth	r3, r3
 800277c:	b21c      	sxth	r4, r3
 800277e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002782:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002786:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800278a:	883b      	ldrh	r3, [r7, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4623      	mov	r3, r4
 8002790:	f000 f804 	bl	800279c <hagl_draw_line>
#endif
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}

0800279c <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	b089      	sub	sp, #36	; 0x24
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	4604      	mov	r4, r0
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4623      	mov	r3, r4
 80027ac:	80fb      	strh	r3, [r7, #6]
 80027ae:	4603      	mov	r3, r0
 80027b0:	80bb      	strh	r3, [r7, #4]
 80027b2:	460b      	mov	r3, r1
 80027b4:	807b      	strh	r3, [r7, #2]
 80027b6:	4613      	mov	r3, r2
 80027b8:	803b      	strh	r3, [r7, #0]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80027ba:	463b      	mov	r3, r7
 80027bc:	1cba      	adds	r2, r7, #2
 80027be:	1d3d      	adds	r5, r7, #4
 80027c0:	1dbc      	adds	r4, r7, #6
 80027c2:	494a      	ldr	r1, [pc, #296]	; (80028ec <hagl_draw_line+0x150>)
 80027c4:	466e      	mov	r6, sp
 80027c6:	c903      	ldmia	r1, {r0, r1}
 80027c8:	e886 0003 	stmia.w	r6, {r0, r1}
 80027cc:	4629      	mov	r1, r5
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff fd90 	bl	80022f4 <clip_line>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f083 0301 	eor.w	r3, r3, #1
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d17e      	bne.n	80028de <hagl_draw_line+0x142>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80027e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027e4:	461a      	mov	r2, r3
 80027e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	bfb8      	it	lt
 80027f0:	425b      	neglt	r3, r3
 80027f2:	82bb      	strh	r3, [r7, #20]
    sx = x0 < x1 ? 1 : -1;
 80027f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	da01      	bge.n	8002804 <hagl_draw_line+0x68>
 8002800:	2301      	movs	r3, #1
 8002802:	e001      	b.n	8002808 <hagl_draw_line+0x6c>
 8002804:	f04f 33ff 	mov.w	r3, #4294967295
 8002808:	827b      	strh	r3, [r7, #18]
    dy = ABS(y1 - y0);
 800280a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800280e:	461a      	mov	r2, r3
 8002810:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	bfb8      	it	lt
 800281a:	425b      	neglt	r3, r3
 800281c:	823b      	strh	r3, [r7, #16]
    sy = y0 < y1 ? 1 : -1;
 800281e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002822:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002826:	429a      	cmp	r2, r3
 8002828:	da01      	bge.n	800282e <hagl_draw_line+0x92>
 800282a:	2301      	movs	r3, #1
 800282c:	e001      	b.n	8002832 <hagl_draw_line+0x96>
 800282e:	f04f 33ff 	mov.w	r3, #4294967295
 8002832:	81fb      	strh	r3, [r7, #14]
    err = (dx > dy ? dx : -dy) / 2;
 8002834:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002838:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800283c:	429a      	cmp	r2, r3
 800283e:	dd06      	ble.n	800284e <hagl_draw_line+0xb2>
 8002840:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002844:	0fda      	lsrs	r2, r3, #31
 8002846:	4413      	add	r3, r2
 8002848:	105b      	asrs	r3, r3, #1
 800284a:	b21b      	sxth	r3, r3
 800284c:	e006      	b.n	800285c <hagl_draw_line+0xc0>
 800284e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002852:	0fda      	lsrs	r2, r3, #31
 8002854:	4413      	add	r3, r2
 8002856:	105b      	asrs	r3, r3, #1
 8002858:	425b      	negs	r3, r3
 800285a:	b21b      	sxth	r3, r3
 800285c:	82fb      	strh	r3, [r7, #22]

    while (1) {
        hagl_put_pixel(x0, y0, color);
 800285e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002862:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002866:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff1f 	bl	80026ac <hagl_put_pixel>

        if (x0 == x1 && y0 == y1) {
 800286e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002872:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002876:	429a      	cmp	r2, r3
 8002878:	d105      	bne.n	8002886 <hagl_draw_line+0xea>
 800287a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800287e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002882:	429a      	cmp	r2, r3
 8002884:	d02d      	beq.n	80028e2 <hagl_draw_line+0x146>
            break;
        };

        e2 = err + err;
 8002886:	8afb      	ldrh	r3, [r7, #22]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	b29b      	uxth	r3, r3
 800288c:	81bb      	strh	r3, [r7, #12]

        if (e2 > -dx) {
 800288e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002892:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002896:	425b      	negs	r3, r3
 8002898:	429a      	cmp	r2, r3
 800289a:	dd0c      	ble.n	80028b6 <hagl_draw_line+0x11a>
            err -= dy;
 800289c:	8afa      	ldrh	r2, [r7, #22]
 800289e:	8a3b      	ldrh	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 80028a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	8a7b      	ldrh	r3, [r7, #18]
 80028ae:	4413      	add	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	b21b      	sxth	r3, r3
 80028b4:	80fb      	strh	r3, [r7, #6]
        }

        if (e2 < dy) {
 80028b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80028ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dacd      	bge.n	800285e <hagl_draw_line+0xc2>
            err += dx;
 80028c2:	8afa      	ldrh	r2, [r7, #22]
 80028c4:	8abb      	ldrh	r3, [r7, #20]
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 80028cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	4413      	add	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	b21b      	sxth	r3, r3
 80028da:	80bb      	strh	r3, [r7, #4]
        hagl_put_pixel(x0, y0, color);
 80028dc:	e7bf      	b.n	800285e <hagl_draw_line+0xc2>
        return;
 80028de:	bf00      	nop
 80028e0:	e000      	b.n	80028e4 <hagl_draw_line+0x148>
            break;
 80028e2:	bf00      	nop
        }
    }
}
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	2000000c 	.word	0x2000000c

080028f0 <hagl_put_char>:

    return 0;
}

uint8_t hagl_put_char(wchar_t code, int16_t x0, int16_t y0, color_t color, const uint8_t *font)
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80028fe:	f844 0c24 	str.w	r0, [r4, #-36]
 8002902:	460c      	mov	r4, r1
 8002904:	4610      	mov	r0, r2
 8002906:	4619      	mov	r1, r3
 8002908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800290c:	4622      	mov	r2, r4
 800290e:	f823 2c26 	strh.w	r2, [r3, #-38]
 8002912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002916:	4602      	mov	r2, r0
 8002918:	f823 2c28 	strh.w	r2, [r3, #-40]
 800291c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002920:	460a      	mov	r2, r1
 8002922:	f823 2c2a 	strh.w	r2, [r3, #-42]
    uint8_t set, status;
    color_t buffer[HAGL_CHAR_BUFFER_SIZE];
    bitmap_t bitmap;
    fontx_glyph_t glyph;

    status = fontx_glyph(&glyph, code, font);
 8002926:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800292a:	4619      	mov	r1, r3
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	f851 1c24 	ldr.w	r1, [r1, #-36]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe12 	bl	8002564 <fontx_glyph>
 8002940:	4603      	mov	r3, r0
 8002942:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002946:	f102 0209 	add.w	r2, r2, #9
 800294a:	7013      	strb	r3, [r2, #0]

    if (0 != status) {
 800294c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002950:	f103 0309 	add.w	r3, r3, #9
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <hagl_put_char+0x6e>
        return 0;
 800295a:	2300      	movs	r3, #0
 800295c:	e0c0      	b.n	8002ae0 <hagl_put_char+0x1f0>
    }

    bitmap.width = glyph.width,
 800295e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002962:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002966:	b29a      	uxth	r2, r3
 8002968:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800296c:	f823 2c18 	strh.w	r2, [r3, #-24]
    bitmap.height = glyph.height,
 8002970:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002974:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8002978:	b29a      	uxth	r2, r3
 800297a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800297e:	f823 2c16 	strh.w	r2, [r3, #-22]
    bitmap.depth = DISPLAY_DEPTH,
 8002982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002986:	2210      	movs	r2, #16
 8002988:	f803 2c12 	strb.w	r2, [r3, #-18]

    bitmap_init(&bitmap, (uint8_t *)buffer);
 800298c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002990:	3a08      	subs	r2, #8
 8002992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002996:	3b18      	subs	r3, #24
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fc4c 	bl	8002238 <bitmap_init>

    color_t *ptr = (color_t *) bitmap.buffer;
 80029a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029a4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 80029a8:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029ac:	f102 020c 	add.w	r2, r2, #12
 80029b0:	6013      	str	r3, [r2, #0]

    for (uint8_t y = 0; y < glyph.height; y++) {
 80029b2:	2300      	movs	r3, #0
 80029b4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029b8:	f102 020b 	add.w	r2, r2, #11
 80029bc:	7013      	strb	r3, [r2, #0]
 80029be:	e071      	b.n	8002aa4 <hagl_put_char+0x1b4>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029c6:	f102 020a 	add.w	r2, r2, #10
 80029ca:	7013      	strb	r3, [r2, #0]
 80029cc:	e047      	b.n	8002a5e <hagl_put_char+0x16e>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80029ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029d2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	b25a      	sxtb	r2, r3
 80029da:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80029de:	f103 030a 	add.w	r3, r3, #10
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	2180      	movs	r1, #128	; 0x80
 80029ea:	fa41 f303 	asr.w	r3, r1, r3
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80029f8:	f102 0208 	add.w	r2, r2, #8
 80029fc:	7013      	strb	r3, [r2, #0]
            if (set) {
 80029fe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a02:	f103 0308 	add.w	r3, r3, #8
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <hagl_put_char+0x13e>
                *(ptr++) = color;
 8002a0c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a10:	f103 030c 	add.w	r3, r3, #12
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1c9a      	adds	r2, r3, #2
 8002a18:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8002a1c:	f101 010c 	add.w	r1, r1, #12
 8002a20:	600a      	str	r2, [r1, #0]
 8002a22:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a26:	f832 2c2a 	ldrh.w	r2, [r2, #-42]
 8002a2a:	801a      	strh	r2, [r3, #0]
 8002a2c:	e00c      	b.n	8002a48 <hagl_put_char+0x158>
            } else {
                *(ptr++) = 0x0000;
 8002a2e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a32:	f103 030c 	add.w	r3, r3, #12
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	1c9a      	adds	r2, r3, #2
 8002a3a:	f507 5181 	add.w	r1, r7, #4128	; 0x1020
 8002a3e:	f101 010c 	add.w	r1, r1, #12
 8002a42:	600a      	str	r2, [r1, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	801a      	strh	r2, [r3, #0]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8002a48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a4c:	f103 030a 	add.w	r3, r3, #10
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a58:	f102 020a 	add.w	r2, r2, #10
 8002a5c:	7013      	strb	r3, [r2, #0]
 8002a5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a62:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002a66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a6a:	f102 020a 	add.w	r2, r2, #10
 8002a6e:	7812      	ldrb	r2, [r2, #0]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3ac      	bcc.n	80029ce <hagl_put_char+0xde>
            }
        }
        glyph.buffer += glyph.pitch;
 8002a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a78:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002a7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a80:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 8002a84:	4413      	add	r3, r2
 8002a86:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002a8a:	f842 3c1c 	str.w	r3, [r2, #-28]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8002a8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8002a92:	f103 030b 	add.w	r3, r3, #11
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002a9e:	f102 020b 	add.w	r2, r2, #11
 8002aa2:	7013      	strb	r3, [r2, #0]
 8002aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002aa8:	f813 3c1f 	ldrb.w	r3, [r3, #-31]
 8002aac:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002ab0:	f102 020b 	add.w	r2, r2, #11
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d382      	bcc.n	80029c0 <hagl_put_char+0xd0>
    }

    hagl_blit(x0, y0, &bitmap);
 8002aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002abe:	3b18      	subs	r3, #24
 8002ac0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ac4:	f932 1c28 	ldrsh.w	r1, [r2, #-40]
 8002ac8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002acc:	f932 0c26 	ldrsh.w	r0, [r2, #-38]
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	f000 f85a 	bl	8002b8a <hagl_blit>

    return bitmap.width;
 8002ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ada:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ade:	b2db      	uxtb	r3, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <hagl_put_text>:
 * Write a string of text by calling hagl_put_char() repeadetly. CR and LF
 * continue from the next line.
 */

uint16_t hagl_put_text(const wchar_t *str, int16_t x0, int16_t y0, color_t color, const unsigned char *font)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
    wchar_t temp;
    uint8_t status;
    uint16_t original = x0;
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	84fb      	strh	r3, [r7, #38]	; 0x26
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8002b0a:	f107 0314 	add.w	r3, r7, #20
 8002b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fd0a 	bl	800252a <fontx_meta>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    if (0 != status) {
 8002b1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <hagl_put_text+0x3c>
        return 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e02c      	b.n	8002b82 <hagl_put_text+0x96>
    }

    do {
        temp = *str++;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1d1a      	adds	r2, r3, #4
 8002b2c:	60fa      	str	r2, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	623b      	str	r3, [r7, #32]
        if (13 == temp || 10 == temp) {
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	2b0d      	cmp	r3, #13
 8002b36:	d002      	beq.n	8002b3e <hagl_put_text+0x52>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b0a      	cmp	r3, #10
 8002b3c:	d108      	bne.n	8002b50 <hagl_put_text+0x64>
            x0 = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	817b      	strh	r3, [r7, #10]
            y0 += meta.height;
 8002b42:	7fbb      	ldrb	r3, [r7, #30]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	893b      	ldrh	r3, [r7, #8]
 8002b48:	4413      	add	r3, r2
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	813b      	strh	r3, [r7, #8]
 8002b4e:	e010      	b.n	8002b72 <hagl_put_text+0x86>
        } else {
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8002b50:	88f8      	ldrh	r0, [r7, #6]
 8002b52:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b56:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6a38      	ldr	r0, [r7, #32]
 8002b62:	f7ff fec5 	bl	80028f0 <hagl_put_char>
 8002b66:	4603      	mov	r3, r0
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	817b      	strh	r3, [r7, #10]
        }
    } while (*str != 0);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1d6      	bne.n	8002b28 <hagl_put_text+0x3c>

    return x0 - original;
 8002b7a:	897a      	ldrh	r2, [r7, #10]
 8002b7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	b29b      	uxth	r3, r3
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	; 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	603a      	str	r2, [r7, #0]
 8002b94:	80fb      	strh	r3, [r7, #6]
 8002b96:	460b      	mov	r3, r1
 8002b98:	80bb      	strh	r3, [r7, #4]
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	617b      	str	r3, [r7, #20]

    for (uint16_t y = 0; y < source->height; y++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	827b      	strh	r3, [r7, #18]
 8002ba4:	e020      	b.n	8002be8 <hagl_blit+0x5e>
        for (uint16_t x = 0; x < source->width; x++) {
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	823b      	strh	r3, [r7, #16]
 8002baa:	e015      	b.n	8002bd8 <hagl_blit+0x4e>
            color = *(ptr++);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	617a      	str	r2, [r7, #20]
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	81fb      	strh	r3, [r7, #14]
            hagl_put_pixel(x0 + x, y0 + y, color);
 8002bb6:	88fa      	ldrh	r2, [r7, #6]
 8002bb8:	8a3b      	ldrh	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	b218      	sxth	r0, r3
 8002bc0:	88ba      	ldrh	r2, [r7, #4]
 8002bc2:	8a7b      	ldrh	r3, [r7, #18]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	b21b      	sxth	r3, r3
 8002bca:	89fa      	ldrh	r2, [r7, #14]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7ff fd6d 	bl	80026ac <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 8002bd2:	8a3b      	ldrh	r3, [r7, #16]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	823b      	strh	r3, [r7, #16]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	8a3a      	ldrh	r2, [r7, #16]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d3e4      	bcc.n	8002bac <hagl_blit+0x22>
    for (uint16_t y = 0; y < source->height; y++) {
 8002be2:	8a7b      	ldrh	r3, [r7, #18]
 8002be4:	3301      	adds	r3, #1
 8002be6:	827b      	strh	r3, [r7, #18]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	885b      	ldrh	r3, [r3, #2]
 8002bec:	8a7a      	ldrh	r2, [r7, #18]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3d9      	bcc.n	8002ba6 <hagl_blit+0x1c>
        }
    }
#endif
};
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <hagl_draw_rounded_rectangle>:
void hagl_fill_triangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, color_t color) {
    int16_t vertices[6] = {x0, y0, x1, y1, x2, y2};
    hagl_fill_polygon(3, vertices, color);
}

void hagl_draw_rounded_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t r, color_t color) {
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4604      	mov	r4, r0
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	80fb      	strh	r3, [r7, #6]
 8002c0e:	4603      	mov	r3, r0
 8002c10:	80bb      	strh	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	807b      	strh	r3, [r7, #2]
 8002c16:	4613      	mov	r3, r2
 8002c18:	803b      	strh	r3, [r7, #0]

    uint16_t width, height;
    int16_t x, y, d;

    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 8002c1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dd0e      	ble.n	8002c44 <hagl_draw_rounded_rectangle+0x48>
        x0 = x0 + x1;
 8002c26:	88fa      	ldrh	r2, [r7, #6]
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	80fb      	strh	r3, [r7, #6]
        x1 = x0 - x1;
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	807b      	strh	r3, [r7, #2]
        x0 = x0 - x1;
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	80fb      	strh	r3, [r7, #6]
    }

    /* Make sure y0 is smaller than y1. */
    if (y0 > y1) {
 8002c44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dd0e      	ble.n	8002c6e <hagl_draw_rounded_rectangle+0x72>
        y0 = y0 + y1;
 8002c50:	88ba      	ldrh	r2, [r7, #4]
 8002c52:	883b      	ldrh	r3, [r7, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	80bb      	strh	r3, [r7, #4]
        y1 = y0 - y1;
 8002c5a:	88ba      	ldrh	r2, [r7, #4]
 8002c5c:	883b      	ldrh	r3, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	803b      	strh	r3, [r7, #0]
        y0 = y0 - y1;
 8002c64:	88ba      	ldrh	r2, [r7, #4]
 8002c66:	883b      	ldrh	r3, [r7, #0]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	80bb      	strh	r3, [r7, #4]
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8002c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c72:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <hagl_draw_rounded_rectangle+0x1c0>)
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f2c0 8153 	blt.w	8002f22 <hagl_draw_rounded_rectangle+0x326>
 8002c7c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <hagl_draw_rounded_rectangle+0x1c0>)
 8002c82:	8852      	ldrh	r2, [r2, #2]
 8002c84:	4293      	cmp	r3, r2
 8002c86:	f2c0 814c 	blt.w	8002f22 <hagl_draw_rounded_rectangle+0x326>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8002c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c8e:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <hagl_draw_rounded_rectangle+0x1c0>)
 8002c90:	8892      	ldrh	r2, [r2, #4]
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f300 8147 	bgt.w	8002f26 <hagl_draw_rounded_rectangle+0x32a>
 8002c98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c9c:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <hagl_draw_rounded_rectangle+0x1c0>)
 8002c9e:	88d2      	ldrh	r2, [r2, #6]
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f300 8140 	bgt.w	8002f26 <hagl_draw_rounded_rectangle+0x32a>
        return;
    }

    /* Max radius is half of shortest edge. */
    width = x1 - x0 + 1;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	823b      	strh	r3, [r7, #16]
    height = y1 - y0 + 1;
 8002cb2:	883a      	ldrh	r2, [r7, #0]
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	81fb      	strh	r3, [r7, #14]
    r = min(r, min(width / 2, height / 2));
 8002cbe:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8002cc2:	8a3b      	ldrh	r3, [r7, #16]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	89fb      	ldrh	r3, [r7, #14]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f7ff fcd8 	bl	8002688 <min>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff fcd3 	bl	8002688 <min>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	853b      	strh	r3, [r7, #40]	; 0x28

    hagl_draw_hline(x0 + r, y0, width - 2 * r, color);
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cea:	4413      	add	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	b218      	sxth	r0, r3
 8002cf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	8a3a      	ldrh	r2, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cfe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002d02:	f7ff fd05 	bl	8002710 <hagl_draw_hline>
    hagl_draw_hline(x0 + r, y1, width - 2 * r, color);
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	b218      	sxth	r0, r3
 8002d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	8a3a      	ldrh	r2, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d1e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002d22:	f7ff fcf5 	bl	8002710 <hagl_draw_hline>
    hagl_draw_vline(x0, y0 + r, height - 2 * r, color);
 8002d26:	88ba      	ldrh	r2, [r7, #4]
 8002d28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d2a:	4413      	add	r3, r2
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b219      	sxth	r1, r3
 8002d30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	89fa      	ldrh	r2, [r7, #14]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d3e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002d42:	f7ff fd08 	bl	8002756 <hagl_draw_vline>
    hagl_draw_vline(x1, y0 + r, height - 2 * r, color);
 8002d46:	88ba      	ldrh	r2, [r7, #4]
 8002d48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	b219      	sxth	r1, r3
 8002d50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	89fa      	ldrh	r2, [r7, #14]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002d5e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002d62:	f7ff fcf8 	bl	8002756 <hagl_draw_vline>

    x = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	82fb      	strh	r3, [r7, #22]
    y = r;
 8002d6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d6c:	82bb      	strh	r3, [r7, #20]
    d = 3 - 2 * r;
 8002d6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f1c3 0303 	rsb	r3, r3, #3
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	827b      	strh	r3, [r7, #18]

    while (y >= x) {
 8002d7c:	e0c9      	b.n	8002f12 <hagl_draw_rounded_rectangle+0x316>
        x++;
 8002d7e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	82fb      	strh	r3, [r7, #22]

        if (d > 0) {
 8002d8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	dd16      	ble.n	8002dc0 <hagl_draw_rounded_rectangle+0x1c4>
            y--;
 8002d92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	82bb      	strh	r3, [r7, #20]
            d = d + 4 * (x - y) + 10;
 8002d9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002da2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	8a7b      	ldrh	r3, [r7, #18]
 8002db0:	4413      	add	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	330a      	adds	r3, #10
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	827b      	strh	r3, [r7, #18]
 8002dba:	e00a      	b.n	8002dd2 <hagl_draw_rounded_rectangle+0x1d6>
 8002dbc:	2000000c 	.word	0x2000000c
        } else {
            d = d + 4 * x + 6;
 8002dc0:	8afb      	ldrh	r3, [r7, #22]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	8a7b      	ldrh	r3, [r7, #18]
 8002dc8:	4413      	add	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3306      	adds	r3, #6
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	827b      	strh	r3, [r7, #18]
        }

        /* Top right */
        hagl_put_pixel(x1 - r + x, y0 + r - y, color);
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	8afb      	ldrh	r3, [r7, #22]
 8002ddc:	4413      	add	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b218      	sxth	r0, r3
 8002de2:	88ba      	ldrh	r2, [r7, #4]
 8002de4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002de6:	4413      	add	r3, r2
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	8abb      	ldrh	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b21b      	sxth	r3, r3
 8002df2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002df4:	4619      	mov	r1, r3
 8002df6:	f7ff fc59 	bl	80026ac <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y0 + r - x, color);
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	8abb      	ldrh	r3, [r7, #20]
 8002e04:	4413      	add	r3, r2
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b218      	sxth	r0, r3
 8002e0a:	88ba      	ldrh	r2, [r7, #4]
 8002e0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e0e:	4413      	add	r3, r2
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	8afb      	ldrh	r3, [r7, #22]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	b21b      	sxth	r3, r3
 8002e1a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f7ff fc45 	bl	80026ac <hagl_put_pixel>

        /* Top left */
        hagl_put_pixel(x0 + r - x, y0 + r - y, color);
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e26:	4413      	add	r3, r2
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	8afb      	ldrh	r3, [r7, #22]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b218      	sxth	r0, r3
 8002e32:	88ba      	ldrh	r2, [r7, #4]
 8002e34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e36:	4413      	add	r3, r2
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	8abb      	ldrh	r3, [r7, #20]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e44:	4619      	mov	r1, r3
 8002e46:	f7ff fc31 	bl	80026ac <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y0 + r - x, color);
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e4e:	4413      	add	r3, r2
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	8abb      	ldrh	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b218      	sxth	r0, r3
 8002e5a:	88ba      	ldrh	r2, [r7, #4]
 8002e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e5e:	4413      	add	r3, r2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	8afb      	ldrh	r3, [r7, #22]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7ff fc1d 	bl	80026ac <hagl_put_pixel>

        /* Bottom right */
        hagl_put_pixel(x1 - r + x, y1 - r + y, color);
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	8afb      	ldrh	r3, [r7, #22]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	b218      	sxth	r0, r3
 8002e82:	883a      	ldrh	r2, [r7, #0]
 8002e84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	8abb      	ldrh	r3, [r7, #20]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	b21b      	sxth	r3, r3
 8002e92:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	f7ff fc09 	bl	80026ac <hagl_put_pixel>
        hagl_put_pixel(x1 - r + y, y1 - r + x, color);
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	8abb      	ldrh	r3, [r7, #20]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b218      	sxth	r0, r3
 8002eaa:	883a      	ldrh	r2, [r7, #0]
 8002eac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	8afb      	ldrh	r3, [r7, #22]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f7ff fbf5 	bl	80026ac <hagl_put_pixel>

        /* Bottom left */
        hagl_put_pixel(x0 + r - x, y1 - r + y, color);
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	8afb      	ldrh	r3, [r7, #22]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	b218      	sxth	r0, r3
 8002ed2:	883a      	ldrh	r2, [r7, #0]
 8002ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	8abb      	ldrh	r3, [r7, #20]
 8002edc:	4413      	add	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	b21b      	sxth	r3, r3
 8002ee2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7ff fbe1 	bl	80026ac <hagl_put_pixel>
        hagl_put_pixel(x0 + r - y, y1 - r + x, color);
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002eee:	4413      	add	r3, r2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	8abb      	ldrh	r3, [r7, #20]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b218      	sxth	r0, r3
 8002efa:	883a      	ldrh	r2, [r7, #0]
 8002efc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	8afb      	ldrh	r3, [r7, #22]
 8002f04:	4413      	add	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	b21b      	sxth	r3, r3
 8002f0a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7ff fbcd 	bl	80026ac <hagl_put_pixel>
    while (y >= x) {
 8002f12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002f16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f6bf af2f 	bge.w	8002d7e <hagl_draw_rounded_rectangle+0x182>
 8002f20:	e002      	b.n	8002f28 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <hagl_draw_rounded_rectangle+0x32c>
        return;
 8002f26:	bf00      	nop
    }
};
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd90      	pop	{r4, r7, pc}
 8002f2e:	bf00      	nop

08002f30 <rgb565>:
#include <stdint.h>

#include "rgb565.h"

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	71bb      	strb	r3, [r7, #6]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	717b      	strb	r3, [r7, #5]
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	021b      	lsls	r3, r3, #8
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f4c:	f023 0307 	bic.w	r3, r3, #7
 8002f50:	b21a      	sxth	r2, r3
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	797b      	ldrb	r3, [r7, #5]
 8002f64:	08db      	lsrs	r3, r3, #3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	b21b      	sxth	r3, r3
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	b21b      	sxth	r3, r3
 8002f6e:	81fb      	strh	r3, [r7, #14]
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	021b      	lsls	r3, r3, #8
 8002f74:	b21a      	sxth	r2, r3
 8002f76:	89fb      	ldrh	r3, [r7, #14]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	b21b      	sxth	r3, r3
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	81fb      	strh	r3, [r7, #14]

    return rgb;
 8002f84:	89fb      	ldrh	r3, [r7, #14]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <__libc_init_array>:
 8002f94:	b570      	push	{r4, r5, r6, lr}
 8002f96:	4d0d      	ldr	r5, [pc, #52]	; (8002fcc <__libc_init_array+0x38>)
 8002f98:	4c0d      	ldr	r4, [pc, #52]	; (8002fd0 <__libc_init_array+0x3c>)
 8002f9a:	1b64      	subs	r4, r4, r5
 8002f9c:	10a4      	asrs	r4, r4, #2
 8002f9e:	2600      	movs	r6, #0
 8002fa0:	42a6      	cmp	r6, r4
 8002fa2:	d109      	bne.n	8002fb8 <__libc_init_array+0x24>
 8002fa4:	4d0b      	ldr	r5, [pc, #44]	; (8002fd4 <__libc_init_array+0x40>)
 8002fa6:	4c0c      	ldr	r4, [pc, #48]	; (8002fd8 <__libc_init_array+0x44>)
 8002fa8:	f000 f82e 	bl	8003008 <_init>
 8002fac:	1b64      	subs	r4, r4, r5
 8002fae:	10a4      	asrs	r4, r4, #2
 8002fb0:	2600      	movs	r6, #0
 8002fb2:	42a6      	cmp	r6, r4
 8002fb4:	d105      	bne.n	8002fc2 <__libc_init_array+0x2e>
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbc:	4798      	blx	r3
 8002fbe:	3601      	adds	r6, #1
 8002fc0:	e7ee      	b.n	8002fa0 <__libc_init_array+0xc>
 8002fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc6:	4798      	blx	r3
 8002fc8:	3601      	adds	r6, #1
 8002fca:	e7f2      	b.n	8002fb2 <__libc_init_array+0x1e>
 8002fcc:	080060e4 	.word	0x080060e4
 8002fd0:	080060e4 	.word	0x080060e4
 8002fd4:	080060e4 	.word	0x080060e4
 8002fd8:	080060e8 	.word	0x080060e8

08002fdc <memcpy>:
 8002fdc:	440a      	add	r2, r1
 8002fde:	4291      	cmp	r1, r2
 8002fe0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe4:	d100      	bne.n	8002fe8 <memcpy+0xc>
 8002fe6:	4770      	bx	lr
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ff2:	4291      	cmp	r1, r2
 8002ff4:	d1f9      	bne.n	8002fea <memcpy+0xe>
 8002ff6:	bd10      	pop	{r4, pc}

08002ff8 <memset>:
 8002ff8:	4402      	add	r2, r0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d100      	bne.n	8003002 <memset+0xa>
 8003000:	4770      	bx	lr
 8003002:	f803 1b01 	strb.w	r1, [r3], #1
 8003006:	e7f9      	b.n	8002ffc <memset+0x4>

08003008 <_init>:
 8003008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300a:	bf00      	nop
 800300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300e:	bc08      	pop	{r3}
 8003010:	469e      	mov	lr, r3
 8003012:	4770      	bx	lr

08003014 <_fini>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	bf00      	nop
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr
